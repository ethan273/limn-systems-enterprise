import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';
import { createServerClient } from '@supabase/ssr';

export async function middleware(request: NextRequest) {
  const response = NextResponse.next();

  // Skip middleware if Supabase credentials are not properly configured
  if (!process.env.NEXT_PUBLIC_SUPABASE_URL || !process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY) {
    console.log('⚠️ Supabase credentials not configured - skipping auth middleware');
    return response;
  }

  let session = null;

  try {
    const supabase = createServerClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL!,
      process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
      {
        cookies: {
          get(name: string) {
            return request.cookies.get(name)?.value;
          },
          set(name: string, value: string, options: any) {
            response.cookies.set(name, value, options);
          },
          remove(name: string, options: any) {
            response.cookies.delete(name);
          },
        },
      }
    );

    // Refresh session if expired
    const { data, error } = await supabase.auth.getSession();
    session = data?.session;

    if (error) {
      console.log('Auth error:', error.message);
    }
  } catch (error) {
    console.log('Middleware error:', error);
    return response; // Allow request to continue if there's an error
  }

  // Protected routes that require authentication
  const protectedPaths = [
    '/dashboard',
    '/admin',
    '/profile',
    '/settings',
    '/orders',
    '/projects',
    '/manufacturers',
  ];

  const isProtectedPath = protectedPaths.some(path => 
    request.nextUrl.pathname.startsWith(path)
  );

  // Auth routes that should redirect if already authenticated
  const authPaths = ['/auth/login', '/auth/request-access'];
  const isAuthPath = authPaths.some(path => 
    request.nextUrl.pathname.startsWith(path)
  );

  // If accessing protected route without session, redirect to login
  if (isProtectedPath && !session) {
    const redirectUrl = new URL('/auth/login', request.url);
    redirectUrl.searchParams.set('next', request.nextUrl.pathname);
    return NextResponse.redirect(redirectUrl);
  }

  // If accessing auth routes with active session, redirect to dashboard
  if (isAuthPath && session) {
    return NextResponse.redirect(new URL('/dashboard', request.url));
  }

  // Admin routes require admin role
  if (request.nextUrl.pathname.startsWith('/admin')) {
    const isAdmin = session?.user?.email?.endsWith('@limn.us.com') ||
                    session?.user?.app_metadata?.role === 'admin' ||
                    session?.user?.user_metadata?.role === 'admin';
    
    if (!isAdmin) {
      return NextResponse.redirect(new URL('/dashboard', request.url));
    }
  }

  return response;
}

export const config = {
  matcher: [
    // Temporarily disable middleware - only match admin routes
    '/admin/:path*',
  ],
};
