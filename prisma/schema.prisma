generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  schemas   = ["auth", "public"]
}

model payments {
  id                                String                              @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  payment_number                    String?                             @unique
  quickbooks_payment_id             String?
  invoice_id                        String?
  customer_id                       String?                             @db.Uuid
  payment_date                      String?
  payment_method                    String?
  payment_type                      String?
  amount                            Int?
  currency                          String?
  exchange_rate                     Int?
  reference_number                  String?
  processor_transaction_id          String?
  processing_fee                    String?
  net_amount                        Int?
  status                            String?
  notes                             String?
  quickbooks_sync_date              String?
  created_by                        String?
  created_at                        DateTime?                           @default(now()) @db.Timestamptz(6)
  payment_allocations               payment_allocations[]
  customers                         customers?                          @relation(fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  quickbooks_payment_reconciliation quickbooks_payment_reconciliation[]
  quickbooks_recurring_payments     quickbooks_recurring_payments[]

  @@index([created_by], map: "idx_payments_created_by")
  @@index([customer_id], map: "idx_payments_customer_id")
  @@index([invoice_id], map: "idx_payments_invoice_id")
  @@index([created_at], map: "idx_payments_created_at")
  @@index([processor_transaction_id], map: "idx_payments_processor_transaction_id")
  @@index([quickbooks_payment_id], map: "idx_payments_quickbooks_payment_id")
  @@index([status], map: "idx_payments_status")
  @@schema("public")
}

model design_briefs {
  id                                     String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  design_project_id                      String?          @db.Uuid
  title                                  String
  description                            String?
  target_market                          String?
  price_point_min                        Decimal?         @db.Decimal(10, 2)
  price_point_max                        Decimal?         @db.Decimal(10, 2)
  materials_preference                   Json?            @default("[]")
  style_references                       Json?            @default("[]")
  functional_requirements                String?
  dimensional_constraints                Json?
  sustainability_requirements            String?
  created_by                             String?          @db.Uuid
  approved_date                          DateTime?        @db.Timestamp(6)
  approved_by                            String?          @db.Uuid
  created_at                             DateTime?        @default(now()) @db.Timestamp(6)
  updated_at                             DateTime?        @default(now()) @updatedAt @db.Timestamp(6)
  users_design_briefs_approved_byTousers users?           @relation("design_briefs_approved_byTousers", fields: [approved_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_design_briefs_created_byTousers  users?           @relation("design_briefs_created_byTousers", fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  design_projects                        design_projects? @relation(fields: [design_project_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([approved_by], map: "idx_design_briefs_approved_by")
  @@index([created_by], map: "idx_design_briefs_created_by")
  @@index([design_project_id], map: "idx_design_briefs_design_project_id")
  @@schema("public")
}

model sso_configuration {
  id                   String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  provider_name        String    @default("google_workspace")
  saml_metadata_url    String?
  saml_entity_id       String?
  saml_sso_url         String?
  saml_x509_cert       String?
  attribute_mapping    Json?     @default("{\"name\": \"name\", \"email\": \"email\", \"job_title\": \"jobTitle\", \"department\": \"department\"}")
  domain_restriction   String?   @default("limn.us.com")
  auto_provision_users Boolean?  @default(true)
  default_user_type    String?   @default("employee")
  is_active            Boolean?  @default(true)
  created_at           DateTime? @default(now()) @db.Timestamptz(6)
  updated_at           DateTime? @default(now()) @updatedAt @db.Timestamptz(6)

  @@schema("public")
}

model push_subscriptions {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id          String?   @db.Uuid
  device_id        String
  device_type      String?
  push_token       String
  endpoint         String?
  auth_keys        Json?
  platform_details Json?
  is_active        Boolean?  @default(true)
  last_used        DateTime? @db.Timestamptz(6)
  created_at       DateTime? @default(now()) @db.Timestamptz(6)
  updated_at       DateTime? @default(now()) @updatedAt @db.Timestamptz(6)
  users            users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, device_id])
  @@index([device_id], map: "idx_push_subscriptions_device_id")
  @@index([is_active], map: "idx_push_subscriptions_is_active")
  @@index([user_id], map: "idx_push_subscriptions_user_id")
  @@schema("public")
}

model status_change_log {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  table_name    String    @db.VarChar(50)
  record_id     String    @db.Uuid
  field_name    String    @db.VarChar(50)
  old_value     String?   @db.VarChar(100)
  new_value     String    @db.VarChar(100)
  changed_by    String?   @db.Uuid
  change_reason String?
  automated     Boolean?  @default(false)
  created_at    DateTime? @default(now()) @db.Timestamptz(6)

  @@schema("public")
}

model document_templates {
  id               String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  template_name    String            @db.VarChar(255)
  category         document_category
  naming_pattern   String?           @db.VarChar(255)
  default_tags     String[]
  default_metadata Json?             @default("{}")
  folder_structure String?
  is_active        Boolean?          @default(true)
  created_at       DateTime?         @default(now()) @db.Timestamptz(6)

  @@schema("public")
}

model product_materials {
  id                String           @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  product_id        String?          @db.Uuid
  metal_option_id   String?          @db.Uuid
  wood_option_id    String?          @db.Uuid
  stone_option_id   String?          @db.Uuid
  weave_option_id   String?          @db.Uuid
  carving_option_id String?          @db.Uuid
  additional_specs  String?
  is_default        Boolean?         @default(false)
  created_at        DateTime?        @default(now()) @db.Timestamptz(6)
  updated_at        DateTime?        @default(now()) @updatedAt @db.Timestamptz(6)
  carving_options   carving_options? @relation(fields: [carving_option_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  metal_options     metal_options?   @relation(fields: [metal_option_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  items             items?           @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  stone_options     stone_options?   @relation(fields: [stone_option_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  weave_options     weave_options?   @relation(fields: [weave_option_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  wood_options      wood_options?    @relation(fields: [wood_option_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([carving_option_id], map: "idx_product_materials_carving_option_id")
  @@index([metal_option_id], map: "idx_product_materials_metal_option_id")
  @@index([product_id], map: "idx_product_materials_product")
  @@index([stone_option_id], map: "idx_product_materials_stone_option_id")
  @@index([weave_option_id], map: "idx_product_materials_weave_option_id")
  @@index([wood_option_id], map: "idx_product_materials_wood_option_id")
  @@schema("public")
}

model performance_metrics {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  metric_date  DateTime  @db.Date
  metric_type  String?   @db.VarChar(100)
  metric_value Decimal?  @db.Decimal(10, 2)
  metadata     Json?     @default("{}")
  created_at   DateTime? @default(now()) @db.Timestamptz(6)

  @@unique([metric_date, metric_type])
  @@schema("public")
}

model production_milestones {
  id                      String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  manufacturer_project_id String?                @db.Uuid
  production_order_id     String?                @db.Uuid // Phase 1: Production Orders tracking
  milestone_name          String
  milestone_type          String?
  planned_date            DateTime?              @db.Date
  actual_date             DateTime?              @db.Date
  status                  String?                @default("pending")
  completion_percentage   Int?                   @default(0)
  notes                   String?
  photos                  Json?                  @default("[]")
  created_by              String?                @db.Uuid
  created_at              DateTime?              @default(now()) @db.Timestamp(6)
  updated_at              DateTime?              @default(now()) @updatedAt @db.Timestamp(6)
  users                   users?                 @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  manufacturer_projects   manufacturer_projects? @relation(fields: [manufacturer_project_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  production_orders       production_orders?     @relation(fields: [production_order_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([created_by], map: "idx_production_milestones_created_by")
  @@index([manufacturer_project_id], map: "idx_production_milestones_manufacturer_project_id")
  @@index([production_order_id], map: "idx_production_milestones_production_order_id")
  @@schema("public")
}

model metal_types {
  id                     String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                   String                   @unique
  description            String?
  price_modifier         Decimal?                 @default(0) @db.Decimal(5, 2)
  active                 Boolean?                 @default(true)
  sort_order             Int?
  created_at             DateTime?                @default(now()) @db.Timestamp(6)
  updated_at             DateTime?                @default(now()) @updatedAt @db.Timestamp(6)
  metal_finishes         metal_finishes[]
  metal_type_collections metal_type_collections[]

  @@schema("public")
}

model qc_inspections {
  id                    String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  order_id              String            @db.Uuid
  order_item_id         String?           @db.Uuid
  production_item_id    String?           @db.Uuid
  batch_id              String?           @db.VarChar(50)
  qc_stage              qc_stage_enum
  status                qc_status_enum    @default(pending)
  assigned_inspector_id String?           @db.Uuid
  priority              priority_enum     @default(normal)
  defects_found         Int               @default(0)
  started_at            DateTime?         @db.Timestamptz(6)
  due_date              DateTime?         @db.Timestamptz(6)
  completed_at          DateTime?         @db.Timestamptz(6)
  notes                 String?
  created_at            DateTime?         @default(now()) @db.Timestamptz(6)
  updated_at            DateTime?         @default(now()) @updatedAt @db.Timestamptz(6)
  packing_jobs          packing_jobs[]
  qc_checkpoints        qc_checkpoints[]
  qc_defects            qc_defects[]
  orders                orders            @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  order_items           order_items?      @relation(fields: [order_item_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  production_items      production_items? @relation(fields: [production_item_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  qc_photos             qc_photos[]

  @@index([order_id], map: "idx_qc_inspections_order_id")
  @@index([order_item_id], map: "idx_qc_inspections_order_item_id")
  @@index([production_item_id], map: "idx_qc_inspections_production_item_id")
  @@schema("public")
}

model feature_permissions {
  id               String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_type        user_type_enum
  feature_name     String         @db.VarChar(100)
  feature_category String?        @db.VarChar(50)
  is_enabled       Boolean?       @default(false)
  description      String?
  created_at       DateTime?      @default(now()) @db.Timestamptz(6)
  updated_at       DateTime?      @default(now()) @updatedAt @db.Timestamptz(6)

  @@unique([user_type, feature_name])
  @@schema("public")
}

model quickbooks_recurring_payments {
  id                         String                      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  customer_id                String?                     @db.Uuid
  payment_method_id          String?                     @db.Uuid
  amount                     Decimal                     @db.Decimal(10, 2)
  frequency                  String?                     @db.VarChar(50)
  start_date                 DateTime                    @db.Date
  end_date                   DateTime?                   @db.Date
  next_payment_date          DateTime?                   @db.Date
  is_active                  Boolean?                    @default(true)
  last_payment_id            String?                     @db.Uuid
  total_payments_made        Int?                        @default(0)
  total_amount_collected     Decimal?                    @default(0) @db.Decimal(10, 2)
  created_at                 DateTime?                   @default(now()) @db.Timestamptz(6)
  updated_at                 DateTime?                   @default(now()) @updatedAt @db.Timestamptz(6)
  customers                  customers?                  @relation(fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  payments                   payments?                   @relation(fields: [last_payment_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  quickbooks_payment_methods quickbooks_payment_methods? @relation(fields: [payment_method_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([customer_id], map: "idx_quickbooks_recurring_payments_customer_id")
  @@index([last_payment_id], map: "idx_quickbooks_recurring_payments_last_payment_id")
  @@index([payment_method_id], map: "idx_quickbooks_recurring_payments_payment_method_id")
  @@schema("public")
}

model task_activity {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  task_id    String?   @db.Uuid
  user_id    String?   @db.Uuid
  action     String
  changes    Json?
  created_at DateTime? @default(now()) @db.Timestamp(6)
  users      users?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([task_id], map: "idx_task_activity_task_id")
  @@index([user_id], map: "idx_task_activity_user_id")
  @@schema("public")
}

model furniture_collections {
  id                             String                           @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name                           String                           @db.VarChar
  description                    String?
  created_at                     DateTime?                        @default(now()) @db.Timestamptz(6)
  updated_at                     DateTime?                        @default(now()) @updatedAt @db.Timestamptz(6)
  prefix                         String?                          @db.VarChar(2)
  designer                       String?
  display_order                  Int?                             @default(1)
  is_active                      Boolean?                         @default(true)
  image_url                      String?
  metadata                       Json?
  variation_types                String[]
  carving_style_collections      carving_style_collections[]
  design_projects                design_projects[]
  documents                      documents[]
  fabric_brand_collections       fabric_brand_collections[]
  fabric_collection_collections  fabric_collection_collections[]
  fabric_color_collections       fabric_color_collections[]
  items                          items[]
  manufacturer_projects          manufacturer_projects[]
  material_collection_audit      material_collection_audit[]
  material_collections           material_collections[]
  material_furniture_collections material_furniture_collections[]
  metal_color_collections        metal_color_collections[]
  metal_finish_collections       metal_finish_collections[]
  metal_type_collections         metal_type_collections[]
  orders                         orders[]
  stone_finish_collections       stone_finish_collections[]
  stone_type_collections         stone_type_collections[]
  weaving_color_collections      weaving_color_collections[]
  weaving_material_collections   weaving_material_collections[]
  weaving_pattern_collections    weaving_pattern_collections[]
  wood_finish_collections        wood_finish_collections[]
  wood_type_collections          wood_type_collections[]

  @@index([created_at], map: "idx_collections_created_at")
  @@map("collections")
  @@schema("public")
}

model task_comments {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  task_id    String?   @db.Uuid
  user_id    String?   @db.Uuid
  comment    String
  mentions   String[]  @default([]) @db.Uuid
  created_at DateTime? @default(now()) @db.Timestamp(6)
  users      users?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([task_id], map: "idx_task_comments_task_id")
  @@index([user_id], map: "idx_task_comments_user_id")
  @@schema("public")
}

model document_categories {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  category      String    @unique @db.VarChar(100)
  subcategories Json?     @default("[]")
  icon          String?   @db.VarChar(50)
  color         String?   @db.VarChar(50)
  sort_order    Int?      @default(0)
  is_active     Boolean?  @default(true)
  created_at    DateTime? @default(now()) @db.Timestamptz(6)

  @@schema("public")
}

model qc_photos {
  id               String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  qc_inspection_id String?         @db.Uuid
  qc_defect_id     String?         @db.Uuid
  photo_url        String          @db.VarChar(500)
  caption          String?
  uploaded_by      String?         @db.Uuid
  created_at       DateTime?       @default(now()) @db.Timestamptz(6)
  qc_defects       qc_defects?     @relation(fields: [qc_defect_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  qc_inspections   qc_inspections? @relation(fields: [qc_inspection_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([qc_defect_id], map: "idx_qc_photos_qc_defect_id")
  @@index([qc_inspection_id], map: "idx_qc_photos_qc_inspection_id")
  @@schema("public")
}

model contacts {
  id                   String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name                 String?
  email                String?
  phone                String?
  company              String?
  position             String?
  notes                String?
  tags                 String[]  @default([])
  created_at           DateTime? @default(now()) @db.Timestamptz(6)
  updated_at           DateTime? @default(now()) @updatedAt @db.Timestamptz(6)
  created_by           String?
  lead_conversion_date String?
  last_contacted       DateTime? @db.Timestamptz(6)
  source               String?
  score                Decimal?  @default(0) @db.Decimal
  assigned_to          String?   @db.Uuid
  last_activity_date   DateTime? @db.Timestamptz(6)

  @@index([company], map: "idx_contacts_company")
  @@index([created_by], map: "idx_contacts_created_by")
  @@index([email], map: "idx_contacts_email")
  @@index([assigned_to], map: "idx_contacts_assigned_to")
  @@index([created_at], map: "idx_contacts_created_at")
  @@index([score], map: "idx_contacts_score")
  @@index([source], map: "idx_contacts_source")
  @@schema("public")
}

model shipping_events {
  id                String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  shipment_id       String    @db.Uuid
  event_type        String    @db.VarChar(50)
  event_description String?
  event_location    String?   @db.VarChar(255)
  event_timestamp   DateTime  @db.Timestamptz(6)
  seko_event_id     String?   @db.VarChar(100)
  created_at        DateTime? @default(now()) @db.Timestamptz(6)
  shipments         shipments @relation(fields: [shipment_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([shipment_id], map: "idx_shipping_events_shipment_id")
  @@schema("public")
}

model sms_providers {
  id                   String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  provider_name        String              @unique @db.VarChar(50)
  provider_type        String?             @db.VarChar(50)
  api_endpoint         String?
  api_key_encrypted    String?
  api_secret_encrypted String?
  from_number          String?             @db.VarChar(20)
  is_active            Boolean?            @default(true)
  is_primary           Boolean?            @default(false)
  priority_order       Int?                @default(1)
  success_rate         Decimal?            @default(100) @db.Decimal(5, 2)
  avg_delivery_time_ms Int?
  cost_per_sms         Decimal?            @default(0.01) @db.Decimal(10, 4)
  monthly_limit        Int?
  current_month_usage  Int?                @default(0)
  created_at           DateTime?           @default(now()) @db.Timestamptz(6)
  updated_at           DateTime?           @default(now()) @updatedAt @db.Timestamptz(6)
  sms_analytics        sms_analytics[]
  sms_delivery_logs    sms_delivery_logs[]

  @@schema("public")
}

model manufacturer_pricing {
  id               String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  manufacturer_id  String?        @db.Uuid
  pricing_type     String?
  base_rate        Decimal?       @db.Decimal(10, 2)
  currency         String?        @default("USD")
  volume_discounts Json?          @default("[]")
  rush_multiplier  Decimal?       @default(1.5) @db.Decimal(3, 2)
  payment_terms    String?
  valid_from       DateTime?      @db.Date
  valid_until      DateTime?      @db.Date
  notes            String?
  created_at       DateTime?      @default(now()) @db.Timestamp(6)
  updated_at       DateTime?      @default(now()) @updatedAt @db.Timestamp(6)
  manufacturers    manufacturers? @relation(fields: [manufacturer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([manufacturer_id], map: "idx_manufacturer_pricing_manufacturer_id")
  @@schema("public")
}

model client_notifications {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  customer_id String    @db.Uuid
  type        String
  title       String
  message     String
  data        Json?     @default("{}")
  read        Boolean?  @default(false)
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  customers   customers @relation(fields: [customer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([customer_id], map: "idx_client_notifications_customer_id")
  @@schema("public")
}

model pickup_requests {
  id                   String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  shipment_id          String?   @db.Uuid
  pickup_date          DateTime  @db.Date
  ready_time           DateTime  @db.Time(6)
  close_time           DateTime  @db.Time(6)
  location             Json
  confirmation_number  String?
  driver_name          String?
  driver_phone         String?
  status               String?   @default("requested")
  seko_pickup_response Json?
  created_at           DateTime? @default(now()) @db.Timestamp(6)
  updated_at           DateTime? @default(now()) @updatedAt @db.Timestamp(6)

  @@schema("public")
}

model manufacturer_qc_records {
  id                      String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  manufacturer_project_id String?                @db.Uuid
  inspection_type         String?
  inspection_date         DateTime?              @db.Date
  inspector_name          String?
  passed                  Boolean?
  defects_found           Json?                  @default("[]")
  measurements            Json?                  @default("{}")
  corrective_actions      String?
  reinspection_required   Boolean?               @default(false)
  photos                  Json?                  @default("[]")
  report_url              String?
  created_at              DateTime?              @default(now()) @db.Timestamp(6)
  manufacturer_projects   manufacturer_projects? @relation(fields: [manufacturer_project_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([manufacturer_project_id], map: "idx_manufacturer_qc_records_manufacturer_project_id")
  @@schema("public")
}

model orders {
  id                                String                              @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  order_number                      String                              @unique(map: "orders_order_number_key1") @db.VarChar
  client_id                         String?                             @db.Uuid
  status                            String?                             @default("pending") @db.VarChar
  total_amount                      Decimal?                            @db.Decimal(10, 2)
  notes                             String?
  created_at                        DateTime?                           @default(now()) @db.Timestamptz(6)
  updated_at                        DateTime?                           @default(now()) @updatedAt @db.Timestamptz(6)
  customer_id                       String?                             @db.Uuid
  collection_id                     String?                             @db.Uuid
  priority                          String?
  due_date                          DateTime?                           @db.Timestamptz(6)
  estimated_completion              DateTime?                           @db.Timestamptz(6)
  actual_completion                 DateTime?                           @db.Timestamptz(6)
  assigned_to                       String?                             @db.Uuid
  department                        String?
  rush_order                        Boolean?
  shipping_method                   String?
  tracking_number                   String?
  invoice_sent                      Boolean?
  payment_received                  Boolean?
  tags                              String[]
  created_by                        String?
  client_files                      client_files[]
  cost_tracking                     cost_tracking[]
  customer_production_notifications customer_production_notifications[]
  design_approvals                  design_approvals[]
  document_folders                  document_folders[]
  order_items                       order_items[]
  order_materials                   order_materials[]
  furniture_collections             furniture_collections?              @relation(fields: [collection_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  customers                         customers?                          @relation(fields: [customer_id], references: [id], onDelete: Restrict, onUpdate: NoAction, map: "orders_customer_id_fkey1")
  pandadoc_documents                pandadoc_documents[]
  production_items                  production_items[]
  production_orders                 production_orders[]
  production_invoices               production_invoices[]
  qc_inspections                    qc_inspections[]

  @@index([collection_id], map: "idx_orders_collection_id")
  @@index([created_at], map: "idx_orders_created_at")
  @@index([created_by], map: "idx_orders_created_by")
  @@index([customer_id], map: "idx_orders_customer")
  @@index([customer_id, status], map: "idx_orders_customer_status")
  @@index([client_id], map: "idx_orders_client_id")
  @@index([customer_id], map: "idx_orders_customer_id")
  @@index([status], map: "idx_orders_status")
  @@schema("public")
}

model metal_options {
  id                   String                 @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  type                 String
  finish               String?
  color                String?
  code                 String                 @unique
  price_modifier       Decimal?               @default(0) @db.Decimal(10, 2)
  active               Boolean?               @default(true)
  created_at           DateTime?              @default(now()) @db.Timestamptz(6)
  updated_at           DateTime?              @default(now()) @updatedAt @db.Timestamptz(6)
  order_item_materials order_item_materials[]
  product_materials    product_materials[]

  @@index([active], map: "idx_metal_options_active")
  @@index([type], map: "idx_metal_options_type")
  @@schema("public")
}

model sms_analytics {
  id                   String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  date                 DateTime       @db.Date
  provider_id          String?        @db.Uuid
  total_sent           Int?           @default(0)
  total_delivered      Int?           @default(0)
  total_failed         Int?           @default(0)
  total_cost           Decimal?       @default(0) @db.Decimal(10, 2)
  avg_delivery_time_ms Int?
  success_rate         Decimal?       @db.Decimal(5, 2)
  peak_hour            Int?
  peak_hour_volume     Int?
  created_at           DateTime?      @default(now()) @db.Timestamptz(6)
  sms_providers        sms_providers? @relation(fields: [provider_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([date, provider_id])
  @@index([date], map: "idx_sms_analytics_date")
  @@index([provider_id], map: "idx_sms_analytics_provider_id")
  @@schema("public")
}

model pwa_devices {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id      String?   @db.Uuid
  device_id    String
  device_type  String?
  platform     String?
  browser      String?
  version      String?
  last_active  DateTime? @default(now()) @db.Timestamptz(6)
  push_enabled Boolean?  @default(false)
  created_at   DateTime? @default(now()) @db.Timestamptz(6)
  users        users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, device_id])
  @@index([last_active], map: "idx_pwa_devices_last_active")
  @@schema("public")
}

model fabric_colors {
  id                       String                     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  collection_id            String?                    @db.Uuid
  name                     String
  hex_code                 String?
  price_modifier           Decimal?                   @default(0) @db.Decimal(5, 2)
  active                   Boolean?                   @default(true)
  sort_order               Int?
  created_at               DateTime?                  @default(now()) @db.Timestamp(6)
  updated_at               DateTime?                  @default(now()) @updatedAt @db.Timestamp(6)
  fabric_color_collections fabric_color_collections[]
  fabric_collections       fabric_collections?        @relation(fields: [collection_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([collection_id, name])
  @@index([collection_id], map: "idx_fabric_colors_collection_id")
  @@schema("public")
}

model financial_periods {
  id                   String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  period_type          String?
  period_name          String
  start_date           DateTime  @db.Date
  end_date             DateTime  @db.Date
  is_closed            Boolean?  @default(false)
  closed_date          DateTime? @db.Timestamp(6)
  closed_by            String?   @db.Uuid
  total_revenue        Decimal?  @db.Decimal(12, 2)
  total_costs          Decimal?  @db.Decimal(12, 2)
  gross_profit         Decimal?  @db.Decimal(12, 2)
  gross_margin_percent Decimal?  @db.Decimal(5, 2)
  invoice_count        Int?
  payment_count        Int?
  created_at           DateTime? @default(now()) @db.Timestamp(6)
  users                users?    @relation(fields: [closed_by], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([period_type, start_date])
  @@index([closed_by], map: "idx_financial_periods_closed_by")
  @@schema("public")
}

model task_templates {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String
  description   String?
  template_data Json
  category      String?
  is_active     Boolean?  @default(true)
  created_at    DateTime? @default(now()) @db.Timestamp(6)

  @@schema("public")
}

model workflow_templates {
  id                  String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                String    @unique @db.VarChar(255)
  description         String?
  category            String?   @db.VarChar(50)
  template_definition Json
  icon                String?   @db.VarChar(50)
  is_public           Boolean?  @default(false)
  usage_count         Int?      @default(0)
  created_by          String?   @db.Uuid
  created_at          DateTime? @default(now()) @db.Timestamptz(6)
  updated_at          DateTime? @default(now()) @updatedAt @db.Timestamptz(6)

  @@schema("public")
}

model portal_invitations {
  id                  String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  customer_id         String    @db.Uuid
  email               String    @db.VarChar(255)
  full_name           String    @db.VarChar(255)
  title               String?   @db.VarChar(255)
  portal_role         String?   @default("viewer") @db.VarChar(50)
  invitation_token    String    @unique @default(dbgenerated("(gen_random_uuid())::text")) @db.VarChar(255)
  status              String?   @default("pending") @db.VarChar(20)
  sent_at             DateTime? @default(now()) @db.Timestamptz(6)
  expires_at          DateTime? @default(dbgenerated("(now() + '7 days'::interval)")) @db.Timestamptz(6)
  accepted_at         DateTime? @db.Timestamptz(6)
  revoked_at          DateTime? @db.Timestamptz(6)
  initial_permissions Json?     @default("{}")
  custom_message      String?
  sender_name         String?   @db.VarChar(255)
  created_by          String    @db.Uuid
  created_at          DateTime? @default(now()) @db.Timestamptz(6)
  users               users     @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  customers           customers @relation(fields: [customer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([customer_id, email, status])
  @@index([customer_id], map: "idx_portal_invitations_customer")
  @@index([status, expires_at], map: "idx_portal_invitations_status")
  @@index([invitation_token], map: "idx_portal_invitations_token")
  @@schema("public")
}

model manufacturer_contracts {
  id              String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  manufacturer_id String?        @db.Uuid
  contract_number String?        @unique
  contract_type   String?
  start_date      DateTime?      @db.Date
  end_date        DateTime?      @db.Date
  auto_renew      Boolean?       @default(false)
  terms           Json?
  min_commitment  Decimal?       @db.Decimal(10, 2)
  max_liability   Decimal?       @db.Decimal(10, 2)
  document_url    String?
  status          String?        @default("draft")
  signed_date     DateTime?      @db.Date
  signed_by       String?
  created_at      DateTime?      @default(now()) @db.Timestamp(6)
  updated_at      DateTime?      @default(now()) @updatedAt @db.Timestamp(6)
  manufacturers   manufacturers? @relation(fields: [manufacturer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([manufacturer_id], map: "idx_manufacturer_contracts_manufacturer_id")
  @@schema("public")
}

model quality_inspections {
  id                         String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  manufacturer_project_id    String?                @db.Uuid
  inspection_type            String?
  inspection_date            DateTime?              @default(dbgenerated("CURRENT_DATE")) @db.Date
  inspector_name             String?
  overall_grade              String?
  dimensional_accuracy_score Int?
  finish_quality_score       Int?
  assembly_quality_score     Int?
  defects_found              Int?                   @default(0)
  defect_descriptions        String[]
  corrective_actions         String[]
  photos                     Json?                  @default("[]")
  passed                     Boolean?               @default(false)
  notes                      String?
  created_at                 DateTime?              @default(now()) @db.Timestamp(6)
  manufacturer_projects      manufacturer_projects? @relation(fields: [manufacturer_project_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([manufacturer_project_id], map: "idx_quality_inspections_manufacturer_project_id")
  @@schema("public")
}

model sso_user_mappings {
  id                  String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id             String?   @db.Uuid
  google_workspace_id String?   @unique
  google_email        String?   @unique
  primary_email       String?
  department          String?
  job_title           String?
  manager_email       String?
  google_groups       String[]
  assigned_user_type  String?
  is_active           Boolean?  @default(true)
  last_login          DateTime? @db.Timestamptz(6)
  first_login         DateTime? @default(now()) @db.Timestamptz(6)
  metadata            Json?
  created_at          DateTime? @default(now()) @db.Timestamptz(6)
  updated_at          DateTime? @default(now()) @updatedAt @db.Timestamptz(6)
  users               users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([google_email], map: "idx_sso_user_mappings_email")
  @@index([user_id], map: "idx_sso_user_mappings_user_id")
  @@schema("public")
}

model order_materials {
  id                  String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  order_id            String?         @db.Uuid
  order_item_id       String?         @db.Uuid
  fabric_option_id    String?         @db.Uuid
  wood_option_id      String?         @db.Uuid
  metal_option_id     String?         @db.Uuid
  stone_option_id     String?         @db.Uuid
  weaving_material_id String?         @db.Uuid
  carving_style_id    String?         @db.Uuid
  additional_specs    Json?           @default("{}")
  custom_notes        String?
  generated_sku       String?         @db.VarChar(255)
  material_cost       Decimal?        @db.Decimal(10, 2)
  labor_cost          Decimal?        @db.Decimal(10, 2)
  total_cost          Decimal?        @db.Decimal(10, 2)
  created_at          DateTime?       @default(now()) @db.Timestamp(6)
  updated_at          DateTime?       @default(now()) @updatedAt @db.Timestamp(6)
  created_by          String?         @db.Uuid
  users               users?          @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  fabric_options      fabric_options? @relation(fields: [fabric_option_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  orders              orders?         @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  order_items         order_items?    @relation(fields: [order_item_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([carving_style_id], map: "idx_order_materials_carving_style_id")
  @@index([created_by], map: "idx_order_materials_created_by")
  @@index([fabric_option_id], map: "idx_order_materials_fabric_option_id")
  @@index([order_item_id], map: "idx_order_materials_item")
  @@index([order_id], map: "idx_order_materials_order")
  @@index([generated_sku], map: "idx_order_materials_sku")
  @@index([weaving_material_id], map: "idx_order_materials_weaving_material_id")
  @@schema("public")
}

model leads {
  id                       String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name                     String    @db.VarChar
  email                    String?   @db.VarChar
  phone                    String?   @db.VarChar
  company                  String?   @db.VarChar
  prospect_status          String?   @db.VarChar
  notes                    String?
  created_at               DateTime? @default(now()) @db.Timestamptz(6)
  updated_at               DateTime? @default(now()) @updatedAt @db.Timestamptz(6)
  status                   String?
  converted_to_customer_id String?
  assigned_to              String?   @db.Uuid
  lead_source              String?
  interest_level           String?
  follow_up_date           DateTime? @db.Timestamptz(6)
  converted_at             DateTime? @db.Timestamptz(6)
  conversion_type          String?
  tags                     String[]
  last_contacted           DateTime? @db.Timestamptz(6)
  contact_method           String?
  lead_value               Decimal?  @db.Decimal
  created_by               String?
  website                  String?
  pipeline_stage           String?   @default("initial")
  last_activity_date       DateTime? @db.Timestamptz(6)

  @@index([assigned_to], map: "idx_leads_assigned_to")
  @@index([created_at], map: "idx_leads_created_at")
  @@index([email], map: "idx_leads_email")
  @@index([prospect_status], map: "idx_leads_prospect_status")
  @@index([status], map: "idx_leads_status")
  @@index([converted_to_customer_id], map: "idx_leads_converted_to_customer_id")
  @@index([pipeline_stage], map: "idx_leads_pipeline_stage")
  @@schema("public")
}

model cost_tracking {
  id                    String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  order_id              String?        @db.Uuid
  order_item_id         String?        @db.Uuid
  cost_category         String?
  vendor_id             String?        @db.Uuid
  description           String?
  quantity              Decimal?       @db.Decimal(10, 2)
  unit_cost             Decimal?       @db.Decimal(12, 2)
  total_cost            Decimal        @db.Decimal(12, 2)
  currency              String?        @default("USD")
  invoice_number        String?
  paid                  Boolean?       @default(false)
  paid_date             DateTime?      @db.Date
  quickbooks_expense_id String?
  notes                 String?
  created_at            DateTime?      @default(now()) @db.Timestamp(6)
  updated_at            DateTime?      @default(now()) @updatedAt @db.Timestamp(6)
  orders                orders?        @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  order_items           order_items?   @relation(fields: [order_item_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  manufacturers         manufacturers? @relation(fields: [vendor_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([order_id], map: "idx_cost_tracking_order_id")
  @@index([order_item_id], map: "idx_cost_tracking_order_item_id")
  @@index([vendor_id], map: "idx_cost_tracking_vendor_id")
  @@schema("public")
}

model user_preferences {
  id                  String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id             String?   @unique @db.Uuid
  notification_email  Boolean?  @default(true)
  notification_sms    Boolean?  @default(false)
  notification_in_app Boolean?  @default(true)
  theme               String?   @default("light") @db.VarChar(20)
  language            String?   @default("en") @db.VarChar(10)
  timezone            String?   @default("UTC") @db.VarChar(50)
  date_format         String?   @default("MM/DD/YYYY") @db.VarChar(20)
  time_format         String?   @default("12h") @db.VarChar(20)
  email_digest        String?   @default("daily") @db.VarChar(20)
  metadata            Json?     @default("{}")
  created_at          DateTime? @default(now()) @db.Timestamptz(6)
  updated_at          DateTime? @default(now()) @updatedAt @db.Timestamptz(6)
  users               users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("public")
}

model quickbooks_webhooks {
  id                String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  event_type        String    @db.VarChar(100)
  realm_id          String    @db.VarChar(50)
  entity_name       String?   @db.VarChar(50)
  entity_id         String?   @db.VarChar(50)
  operation         String?   @db.VarChar(20)
  last_updated_time DateTime? @db.Timestamptz(6)
  webhook_payload   Json
  processed         Boolean?  @default(false)
  processed_at      DateTime? @db.Timestamptz(6)
  error_message     String?
  received_at       DateTime? @default(now()) @db.Timestamptz(6)

  @@index([processed], map: "idx_qb_webhooks_processed")
  @@index([realm_id], map: "idx_qb_webhooks_realm")
  @@schema("public")
}

model portal_sessions {
  id                String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  customer_id       String        @db.Uuid
  portal_user_id    String?       @db.Uuid
  session_token     String        @unique @db.VarChar(255)
  ip_address        String?       @db.Inet
  user_agent        String?
  device_info       Json?         @default("{}")
  started_at        DateTime?     @default(now()) @db.Timestamptz(6)
  last_activity     DateTime?     @default(now()) @db.Timestamptz(6)
  ended_at          DateTime?     @db.Timestamptz(6)
  is_active         Boolean?      @default(true)
  pages_visited     String[]      @default([])
  actions_performed Json?         @default("[]")
  is_suspicious     Boolean?      @default(false)
  risk_score        Int?          @default(0)
  customers         customers     @relation(fields: [customer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  portal_users      portal_users? @relation(fields: [portal_user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([last_activity], map: "idx_portal_sessions_activity")
  @@index([customer_id, is_active], map: "idx_portal_sessions_customer_active")
  @@index([session_token], map: "idx_portal_sessions_token")
  @@index([portal_user_id, is_active], map: "idx_portal_sessions_user_active")
  @@schema("public")
}

// OLD shop_drawings_list model removed - see comprehensive implementation at end of file

model sms_invitations {
  id                    String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  portal_user_id        String                @db.Uuid
  phone_number          String                @db.VarChar(20)
  message_content       String
  provider              String?               @default("twilio") @db.VarChar(50)
  provider_message_id   String?               @db.VarChar(255)
  status                String?               @default("pending") @db.VarChar(20)
  sent_at               DateTime?             @db.Timestamptz(6)
  delivered_at          DateTime?             @db.Timestamptz(6)
  failed_reason         String?
  cost_cents            Int?                  @default(0)
  created_at            DateTime?             @default(now()) @db.Timestamptz(6)
  updated_at            DateTime?             @default(now()) @updatedAt @db.Timestamptz(6)
  customer_portal_users customer_portal_users @relation(fields: [portal_user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([phone_number], map: "idx_sms_invitations_phone")
  @@index([portal_user_id], map: "idx_sms_invitations_portal_user")
  @@index([sent_at], map: "idx_sms_invitations_sent_at")
  @@index([status], map: "idx_sms_invitations_status")
  @@schema("public")
}

model notification_queue {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id       String?   @db.Uuid
  title         String
  body          String
  icon          String?
  badge         Int?      @default(0)
  priority      String?   @default("normal")
  status        String?   @default("pending")
  scheduled_for DateTime? @db.Timestamptz(6)
  sent_at       DateTime? @db.Timestamptz(6)
  error_message String?
  created_at    DateTime? @default(now()) @db.Timestamptz(6)
  updated_at    DateTime? @default(now()) @updatedAt @db.Timestamptz(6)
  users         users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([created_at(sort: Desc)], map: "idx_notification_queue_created_at")
  @@index([priority], map: "idx_notification_queue_priority")
  @@index([scheduled_for], map: "idx_notification_queue_scheduled_for")
  @@index([status], map: "idx_notification_queue_status")
  @@index([user_id], map: "idx_notification_queue_user_id")
  @@schema("public")
}

model wood_types {
  id                    String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                  String                  @unique
  description           String?
  price_modifier        Decimal?                @default(0) @db.Decimal(5, 2)
  active                Boolean?                @default(true)
  sort_order            Int?
  created_at            DateTime?               @default(now()) @db.Timestamp(6)
  updated_at            DateTime?               @default(now()) @updatedAt @db.Timestamp(6)
  wood_finishes         wood_finishes[]
  wood_type_collections wood_type_collections[]

  @@schema("public")
}

model customer_portal_activity {
  id                    String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  portal_id             String                 @db.Uuid
  portal_user_id        String?                @db.Uuid
  activity_type         String                 @db.VarChar(50)
  activity_description  String?
  resource_type         String?                @db.VarChar(50)
  resource_id           String?                @db.Uuid
  metadata              Json?                  @default("{}")
  ip_address            String?                @db.Inet
  user_agent            String?
  created_at            DateTime?              @default(now()) @db.Timestamptz(6)
  customer_portals      customer_portals       @relation(fields: [portal_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  customer_portal_users customer_portal_users? @relation(fields: [portal_user_id], references: [id], onUpdate: NoAction)

  @@index([created_at], map: "idx_portal_activity_created_at")
  @@index([portal_id], map: "idx_portal_activity_portal_id")
  @@index([activity_type], map: "idx_portal_activity_type")
  @@index([portal_user_id], map: "idx_portal_activity_user_id")
  @@schema("public")
}

model weaving_patterns {
  id                          String                        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  material_id                 String?                       @db.Uuid
  name                        String
  description                 String?
  price_modifier              Decimal?                      @default(0) @db.Decimal(5, 2)
  active                      Boolean?                      @default(true)
  sort_order                  Int?
  created_at                  DateTime?                     @default(now()) @db.Timestamp(6)
  updated_at                  DateTime?                     @default(now()) @updatedAt @db.Timestamp(6)
  weaving_colors              weaving_colors[]
  weaving_pattern_collections weaving_pattern_collections[]
  weaving_materials           weaving_materials?            @relation(fields: [material_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([material_id, name])
  @@schema("public")
}

model quickbooks_oauth_states {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String    @db.Uuid
  state      String    @unique
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  expires_at DateTime  @db.Timestamptz(6)
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([expires_at], map: "idx_quickbooks_oauth_states_expires_at")
  @@index([user_id], map: "idx_quickbooks_oauth_states_user_id")
  @@schema("public")
}

model approval_templates {
  id                String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  template_name     String    @unique
  description       String?
  document_category String?
  document_type     String?
  approval_stages   Json
  sequential        Boolean?  @default(false)
  auto_start        Boolean?  @default(true)
  created_at        DateTime? @default(now()) @db.Timestamptz(6)
  updated_at        DateTime? @default(now()) @updatedAt @db.Timestamptz(6)

  @@schema("public")
}

model sms_usage {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  phone_number  String    @db.VarChar(20)
  date          DateTime  @db.Date
  message_count Int?      @default(0)
  total_cost    Decimal?  @default(0.0) @db.Decimal(10, 4)
  created_at    DateTime? @default(now()) @db.Timestamptz(6)
  updated_at    DateTime? @default(now()) @updatedAt @db.Timestamptz(6)

  @@unique([phone_number, date])
  @@index([phone_number, date], map: "idx_sms_usage_phone_date")
  @@schema("public")
}

model document_approvals {
  id                      String                   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  document_id             String                   @db.Uuid
  approver_id             String?                  @db.Uuid
  approver_email          String?
  approver_role           String?
  approval_status         String                   @default("pending")
  comments                String?
  conditions_for_approval String?
  markup_file_url         String?
  requested_at            DateTime?                @default(now()) @db.Timestamptz(6)
  requested_by            String                   @db.Uuid
  responded_at            DateTime?                @db.Timestamptz(6)
  deadline                DateTime?                @db.Timestamptz(6)
  reminder_sent_at        DateTime?                @db.Timestamptz(6)
  auto_escalate_after     Unsupported("interval")? @default(dbgenerated("'48:00:00'::interval"))
  escalated_to            String?                  @db.Uuid
  escalated_at            DateTime?                @db.Timestamptz(6)
  priority                String?                  @default("normal")
  approval_order          Int?
  requires_all            Boolean?                 @default(false)

  @@unique([document_id, approver_id])
  @@index([approver_id], map: "idx_approvals_approver")
  @@index([document_id], map: "idx_approvals_document")
  @@index([approval_status], map: "idx_approvals_status")
  @@schema("public")
}

model document_comments_new {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  document_id String?    @db.Uuid
  user_id     Int?
  comment     String
  created_at  DateTime?  @default(now()) @db.Timestamp(6)
  documents   documents? @relation(fields: [document_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([document_id], map: "idx_document_comments_new_document_id")
  @@schema("public")
}

model production_progress {
  id                   String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  order_id             String    @db.Uuid
  stage                String
  status               String?   @default("pending")
  progress_percentage  Int?      @default(0)
  estimated_completion DateTime? @db.Date
  actual_completion    DateTime? @db.Timestamptz(6)
  notes                String?
  updated_by           String?   @db.Uuid
  created_at           DateTime? @default(now()) @db.Timestamptz(6)
  updated_at           DateTime? @default(now()) @updatedAt @db.Timestamptz(6)
  users                users?    @relation(fields: [updated_by], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([order_id], map: "idx_production_progress_order_id")
  @@index([updated_by], map: "idx_production_progress_updated_by")
  @@schema("public")
}

model sms_scheduled_jobs {
  id              String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  job_type        String?        @db.VarChar(50)
  recipient_phone String?        @db.VarChar(20)
  recipient_list  Json?          @default("[]")
  template_id     String?        @db.Uuid
  message_content String?
  variables       Json?          @default("{}")
  scheduled_time  DateTime       @db.Timestamptz(6)
  time_zone       String?        @default("UTC") @db.VarChar(50)
  status          String?        @default("pending") @db.VarChar(50)
  priority        Int?           @default(5)
  retry_count     Int?           @default(0)
  max_retries     Int?           @default(3)
  created_by      String?        @db.Uuid
  created_at      DateTime?      @default(now()) @db.Timestamptz(6)
  processed_at    DateTime?      @db.Timestamptz(6)
  users           users?         @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  sms_templates   sms_templates? @relation(fields: [template_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([created_by], map: "idx_sms_scheduled_jobs_created_by")
  @@index([template_id], map: "idx_sms_scheduled_jobs_template_id")
  @@schema("public")
}

model portal_activity_log {
  id            String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  customer_id   String?    @db.Uuid
  user_id       String?    @db.Uuid
  activity_type String     @db.VarChar(50)
  description   String?
  metadata      Json?      @default("{}")
  ip_address    String?    @db.Inet
  user_agent    String?
  created_at    DateTime?  @default(now()) @db.Timestamptz(6)
  customers     customers? @relation(fields: [customer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users         users?     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([customer_id], map: "idx_portal_activity_log_customer_id")
  @@index([user_id], map: "idx_portal_activity_log_user_id")
  @@schema("public")
}

model manufacturer_communications {
  id                    String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  manufacturer_id       String?                @db.Uuid
  project_id            String?                @db.Uuid
  communication_type    String?
  subject               String?
  summary               String?
  participants          Json?                  @default("[]")
  action_items          Json?                  @default("[]")
  follow_up_required    Boolean?               @default(false)
  follow_up_date        DateTime?              @db.Date
  created_by            String?                @db.Uuid
  created_at            DateTime?              @default(now()) @db.Timestamp(6)
  users                 users?                 @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  manufacturers         manufacturers?         @relation(fields: [manufacturer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  manufacturer_projects manufacturer_projects? @relation(fields: [project_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([created_by], map: "idx_manufacturer_communications_created_by")
  @@index([manufacturer_id], map: "idx_manufacturer_communications_manufacturer_id")
  @@index([project_id], map: "idx_manufacturer_communications_project_id")
  @@schema("public")
}

model customers {
  id                                              String                               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                                            String
  email                                           String?                              @unique(map: "customers_email_unique")
  phone                                           String?
  company                                         String?
  address                                         Json?
  type                                            String?
  status                                          String?                              @default("active")
  notes                                           String?
  tags                                            String[]                             @default([])
  created_by                                      String?                              @db.Uuid
  created_at                                      DateTime?                            @default(now()) @db.Timestamp(6)
  updated_at                                      DateTime?                            @default(now()) @updatedAt @db.Timestamp(6)
  portal_access                                   Boolean?                             @default(false)
  portal_password                                 String?
  last_portal_login                               DateTime?                            @db.Timestamptz(6)
  portal_access_granted_at                        DateTime?                            @db.Timestamptz(6)
  portal_access_granted_by                        String?                              @db.Uuid
  user_id                                         String?                              @db.Uuid
  company_name                                    String?
  city                                            String?                              @db.VarChar(100)
  state                                           String?                              @db.VarChar(50)
  zip                                             String?                              @db.VarChar(20)
  country                                         String?                              @default("USA") @db.VarChar(100)
  billing_address_line1                           String?                              @db.VarChar(255)
  billing_address_line2                           String?                              @db.VarChar(255)
  billing_city                                    String?                              @db.VarChar(100)
  billing_state                                   String?                              @db.VarChar(50)
  billing_zip                                     String?                              @db.VarChar(20)
  billing_country                                 String?                              @default("USA") @db.VarChar(100)
  shipping_same_as_billing                        Boolean?                             @default(true)
  credit_limit                                    Decimal?                             @default(0) @db.Decimal(15, 2)
  portal_created_at                               DateTime?                            @db.Timestamptz(6)
  portal_created_by                               String?                              @db.Uuid
  last_password_reset                             DateTime?                            @db.Timestamptz(6)
  last_activity_date                              DateTime?                            @db.Timestamptz(6)
  ar_aging                                        ar_aging[]
  client_files                                    client_files[]
  client_notifications                            client_notifications[]
  client_portal_sessions                          client_portal_sessions[]
  collection_activities                           collection_activities[]
  customer_communication_preferences              customer_communication_preferences[]
  customer_financials                             customer_financials[]
  customer_portal_access                          customer_portal_access[]
  customer_portals                                customer_portals?
  customer_production_notifications               customer_production_notifications[]
  users_customers_created_byTousers               users?                               @relation("customers_created_byTousers", fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_customers_portal_access_granted_byTousers users?                               @relation("customers_portal_access_granted_byTousers", fields: [portal_access_granted_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_customers_portal_created_byTousers        users?                               @relation("customers_portal_created_byTousers", fields: [portal_created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_customers_user_idTousers                  users?                               @relation("customers_user_idTousers", fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  deals                                           deals[]
  design_approvals                                design_approvals[]
  document_folders                                document_folders[]
  documents                                       documents[]
  notifications                                   notifications[]
  orders                                          orders[]
  orders_old                                      orders_old[]
  pandadoc_documents                              pandadoc_documents[]
  payments                                        payments[]
  portal_access_logs                              portal_access_logs[]
  portal_activity_log                             portal_activity_log[]
  portal_configurations                           portal_configurations?
  portal_documents                                portal_documents[]
  portal_invitations                              portal_invitations[]
  portal_sessions                                 portal_sessions[]
  portal_settings                                 portal_settings?
  portal_users                                    portal_users[]
  projects                                        projects[]
  quickbooks_payment_queue                        quickbooks_payment_queue[]
  quickbooks_recurring_payments                   quickbooks_recurring_payments[]
  shipping_quotes                                 shipping_quotes[]
  sms_opt_outs                                    sms_opt_outs[]
  webhook_endpoints                               webhook_endpoints[]
  production_invoices                             production_invoices[]
  customer_notifications                          customer_notifications[]
  customer_shipping_addresses                     customer_shipping_addresses[]

  @@index([city], map: "idx_customers_city")
  @@index([company], map: "idx_customers_company")
  @@index([created_by], map: "idx_customers_created_by")
  @@index([email], map: "idx_customers_email")
  @@index([portal_access_granted_by], map: "idx_customers_portal_access_granted_by")
  @@index([portal_created_at], map: "idx_customers_portal_created")
  @@index([state], map: "idx_customers_state")
  @@index([status], map: "idx_customers_status")
  @@index([user_id], map: "idx_customers_user_id")
  @@index([zip], map: "idx_customers_zip")
  @@schema("public")
}

model automation_logs {
  id                String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  rule_id           String?           @db.Uuid
  trigger_data      Json?
  actions_executed  Json?
  status            String?           @db.VarChar(50)
  error_message     String?
  execution_time_ms Int?
  created_at        DateTime?         @default(now()) @db.Timestamptz(6)
  automation_rules  automation_rules? @relation(fields: [rule_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([rule_id], map: "idx_automation_logs_rule_id")
  @@schema("public")
}

model integration_status {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  service_name String    @unique @db.VarChar(100)
  status       String?   @default("active") @db.VarChar(50)
  last_sync    DateTime? @db.Timestamptz(6)
  sync_errors  Json?     @default("[]")
  metadata     Json?     @default("{}")
  created_at   DateTime? @default(now()) @db.Timestamptz(6)
  updated_at   DateTime? @default(now()) @updatedAt @db.Timestamptz(6)

  @@index([service_name], map: "idx_integration_status_service_name")
  @@schema("public")
}

model order_item_materials {
  id                String           @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  order_item_id     String?          @db.Uuid
  metal_option_id   String?          @db.Uuid
  wood_option_id    String?          @db.Uuid
  stone_option_id   String?          @db.Uuid
  weave_option_id   String?          @db.Uuid
  carving_option_id String?          @db.Uuid
  additional_specs  String?
  created_at        DateTime?        @default(now()) @db.Timestamptz(6)
  updated_at        DateTime?        @default(now()) @updatedAt @db.Timestamptz(6)
  carving_options   carving_options? @relation(fields: [carving_option_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  metal_options     metal_options?   @relation(fields: [metal_option_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  order_items       order_items?     @relation(fields: [order_item_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  stone_options     stone_options?   @relation(fields: [stone_option_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  weave_options     weave_options?   @relation(fields: [weave_option_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  wood_options      wood_options?    @relation(fields: [wood_option_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([carving_option_id], map: "idx_order_item_materials_carving_option_id")
  @@index([metal_option_id], map: "idx_order_item_materials_metal_option_id")
  @@index([order_item_id], map: "idx_order_item_materials_order_item")
  @@index([stone_option_id], map: "idx_order_item_materials_stone_option_id")
  @@index([weave_option_id], map: "idx_order_item_materials_weave_option_id")
  @@index([wood_option_id], map: "idx_order_item_materials_wood_option_id")
  @@schema("public")
}

model user_document_permissions {
  id                    String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id               String    @unique @db.Uuid
  can_access_documents  Boolean?  @default(true)
  can_download          Boolean?  @default(true)
  can_upload            Boolean?  @default(true)
  can_delete            Boolean?  @default(false)
  can_approve           Boolean?  @default(false)
  can_share             Boolean?  @default(false)
  max_upload_size_mb    Int?      @default(50)
  storage_quota_gb      Decimal?  @db.Decimal(10, 2)
  storage_used_gb       Decimal?  @default(0) @db.Decimal(10, 2)
  allowed_file_types    String[]
  restricted_categories String[]
  access_expires_at     DateTime? @db.Timestamptz(6)
  download_expires_at   DateTime? @db.Timestamptz(6)
  created_at            DateTime? @default(now()) @db.Timestamptz(6)
  updated_at            DateTime? @default(now()) @updatedAt @db.Timestamptz(6)
  created_by            String?   @db.Uuid
  last_modified_by      String?   @db.Uuid
  notes                 String?
  permission_reason     String?
  permission_history    Json?     @default("[]")

  @@index([user_id], map: "idx_user_doc_permissions_user")
  @@schema("public")
}

model tasks {
  id                String              @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  title             String              @db.VarChar
  description       String?
  status            String?             @default("todo") @db.VarChar
  priority          String?             @default("medium") @db.VarChar
  assigned_to       String[]            @db.Uuid
  created_by        String?             @db.Uuid
  project_id        String?             @db.Uuid
  department        String?             @default("admin") @db.VarChar
  visibility        String?             @default("company") @db.VarChar
  mentioned_users   String[]            @db.Uuid
  tags              String[]
  due_date          DateTime?           @db.Timestamptz(6)
  start_date        DateTime?           @db.Timestamptz(6)
  estimated_hours   Int?
  actual_hours      Int?
  position          Int?
  watchers          String[]            @db.Uuid
  depends_on        String[]            @db.Uuid
  blocks            String[]            @db.Uuid
  task_type         String?             @default("task") @db.VarChar
  created_at        DateTime?           @default(now()) @db.Timestamptz(6)
  updated_at        DateTime?           @default(now()) @updatedAt @db.Timestamptz(6)
  completed_at      DateTime?           @db.Timestamptz(6)
  reporter_id       String?             @db.Uuid
  resolution        String?
  archived_at       DateTime?           @db.Timestamptz(6)
  archived_by       String?             @db.Uuid
  last_activity_at  DateTime?           @default(now()) @db.Timestamptz(6)
  task_activities   task_activities[]
  task_attachments  task_attachments[]
  task_entity_links task_entity_links[]

  @@index([assigned_to], map: "idx_tasks_assigned_to")
  @@index([created_at], map: "idx_tasks_created_at")
  @@index([priority], map: "idx_tasks_priority")
  @@index([status], map: "idx_tasks_status")
  @@index([reporter_id], map: "idx_tasks_reporter_id")
  @@index([archived_at], map: "idx_tasks_archived_at")
  @@index([last_activity_at], map: "idx_tasks_last_activity")
  @@index([created_by], map: "idx_tasks_created_by")
  @@index([project_id], map: "idx_tasks_project_id")
  @@schema("public")
}

model task_attachments {
  id                   String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  task_id              String    @db.Uuid
  file_name            String    @db.VarChar(255)
  file_path            String
  file_size            BigInt
  mime_type            String?   @db.VarChar(100)
  thumbnail_path       String?
  uploaded_by          String    @db.Uuid
  can_move_to_system   Boolean?  @default(true)
  moved_to_entity_type String?   @db.VarChar(50)
  moved_to_entity_id   String?   @db.Uuid
  moved_at             DateTime? @db.Timestamptz(6)
  created_at           DateTime? @default(now()) @db.Timestamptz(6)
  updated_at           DateTime? @default(now()) @updatedAt @db.Timestamptz(6)
  task                 tasks     @relation(fields: [task_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([task_id], map: "idx_task_attachments_task_id")
  @@index([uploaded_by], map: "idx_task_attachments_uploaded_by")
  @@schema("public")
}

model task_activities {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  task_id         String    @db.Uuid
  user_id         String    @db.Uuid
  activity_type   String    @db.VarChar(50)
  content         String?
  old_value       Json?
  new_value       Json?
  mentioned_users String[]  @default([]) @db.Uuid
  created_at      DateTime? @default(now()) @db.Timestamptz(6)
  updated_at      DateTime? @default(now()) @updatedAt @db.Timestamptz(6)
  task            tasks     @relation(fields: [task_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([task_id], map: "idx_task_activities_task_id")
  @@index([user_id], map: "idx_task_activities_user_id")
  @@index([activity_type], map: "idx_task_activities_type")
  @@schema("public")
}

model task_entity_links {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  task_id     String    @db.Uuid
  entity_type String    @db.VarChar(50)
  entity_id   String    @db.Uuid
  entity_name String?   @db.VarChar(255)
  link_type   String?   @default("related") @db.VarChar(20)
  created_by  String    @db.Uuid
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  updated_at  DateTime? @default(now()) @updatedAt @db.Timestamptz(6)
  task        tasks     @relation(fields: [task_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([task_id, entity_type, entity_id], map: "unique_task_entity_link")
  @@index([task_id], map: "idx_task_entity_links_task_id")
  @@index([entity_type, entity_id], map: "idx_task_entity_links_entity")
  @@schema("public")
}

model profiles {
  id          String    @id @default(uuid()) @db.Uuid
  email       String?   @unique
  full_name   String?
  role        String?
  tenant_id   String?   @db.Uuid
  department  String?
  permissions Json?     @default("{}")
  is_active   Boolean?  @default(true)
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  updated_at  DateTime? @default(now()) @updatedAt @db.Timestamptz(6)
  users       users     @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  tenants     tenants?  @relation(fields: [tenant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([id], map: "idx_profiles_id")
  @@index([tenant_id], map: "idx_profiles_tenant_id")
  @@schema("public")
}

model tracking_milestones {
  id                         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  shipment_id                String?   @db.Uuid
  milestone_code             String?
  milestone_description      String?
  location                   String?
  carrier_status_code        String?
  carrier_status_description String?
  milestone_date             DateTime  @db.Timestamp(6)
  estimated                  Boolean?  @default(false)
  signature                  String?
  pod_url                    String?
  exception_reason           String?
  raw_data                   Json?
  created_at                 DateTime? @default(now()) @db.Timestamp(6)

  @@unique([shipment_id, milestone_code, milestone_date])
  @@schema("public")
}

model verification_logs {
  id                 String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id            String?   @db.Uuid
  email              String?   @db.VarChar(255)
  type               String    @db.VarChar(50)
  success            Boolean
  ip_address         String?   @db.VarChar(45)
  user_agent         String?
  error_message      String?
  metadata           Json?     @default("{}")
  created_at         DateTime? @default(now()) @db.Timestamptz(6)
  phone_number       String?   @db.VarChar(20)
  provider           String?   @db.VarChar(50)
  delivery_status    String?   @db.VarChar(20)
  delivery_timestamp DateTime? @db.Timestamptz(6)
  users              users?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([created_at], map: "idx_verification_logs_created_at")
  @@index([email], map: "idx_verification_logs_email")
  @@index([phone_number], map: "idx_verification_logs_phone")
  @@index([provider], map: "idx_verification_logs_provider")
  @@index([type], map: "idx_verification_logs_type")
  @@schema("public")
}

model design_deliverables {
  id                String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  design_project_id String?          @db.Uuid
  deliverable_type  String?
  version           Int?             @default(1)
  file_name         String?
  file_url          String?
  file_size         Int?
  status            String?          @default("pending")
  submitted_date    DateTime?        @db.Timestamp(6)
  reviewed_by       String?          @db.Uuid
  review_date       DateTime?        @db.Timestamp(6)
  review_comments   String?
  created_at        DateTime?        @default(now()) @db.Timestamp(6)
  design_projects   design_projects? @relation(fields: [design_project_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users             users?           @relation(fields: [reviewed_by], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([design_project_id], map: "idx_design_deliverables_design_project_id")
  @@index([reviewed_by], map: "idx_design_deliverables_reviewed_by")
  @@schema("public")
}

model document_approval_workflow {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  document_id     String        @db.Uuid
  approval_step   Int
  approver_id     String        @db.Uuid
  approval_status String?       @default("pending") @db.VarChar(50)
  approval_date   DateTime?     @db.Timestamptz(6)
  comments        String?
  due_date        DateTime?     @db.Date
  created_at      DateTime?     @default(now()) @db.Timestamptz(6)
  user_profiles   user_profiles @relation(fields: [approver_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([document_id, approval_step])
  @@index([approver_id], map: "idx_document_approval_workflow_approver_id")
  @@schema("public")
}

model payment_allocations {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  payment_id       String?   @db.Uuid
  invoice_id       String?   @db.Uuid
  allocated_amount Decimal   @db.Decimal(12, 2)
  created_at       DateTime? @default(now()) @db.Timestamp(6)
  invoices         invoices? @relation(fields: [invoice_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  payments         payments? @relation(fields: [payment_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([invoice_id], map: "idx_payment_allocations_invoice_id")
  @@index([payment_id], map: "idx_payment_allocations_payment_id")
  @@schema("public")
}

model portal_users {
  id                                     String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  customer_id                            String               @db.Uuid
  auth_user_id                           String?              @unique @db.Uuid
  email                                  String               @db.VarChar(255)
  full_name                              String               @db.VarChar(255)
  title                                  String?              @db.VarChar(255)
  phone                                  String?              @db.VarChar(50)
  portal_role                            String?              @default("viewer") @db.VarChar(50)
  is_active                              Boolean?             @default(true)
  is_primary_contact                     Boolean?             @default(false)
  permissions                            Json?                @default("{}")
  last_login                             DateTime?            @db.Timestamptz(6)
  login_count                            Int?                 @default(0)
  password_reset_required                Boolean?             @default(true)
  created_at                             DateTime?            @default(now()) @db.Timestamptz(6)
  created_by                             String?              @db.Uuid
  updated_at                             DateTime?            @default(now()) @updatedAt @db.Timestamptz(6)
  updated_by                             String?              @db.Uuid
  portal_access_logs                     portal_access_logs[]
  portal_sessions                        portal_sessions[]
  users_portal_users_auth_user_idTousers users?               @relation("portal_users_auth_user_idTousers", fields: [auth_user_id], references: [id], onUpdate: NoAction)
  users_portal_users_created_byTousers   users?               @relation("portal_users_created_byTousers", fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  customers                              customers            @relation(fields: [customer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users_portal_users_updated_byTousers   users?               @relation("portal_users_updated_byTousers", fields: [updated_by], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([customer_id, email])
  @@index([is_active, customer_id], map: "idx_portal_users_active")
  @@index([auth_user_id], map: "idx_portal_users_auth")
  @@index([customer_id], map: "idx_portal_users_customer")
  @@index([email], map: "idx_portal_users_email")
  @@schema("public")
}

model quickbooks_payment_methods {
  id                            String                          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  quickbooks_method_id          String                          @unique @db.VarChar(255)
  method_name                   String                          @db.VarChar(100)
  method_type                   String?                         @db.VarChar(50)
  is_active                     Boolean?                        @default(true)
  is_default                    Boolean?                        @default(false)
  processing_fee_percent        Decimal?                        @default(0) @db.Decimal(5, 2)
  processing_fee_fixed          Decimal?                        @default(0) @db.Decimal(10, 2)
  created_at                    DateTime?                       @default(now()) @db.Timestamptz(6)
  updated_at                    DateTime?                       @default(now()) @updatedAt @db.Timestamptz(6)
  quickbooks_payment_queue      quickbooks_payment_queue[]
  quickbooks_recurring_payments quickbooks_recurring_payments[]

  @@schema("public")
}

model invoice_items {
  id                 String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  invoice_id         String?      @db.Uuid
  item_id            String?      @db.Uuid
  order_item_id      String?      @db.Uuid
  quickbooks_item_id String?
  description        String
  quantity           Decimal      @db.Decimal(10, 2)
  unit_price         Decimal      @db.Decimal(12, 2)
  discount_percent   Decimal?     @default(0) @db.Decimal(5, 2)
  discount_amount    Decimal?     @default(0) @db.Decimal(12, 2)
  tax_rate           Decimal?     @db.Decimal(5, 2)
  tax_amount         Decimal?     @db.Decimal(12, 2)
  line_total         Decimal?     @default(dbgenerated("((quantity * unit_price) - discount_amount)")) @db.Decimal(12, 2)
  item_type          String?
  sort_order         Int?
  created_at         DateTime?    @default(now()) @db.Timestamp(6)
  invoices           invoices?    @relation(fields: [invoice_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  items              items?       @relation(fields: [item_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  order_items        order_items? @relation(fields: [order_item_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([invoice_id], map: "idx_invoice_items_invoice_id")
  @@index([item_id], map: "idx_invoice_items_item_id")
  @@index([order_item_id], map: "idx_invoice_items_order_item_id")
  @@schema("public")
}

model orders_old {
  id               String     @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  order_number     String     @unique(map: "orders_order_number_key")
  customer_id      String?    @db.Uuid
  project_id       String?    @db.Uuid
  status           String?    @default("draft")
  order_date       DateTime?  @default(dbgenerated("CURRENT_DATE")) @db.Date
  delivery_date    DateTime?  @db.Date
  subtotal         Decimal?   @db.Decimal(12, 2)
  tax              Decimal?   @db.Decimal(12, 2)
  shipping         Decimal?   @db.Decimal(12, 2)
  total            Decimal?   @db.Decimal(12, 2)
  currency         String?    @default("USD")
  payment_status   String?    @default("pending")
  payment_terms    String?
  shipping_address Json?
  billing_address  Json?
  notes            String?
  metadata         Json?      @default("{}")
  created_by       String?    @db.Uuid
  created_at       DateTime?  @default(now()) @db.Timestamp(6)
  updated_at       DateTime?  @default(now()) @updatedAt @db.Timestamp(6)
  users            users?     @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "orders_created_by_fkey")
  customers        customers? @relation(fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "orders_customer_id_fkey")
  projects         projects?  @relation(fields: [project_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "orders_project_id_fkey")

  @@index([created_by], map: "idx_orders_old_created_by")
  @@index([customer_id], map: "idx_orders_old_customer_id")
  @@index([project_id], map: "idx_orders_old_project_id")
  @@schema("public")
}

model export_configurations {
  id                    String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                  String           @db.VarChar(255)
  module                String           @db.VarChar(100)
  export_type           String           @db.VarChar(50)
  fields                Json             @default("[]")
  filters               Json?            @default("{}")
  schedule_enabled      Boolean?         @default(false)
  schedule_frequency    String?          @db.VarChar(50)
  schedule_time         DateTime?        @db.Time(6)
  schedule_day_of_week  Int?
  schedule_day_of_month Int?
  email_recipients      String[]
  is_active             Boolean?         @default(true)
  created_by            String?          @db.Uuid
  created_at            DateTime?        @default(now()) @db.Timestamptz(6)
  updated_at            DateTime?        @default(now()) @updatedAt @db.Timestamptz(6)
  users                 users?           @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  export_history        export_history[]

  @@index([created_by], map: "idx_export_configurations_created_by")
  @@index([module], map: "idx_export_configurations_module")
  @@schema("public")
}

model offline_sync_queue {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id       String?   @db.Uuid
  action        String
  entity_type   String
  entity_id     String?   @db.Uuid
  payload       Json
  status        String?   @default("pending")
  attempts      Int?      @default(0)
  error_message String?
  created_at    DateTime? @default(now()) @db.Timestamptz(6)
  synced_at     DateTime? @db.Timestamptz(6)
  users         users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, entity_type, entity_id, action, status], map: "unique_pending_action")
  @@schema("public")
}

model customer_portal_users {
  id                                 String                               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  portal_id                          String                               @db.Uuid
  email                              String                               @db.VarChar(255)
  full_name                          String                               @db.VarChar(255)
  title                              String?                              @db.VarChar(255)
  phone                              String?                              @db.VarChar(50)
  role                               String                               @db.VarChar(20)
  is_primary_contact                 Boolean?                             @default(false)
  is_active                          Boolean?                             @default(true)
  invitation_status                  String?                              @default("pending") @db.VarChar(20)
  invitation_sent_at                 DateTime?                            @db.Timestamptz(6)
  invitation_accepted_at             DateTime?                            @db.Timestamptz(6)
  last_login_at                      DateTime?                            @db.Timestamptz(6)
  auth_user_id                       String?                              @db.Uuid
  created_at                         DateTime?                            @default(now()) @db.Timestamptz(6)
  updated_at                         DateTime?                            @default(now()) @updatedAt @db.Timestamptz(6)
  phone_verified                     Boolean?                             @default(false)
  sms_invitation_sent                Boolean?                             @default(false)
  sms_invitation_sent_at             DateTime?                            @db.Timestamptz(6)
  preferred_contact_method           String?                              @default("email") @db.VarChar(10)
  customer_communication_preferences customer_communication_preferences[]
  customer_portal_activity           customer_portal_activity[]
  customer_portal_sessions           customer_portal_sessions[]
  users                              users?                               @relation(fields: [auth_user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  customer_portals                   customer_portals                     @relation(fields: [portal_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  sms_invitations                    sms_invitations[]

  @@unique([portal_id, email])
  @@index([auth_user_id], map: "idx_portal_users_auth_user")
  @@index([invitation_status], map: "idx_portal_users_invitation_status")
  @@index([phone_verified], map: "idx_portal_users_phone_verified")
  @@index([portal_id], map: "idx_portal_users_portal_id")
  @@index([preferred_contact_method], map: "idx_portal_users_preferred_contact")
  @@index([is_primary_contact], map: "idx_portal_users_primary")
  @@schema("public")
}

model material_inventory {
  id             String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  material_type  String
  option_id      String    @db.Uuid
  quantity       Decimal?  @default(0) @db.Decimal(10, 2)
  unit           String?   @default("unit")
  min_quantity   Decimal?  @default(10) @db.Decimal(10, 2)
  max_quantity   Decimal?  @default(1000) @db.Decimal(10, 2)
  location       String?
  last_restocked DateTime? @db.Timestamptz(6)
  created_at     DateTime? @default(now()) @db.Timestamptz(6)
  updated_at     DateTime? @default(now()) @updatedAt @db.Timestamptz(6)

  @@index([material_type], map: "idx_material_inventory_type")
  @@schema("public")
}

model production_events {
  id                     String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  production_tracking_id String?   @db.Uuid
  event_type             String
  title                  String
  description            String?
  severity               String?   @default("info")
  data                   Json?     @default("{}")
  created_by             String?   @db.Uuid
  created_at             DateTime? @default(now()) @db.Timestamp(6)
  users                  users?    @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([created_by], map: "idx_production_events_created_by")
  @@schema("public")
}

model pandadoc_templates {
  id                   Int       @id @default(autoincrement())
  pandadoc_template_id String    @unique @db.VarChar(255)
  name                 String    @db.VarChar(255)
  template_type        String    @default("contract") @db.VarChar(50)
  description          String?
  tags                 String[]  @default([])
  is_active            Boolean?  @default(true)
  created_at           DateTime? @default(now()) @db.Timestamp(6)
  updated_at           DateTime? @default(now()) @updatedAt @db.Timestamp(6)

  @@schema("public")
}

model designer_performance {
  id                   String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  designer_id          String?          @db.Uuid
  project_id           String?          @db.Uuid
  on_time_delivery     Boolean?
  revision_count       Int?
  quality_rating       Int?
  creativity_rating    Int?
  communication_rating Int?
  would_rehire         Boolean?
  notes                String?
  created_at           DateTime?        @default(now()) @db.Timestamp(6)
  designers            designers?       @relation(fields: [designer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  design_projects      design_projects? @relation(fields: [project_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([designer_id], map: "idx_designer_performance_designer_id")
  @@index([project_id], map: "idx_designer_performance_project_id")
  @@schema("public")
}

model email_campaigns {
  id                String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  campaign_name     String           @db.VarChar(255)
  subject_line      String
  email_template    String
  from_name         String?          @db.VarChar(100)
  from_email        String?          @db.VarChar(255)
  reply_to          String?          @db.VarChar(255)
  recipient_list    Json?            @default("[]")
  segment_criteria  Json?
  scheduled_date    DateTime?        @db.Timestamptz(6)
  status            String?          @default("draft") @db.VarChar(50)
  total_recipients  Int?             @default(0)
  sent_count        Int?             @default(0)
  open_count        Int?             @default(0)
  click_count       Int?             @default(0)
  bounce_count      Int?             @default(0)
  unsubscribe_count Int?             @default(0)
  created_by        String?          @db.Uuid
  created_at        DateTime?        @default(now()) @db.Timestamptz(6)
  sent_at           DateTime?        @db.Timestamptz(6)
  scheduled_for     DateTime?        @db.Timestamptz(6)
  updated_at        DateTime?        @default(now()) @updatedAt @db.Timestamptz(6)
  users             users?           @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  email_tracking    email_tracking[]

  @@index([created_by], map: "idx_email_campaigns_created_by")
  @@schema("public")
}

model design_revisions {
  id                                         String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  design_project_id                          String?          @db.Uuid
  revision_number                            Int
  revision_stage                             String?
  requested_by                               String?          @db.Uuid
  request_date                               DateTime?        @default(now()) @db.Timestamp(6)
  revision_notes                             String?
  changes_requested                          Json?            @default("[]")
  designer_response                          String?
  response_date                              DateTime?        @db.Timestamp(6)
  approved                                   Boolean?         @default(false)
  approved_by                                String?          @db.Uuid
  approval_date                              DateTime?        @db.Timestamp(6)
  time_spent_hours                           Decimal?         @db.Decimal(5, 2)
  created_at                                 DateTime?        @default(now()) @db.Timestamp(6)
  users_design_revisions_approved_byTousers  users?           @relation("design_revisions_approved_byTousers", fields: [approved_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  design_projects                            design_projects? @relation(fields: [design_project_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users_design_revisions_requested_byTousers users?           @relation("design_revisions_requested_byTousers", fields: [requested_by], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([approved_by], map: "idx_design_revisions_approved_by")
  @@index([design_project_id], map: "idx_design_revisions_design_project_id")
  @@index([requested_by], map: "idx_design_revisions_requested_by")
  @@schema("public")
}

// OLD shop_drawings model removed - see comprehensive implementation at end of file

model designers {
  id                   String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                 String
  company_name         String?
  contact_email        String
  phone                String?
  website              String?
  portfolio_url        String?
  specialties          Json?                  @default("[]")
  design_style         Json?                  @default("[]")
  hourly_rate          Decimal?               @db.Decimal(10, 2)
  currency             String?                @default("USD")
  status               String?                @default("prospect")
  rating               Decimal?               @db.Decimal(3, 2)
  years_experience     Int?
  certifications       Json?                  @default("[]")
  notes                String?
  created_at           DateTime?              @default(now()) @db.Timestamp(6)
  updated_at           DateTime?              @default(now()) @updatedAt @db.Timestamp(6)
  design_projects      design_projects[]
  designer_contracts   designer_contracts[]
  designer_performance designer_performance[]
  documents            documents[]
  mood_boards          mood_boards[]

  @@index([status], map: "idx_designer_status")
  @@schema("public")
}

model quickbooks_payment_reconciliation {
  id                    String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  payment_id            String?   @db.Uuid
  quickbooks_payment_id String?   @db.VarChar(255)
  quickbooks_deposit_id String?   @db.VarChar(255)
  reconciliation_date   DateTime? @db.Date
  bank_account          String?   @db.VarChar(100)
  expected_amount       Decimal?  @db.Decimal(10, 2)
  actual_amount         Decimal?  @db.Decimal(10, 2)
  difference            Decimal?  @default(dbgenerated("(actual_amount - expected_amount)")) @db.Decimal(10, 2)
  status                String?   @db.VarChar(50)
  notes                 String?
  reconciled_by         String?   @db.Uuid
  created_at            DateTime? @default(now()) @db.Timestamptz(6)
  payments              payments? @relation(fields: [payment_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users                 users?    @relation(fields: [reconciled_by], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([status], map: "idx_qb_reconciliation_status")
  @@index([payment_id], map: "idx_quickbooks_payment_reconciliation_payment_id")
  @@index([reconciled_by], map: "idx_quickbooks_payment_reconciliation_reconciled_by")
  @@schema("public")
}

model quickbooks_entity_mapping {
  id                    String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  entity_type           String                  @db.VarChar(50)
  limn_id               String                  @db.Uuid
  quickbooks_id         String                  @db.VarChar(50)
  quickbooks_sync_token String?                 @db.VarChar(50)
  last_synced_at        DateTime?               @default(now()) @db.Timestamptz(6)
  sync_status           quickbooks_sync_status? @default(completed)
  created_at            DateTime?               @default(now()) @db.Timestamptz(6)
  updated_at            DateTime?               @default(now()) @updatedAt @db.Timestamptz(6)

  @@unique([entity_type, limn_id])
  @@unique([entity_type, quickbooks_id])
  @@index([entity_type, limn_id], map: "idx_qb_mapping_limn")
  @@index([entity_type, quickbooks_id], map: "idx_qb_mapping_qb")
  @@schema("public")
}

// OLD shop_drawing_files model removed - see comprehensive implementation at end of file

model designer_contracts {
  id              String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  designer_id     String?    @db.Uuid
  contract_number String?    @unique
  contract_type   String?
  start_date      DateTime?  @db.Date
  end_date        DateTime?  @db.Date
  payment_terms   String?
  deliverables    Json?
  total_value     Decimal?   @db.Decimal(10, 2)
  status          String?    @default("draft")
  signed_date     DateTime?  @db.Date
  document_url    String?
  created_at      DateTime?  @default(now()) @db.Timestamp(6)
  updated_at      DateTime?  @default(now()) @updatedAt @db.Timestamp(6)
  designers       designers? @relation(fields: [designer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([designer_id], map: "idx_designer_contracts_designer_id")
  @@schema("public")
}

model document_access_log {
  id            String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  document_id   String        @db.Uuid
  accessed_by   String        @db.Uuid
  access_type   String?       @db.VarChar(50)
  ip_address    String?       @db.Inet
  user_agent    String?
  accessed_at   DateTime?     @default(now()) @db.Timestamptz(6)
  user_profiles user_profiles @relation(fields: [accessed_by], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([accessed_by], map: "idx_document_access_log_accessed_by")
  @@schema("public")
}

model quickbooks_payment_queue {
  id                         String                      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  invoice_id                 String?                     @db.Uuid
  customer_id                String?                     @db.Uuid
  amount                     Decimal                     @db.Decimal(10, 2)
  payment_method_id          String?                     @db.Uuid
  scheduled_date             DateTime?                   @db.Date
  status                     String?                     @default("pending") @db.VarChar(50)
  attempts                   Int?                        @default(0)
  last_attempt_at            DateTime?                   @db.Timestamptz(6)
  error_message              String?
  quickbooks_payment_id      String?                     @db.VarChar(255)
  quickbooks_transaction_id  String?                     @db.VarChar(255)
  metadata                   Json?                       @default("{}")
  created_at                 DateTime?                   @default(now()) @db.Timestamptz(6)
  processed_at               DateTime?                   @db.Timestamptz(6)
  customers                  customers?                  @relation(fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  invoices                   invoices?                   @relation(fields: [invoice_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  quickbooks_payment_methods quickbooks_payment_methods? @relation(fields: [payment_method_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([status], map: "idx_qb_payment_queue_status")
  @@index([customer_id], map: "idx_quickbooks_payment_queue_customer_id")
  @@index([invoice_id], map: "idx_quickbooks_payment_queue_invoice_id")
  @@index([payment_method_id], map: "idx_quickbooks_payment_queue_payment_method_id")
  @@schema("public")
}

model workflow_executions {
  id                String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  workflow_id       String    @db.Uuid
  started_at        DateTime? @default(now()) @db.Timestamptz(6)
  completed_at      DateTime? @db.Timestamptz(6)
  status            String    @default("running") @db.VarChar(20)
  trigger_data      Json?     @default("{}")
  execution_context Json?     @default("{}")
  execution_result  Json?     @default("{}")
  error_message     String?
  error_details     Json?
  duration_ms       Int?
  steps_completed   Int?      @default(0)
  steps_total       Int?
  initiated_by      String?   @db.Uuid
  cancelled_by      String?   @db.Uuid
  created_at        DateTime? @default(now()) @db.Timestamptz(6)
  workflows         workflows @relation(fields: [workflow_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([started_at(sort: Desc)], map: "idx_workflow_executions_started")
  @@index([status], map: "idx_workflow_executions_status")
  @@index([workflow_id], map: "idx_workflow_executions_workflow")
  @@schema("public")
}

model document_revisions {
  id                                                          String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  document_id                                                 String?        @db.Uuid
  version                                                     Int
  name                                                        String?        @db.VarChar(255)
  size                                                        BigInt?
  uploaded_by                                                 String?        @db.VarChar(255)
  created_at                                                  DateTime?      @default(now()) @db.Timestamptz(6)
  revision_notes                                              String?
  url                                                         String?
  file_hash                                                   String?        @db.VarChar(255)
  changed_by                                                  String?        @db.Uuid
  reviewed_by                                                 String?        @db.Uuid
  review_status                                               String?        @db.VarChar(50)
  review_date                                                 DateTime?      @db.Timestamptz(6)
  user_profiles_document_revisions_changed_byTouser_profiles  user_profiles? @relation("document_revisions_changed_byTouser_profiles", fields: [changed_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  documents                                                   documents?     @relation(fields: [document_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user_profiles_document_revisions_reviewed_byTouser_profiles user_profiles? @relation("document_revisions_reviewed_byTouser_profiles", fields: [reviewed_by], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([document_id], map: "idx_document_revisions_document_id")
  @@index([document_id, version], map: "idx_document_revisions_version")
  @@schema("public")
}

model additional_specs {
  id                String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  spec_category     String?
  spec_name         String?
  spec_type         String?
  default_value     String?
  min_value         Int?
  max_value         Int?
  unit              String?
  price_impact      Int?
  affects_lead_time Boolean?
  additional_days   Int?
  is_required       Boolean?
  is_active         Boolean?
  created_at        DateTime? @default(now()) @db.Timestamptz(6)
  updated_at        DateTime? @default(now()) @updatedAt @db.Timestamptz(6)

  @@index([is_active], map: "idx_specs_active")
  @@index([spec_category], map: "idx_specs_category")
  @@index([created_at], map: "idx_additional_specs_created_at")
  @@schema("public")
}

model email_tracking {
  id              String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  campaign_id     String?          @db.Uuid
  recipient_email String?          @db.VarChar(255)
  event_type      String?          @db.VarChar(50)
  event_data      Json?
  ip_address      String?          @db.Inet
  user_agent      String?
  created_at      DateTime?        @default(now()) @db.Timestamptz(6)
  email_campaigns email_campaigns? @relation(fields: [campaign_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([campaign_id], map: "idx_email_tracking_campaign_id")
  @@index([event_type], map: "idx_email_tracking_event_type")
  @@schema("public")
}

model shipping_quotes {
  id                  String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  order_id            String?            @db.Uuid
  production_order_id String?            @db.Uuid
  ship_from           Json
  ship_to             Json
  origin_address      Json?              @default("{}")
  destination_address Json?              @default("{}")
  packages            Json
  carrier_quotes      Json?              @default("[]")
  quotes              Json?              @default("[]")
  selected_quote      Json?
  quote_expires_at    DateTime?          @db.Timestamp(6)
  seko_quote_response Json?
  requested_at        DateTime?          @default(now()) @db.Timestamp(6)
  requested_by        String?            @db.Uuid
  created_at          DateTime?          @default(now()) @db.Timestamp(6)
  status              String?            @default("pending") @db.VarChar(50)
  customer_id         String?            @db.Uuid
  quote_number        String?            @db.VarChar(50)
  customer_name       String?            @db.VarChar(255)
  service_type        String?            @default("ground") @db.VarChar(50)
  quoted_cost         Decimal?           @default(0) @db.Decimal(10, 2)
  customers           customers?         @relation(fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users               users?             @relation(fields: [requested_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  production_orders   production_orders? @relation(fields: [production_order_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([customer_id], map: "idx_shipping_quotes_customer_id")
  @@index([order_id], map: "idx_shipping_quotes_order_id")
  @@index([production_order_id], map: "idx_shipping_quotes_production_order_id")
  @@index([requested_by], map: "idx_shipping_quotes_requested_by")
  @@schema("public")
}

model admin_permissions {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  role_name  String
  resource   String
  action     String
  created_at DateTime? @default(now()) @db.Timestamp(6)

  @@unique([role_name, resource, action])
  @@schema("public")
}

// OLD shop_drawing_comments model removed - see comprehensive implementation at end of file

model quickbooks_sync_log {
  id             String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sync_batch_id  String?                @db.Uuid
  sync_type      String                 @db.VarChar(50)
  sync_direction sync_direction
  entity_id      String?                @db.Uuid
  quickbooks_id  String?                @db.VarChar(50)
  action         String                 @db.VarChar(20)
  status         quickbooks_sync_status
  request_data   Json?
  response_data  Json?
  error_message  String?
  error_code     String?                @db.VarChar(50)
  started_at     DateTime?              @default(now()) @db.Timestamptz(6)
  completed_at   DateTime?              @db.Timestamptz(6)
  created_by     String?                @db.Uuid
  users          users?                 @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([sync_batch_id], map: "idx_qb_sync_log_batch")
  @@index([entity_id], map: "idx_qb_sync_log_entity")
  @@index([created_by], map: "idx_quickbooks_sync_log_created_by")
  @@index([sync_type], map: "idx_quickbooks_sync_log_sync_type")
  @@schema("public")
}

model project_materials {
  id                      String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  manufacturer_project_id String?                @db.Uuid
  material_name           String
  material_type           String?
  supplier_name           String?
  quantity_needed         Decimal?               @db.Decimal(10, 3)
  quantity_ordered        Decimal?               @db.Decimal(10, 3)
  quantity_received       Decimal?               @db.Decimal(10, 3)
  unit_of_measure         String?
  unit_cost               Decimal?               @db.Decimal(10, 2)
  total_cost              Decimal?               @db.Decimal(10, 2)
  order_date              DateTime?              @db.Date
  expected_delivery_date  DateTime?              @db.Date
  actual_delivery_date    DateTime?              @db.Date
  status                  String?                @default("planning")
  quality_grade           String?
  storage_location        String?
  notes                   String?
  created_at              DateTime?              @default(now()) @db.Timestamp(6)
  updated_at              DateTime?              @default(now()) @updatedAt @db.Timestamp(6)
  manufacturer_projects   manufacturer_projects? @relation(fields: [manufacturer_project_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([manufacturer_project_id], map: "idx_project_materials_manufacturer_project_id")
  @@schema("public")
}

model stone_options {
  id                   String                 @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  type                 String
  finish               String?
  code                 String                 @unique
  price_modifier       Decimal?               @default(0) @db.Decimal(10, 2)
  active               Boolean?               @default(true)
  created_at           DateTime?              @default(now()) @db.Timestamptz(6)
  updated_at           DateTime?              @default(now()) @updatedAt @db.Timestamptz(6)
  order_item_materials order_item_materials[]
  product_materials    product_materials[]

  @@index([active], map: "idx_stone_options_active")
  @@index([type], map: "idx_stone_options_type")
  @@schema("public")
}

model pwa_cache_manifest {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  cache_name      String
  cache_version   String
  urls            String[]
  strategy        String?
  max_age_seconds Int?      @default(86400)
  is_active       Boolean?  @default(true)
  created_at      DateTime? @default(now()) @db.Timestamptz(6)
  updated_at      DateTime? @default(now()) @updatedAt @db.Timestamptz(6)

  @@unique([cache_name, cache_version])
  @@schema("public")
}

model client_portal_sessions {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  customer_id   String    @db.Uuid
  user_email    String
  ip_address    String?   @db.Inet
  user_agent    String?
  started_at    DateTime? @default(now()) @db.Timestamptz(6)
  ended_at      DateTime? @db.Timestamptz(6)
  pages_visited Json?     @default("[]")
  customers     customers @relation(fields: [customer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([customer_id], map: "idx_client_portal_sessions_customer_id")
  @@schema("public")
}

model metal_colors {
  id                      String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  metal_finish_id         String?                   @db.Uuid
  name                    String
  hex_code                String?
  price_modifier          Decimal?                  @default(0) @db.Decimal(5, 2)
  active                  Boolean?                  @default(true)
  sort_order              Int?
  created_at              DateTime?                 @default(now()) @db.Timestamp(6)
  updated_at              DateTime?                 @default(now()) @updatedAt @db.Timestamp(6)
  metal_color_collections metal_color_collections[]
  metal_finishes          metal_finishes?           @relation(fields: [metal_finish_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([metal_finish_id, name])
  @@schema("public")
}

model products {
  id          String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  sku         String    @unique
  name        String
  category    String?
  base_price  Decimal?  @db.Decimal(10, 2)
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  updated_at  DateTime? @default(now()) @updatedAt @db.Timestamptz(6)
  description String?
  unit        String?
  weight_lbs  Decimal?  @db.Decimal(10, 2)
  dimensions  String?

  @@index([category], map: "idx_products_category")
  @@index([created_at], map: "idx_products_created_at")
  @@schema("public")
}

model pwa_subscriptions {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id     String?   @db.Uuid
  endpoint    String    @unique
  keys        Json
  device_info Json?     @default("{}")
  is_active   Boolean?  @default(true)
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  updated_at  DateTime? @default(now()) @updatedAt @db.Timestamptz(6)
  users       users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([user_id], map: "idx_pwa_subscriptions_user_id")
  @@schema("public")
}

model wood_options {
  id                   String                 @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  type                 String
  finish               String?
  code                 String                 @unique
  price_modifier       Decimal?               @default(0) @db.Decimal(10, 2)
  active               Boolean?               @default(true)
  created_at           DateTime?              @default(now()) @db.Timestamptz(6)
  updated_at           DateTime?              @default(now()) @updatedAt @db.Timestamptz(6)
  order_item_materials order_item_materials[]
  product_materials    product_materials[]

  @@index([active], map: "idx_wood_options_active")
  @@index([type], map: "idx_wood_options_type")
  @@schema("public")
}

model packing_jobs {
  id                   String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  order_id             String              @db.Uuid
  order_item_id        String?             @db.Uuid
  qc_inspection_id     String?             @db.Uuid
  quantity             Int
  packed_quantity      Int                 @default(0)
  box_count            Int                 @default(0)
  total_weight         Decimal?            @default(0) @db.Decimal(10, 2)
  dimensions           String?             @db.VarChar(100)
  packing_status       packing_status_enum @default(pending)
  packer_assigned_id   String?             @db.Uuid
  priority             priority_enum       @default(normal)
  special_instructions String?
  packed_date          DateTime?           @db.Timestamptz(6)
  tracking_number      String?             @db.VarChar(100)
  created_at           DateTime?           @default(now()) @db.Timestamptz(6)
  updated_at           DateTime?           @default(now()) @updatedAt @db.Timestamptz(6)
  packing_boxes        packing_boxes[]
  order_items          order_items?        @relation(fields: [order_item_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  qc_inspections       qc_inspections?     @relation(fields: [qc_inspection_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  shipments            shipments[]

  @@index([order_id], map: "idx_packing_jobs_order_id")
  @@index([order_item_id], map: "idx_packing_jobs_order_item_id")
  @@index([qc_inspection_id], map: "idx_packing_jobs_qc_inspection_id")
  @@schema("public")
}

model quickbooks_sync_config {
  id                     String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  entity_type            String          @unique @db.VarChar(50)
  sync_enabled           Boolean?        @default(true)
  sync_direction         sync_direction? @default(to_quickbooks)
  last_sync_at           DateTime?       @db.Timestamptz(6)
  sync_frequency_minutes Int?            @default(60)
  field_mappings         Json?           @default("{}")
  filters                Json?           @default("{}")
  created_at             DateTime?       @default(now()) @db.Timestamptz(6)
  updated_at             DateTime?       @default(now()) @updatedAt @db.Timestamptz(6)

  @@schema("public")
}

model manufacturer_performance {
  id                    String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  manufacturer_id       String?        @db.Uuid
  metric_date           DateTime       @db.Date
  on_time_delivery_rate Decimal?       @db.Decimal(5, 2)
  quality_score         Decimal?       @db.Decimal(3, 2)
  defect_rate           Decimal?       @db.Decimal(5, 2)
  response_time_hours   Int?
  rework_rate           Decimal?       @db.Decimal(5, 2)
  projects_completed    Int?
  projects_delayed      Int?
  created_at            DateTime?      @default(now()) @db.Timestamp(6)
  manufacturers         manufacturers? @relation(fields: [manufacturer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([manufacturer_id, metric_date])
  @@schema("public")
}

model admin_sessions {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id       String?   @db.Uuid
  session_token String?   @unique
  ip_address    String?   @db.Inet
  user_agent    String?
  is_active     Boolean?  @default(true)
  created_at    DateTime? @default(now()) @db.Timestamp(6)
  ended_at      DateTime? @db.Timestamp(6)
  users         users?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([user_id], map: "idx_admin_sessions_user_id")
  @@schema("public")
}

model automation_rules {
  id                 String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  rule_name          String            @db.VarChar(255)
  rule_type          String?           @db.VarChar(50)
  trigger_event      String?           @db.VarChar(100)
  trigger_conditions Json?             @default("{}")
  actions            Json
  is_active          Boolean?          @default(true)
  priority           Int?              @default(5)
  last_triggered_at  DateTime?         @db.Timestamptz(6)
  trigger_count      Int?              @default(0)
  created_by         String?           @db.Uuid
  created_at         DateTime?         @default(now()) @db.Timestamptz(6)
  updated_at         DateTime?         @default(now()) @updatedAt @db.Timestamptz(6)
  automation_logs    automation_logs[]
  users              users?            @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([created_by], map: "idx_automation_rules_created_by")
  @@schema("public")
}

model qc_defects {
  id               String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  qc_inspection_id String               @db.Uuid
  defect_type      String               @db.VarChar(100)
  severity         defect_severity_enum
  description      String?
  location         String?              @db.VarChar(255)
  action_required  String?
  resolved_at      DateTime?            @db.Timestamptz(6)
  created_at       DateTime?            @default(now()) @db.Timestamptz(6)
  updated_at       DateTime?            @default(now()) @updatedAt @db.Timestamptz(6)
  qc_inspections   qc_inspections       @relation(fields: [qc_inspection_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  qc_photos        qc_photos[]

  @@index([qc_inspection_id], map: "idx_qc_defects_qc_inspection_id")
  @@schema("public")
}

model teams {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String         @unique
  description  String?
  created_by   String?        @db.Uuid
  created_at   DateTime?      @default(now()) @db.Timestamp(6)
  updated_at   DateTime?      @default(now()) @updatedAt @db.Timestamp(6)
  team_members team_members[]
  users        users?         @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([created_by], map: "idx_teams_created_by")
  @@schema("public")
}

model portal_documents {
  id            String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  customer_id   String?    @db.Uuid
  document_type String     @db.VarChar(50)
  title         String     @db.VarChar(255)
  description   String?
  file_url      String?
  file_size     Int?
  mime_type     String?    @db.VarChar(100)
  is_public     Boolean?   @default(false)
  uploaded_by   String?    @db.Uuid
  tags          String[]
  metadata      Json?      @default("{}")
  created_at    DateTime?  @default(now()) @db.Timestamptz(6)
  updated_at    DateTime?  @default(now()) @updatedAt @db.Timestamptz(6)
  customers     customers? @relation(fields: [customer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users         users?     @relation(fields: [uploaded_by], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([customer_id], map: "idx_portal_documents_customer_id")
  @@index([uploaded_by], map: "idx_portal_documents_uploaded_by")
  @@schema("public")
}

model quickbooks_field_templates {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  entity_type    String    @db.VarChar(50)
  template_name  String    @db.VarChar(100)
  field_mappings Json
  is_default     Boolean?  @default(false)
  created_at     DateTime? @default(now()) @db.Timestamptz(6)
  updated_at     DateTime? @default(now()) @updatedAt @db.Timestamptz(6)

  @@unique([entity_type, template_name])
  @@schema("public")
}

model saved_searches {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id         String?   @db.Uuid
  search_name     String?   @db.VarChar(255)
  entity_type     String?   @db.VarChar(50)
  search_criteria Json
  sort_config     Json?
  is_default      Boolean?  @default(false)
  is_shared       Boolean?  @default(false)
  created_at      DateTime? @default(now()) @db.Timestamptz(6)
  users           users?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([user_id], map: "idx_saved_searches_user_id")
  @@schema("public")
}

model production_batches {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  batch_number    String    @unique
  order_id        String?   @db.Uuid
  status          String?   @default("pending")
  start_date      DateTime? @db.Date
  completion_date DateTime? @db.Date
  assigned_to     String?
  notes           String?
  created_at      DateTime? @default(now()) @db.Timestamp(6)
  updated_at      DateTime? @default(now()) @updatedAt @db.Timestamp(6)

  @@index([order_id], map: "idx_production_batches_order_id")
  @@schema("public")
}

model projects {
  id                        String                @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name                      String?
  customer_id               String?               @db.Uuid
  status                    String?
  start_date                String?
  end_date                  String?
  budget                    Int?
  description               String?
  metadata                  Json?
  created_by                String?               @db.Uuid
  created_at                DateTime?             @default(now()) @db.Timestamptz(6)
  updated_at                DateTime?             @default(now()) @updatedAt @db.Timestamptz(6)
  user_id                   String?               @db.Uuid
  tenant_id                 String?               @db.Uuid
  priority                  String?
  estimated_completion_date String?
  actual_completion_date    String?
  budget_estimate           String?
  actual_cost               String?
  project_manager           String?
  orders_old                orders_old[]
  customers                 customers?            @relation(fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tenants                   tenants?              @relation(fields: [tenant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  production_orders         production_orders[]
  production_invoices       production_invoices[]
  shipments                 shipments[]

  @@index([created_by], map: "idx_projects_created_by")
  @@index([customer_id], map: "idx_projects_customer_id")
  @@index([status], map: "idx_projects_status")
  @@index([tenant_id], map: "idx_projects_tenant_id")
  @@index([user_id], map: "idx_projects_user_id")
  @@index([user_id, created_at(sort: Desc)], map: "idx_projects_user_id_created_at")
  @@index([created_at], map: "idx_projects_created_at")
  @@schema("public")
}

model weave_options {
  id                   String                 @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  material             String
  pattern              String?
  color                String?
  code                 String                 @unique
  price_modifier       Decimal?               @default(0) @db.Decimal(10, 2)
  active               Boolean?               @default(true)
  created_at           DateTime?              @default(now()) @db.Timestamptz(6)
  updated_at           DateTime?              @default(now()) @updatedAt @db.Timestamptz(6)
  order_item_materials order_item_materials[]
  product_materials    product_materials[]

  @@index([active], map: "idx_weave_options_active")
  @@index([material], map: "idx_weave_options_material")
  @@schema("public")
}

// OLD shop_drawing_revisions model removed - see comprehensive implementation at end of file

model fabric_options {
  id                   String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  brand                String            @db.VarChar(255)
  collection           String?           @db.VarChar(255)
  pattern              String?           @db.VarChar(255)
  color                String?           @db.VarChar(255)
  material_composition String?
  width_inches         Decimal?          @db.Decimal(5, 2)
  repeat_inches        Decimal?          @db.Decimal(5, 2)
  durability_rating    String?           @db.VarChar(50)
  price_per_yard       Decimal?          @db.Decimal(10, 2)
  in_stock             Boolean?          @default(true)
  lead_time_days       Int?              @default(14)
  supplier             String?           @db.VarChar(255)
  sku_code             String?           @unique @db.VarChar(50)
  is_active            Boolean?          @default(true)
  created_at           DateTime?         @default(now()) @db.Timestamp(6)
  updated_at           DateTime?         @default(now()) @updatedAt @db.Timestamp(6)
  order_materials      order_materials[]

  @@index([is_active], map: "idx_fabric_active")
  @@index([brand], map: "idx_fabric_brand")
  @@schema("public")
}

model password_reset_tokens {
  id         String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id    String?   @db.Uuid
  token      String    @unique @db.VarChar(255)
  expires_at DateTime  @db.Timestamptz(6)
  used_at    DateTime? @db.Timestamptz(6)
  ip_address String?   @db.Inet
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  users      users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([token], map: "idx_password_reset_tokens_token")
  @@index([user_id], map: "idx_password_reset_tokens_user_id")
  @@schema("public")
}

model document_comments {
  id                                                          String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  document_id                                                 String              @db.Uuid
  revision_id                                                 String?             @db.Uuid
  comment_text                                                String
  commented_by                                                String              @db.Uuid
  parent_comment_id                                           String?             @db.Uuid
  mentioned_users                                             String[]            @db.Uuid
  is_resolved                                                 Boolean?            @default(false)
  resolved_by                                                 String?             @db.Uuid
  resolved_at                                                 DateTime?           @db.Timestamptz(6)
  created_at                                                  DateTime?           @default(now()) @db.Timestamptz(6)
  updated_at                                                  DateTime?           @default(now()) @updatedAt @db.Timestamptz(6)
  user_profiles_document_comments_commented_byTouser_profiles user_profiles       @relation("document_comments_commented_byTouser_profiles", fields: [commented_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  document_comments                                           document_comments?  @relation("document_commentsTodocument_comments", fields: [parent_comment_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  other_document_comments                                     document_comments[] @relation("document_commentsTodocument_comments")
  user_profiles_document_comments_resolved_byTouser_profiles  user_profiles?      @relation("document_comments_resolved_byTouser_profiles", fields: [resolved_by], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([commented_by], map: "idx_document_comments_commented_by")
  @@index([parent_comment_id], map: "idx_document_comments_parent_comment_id")
  @@index([resolved_by], map: "idx_document_comments_resolved_by")
  @@schema("public")
}

model fabric_brands {
  id                       String                     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                     String                     @unique
  description              String?
  price_modifier           Decimal?                   @default(0) @db.Decimal(5, 2)
  active                   Boolean?                   @default(true)
  sort_order               Int?
  created_at               DateTime?                  @default(now()) @db.Timestamp(6)
  updated_at               DateTime?                  @default(now()) @updatedAt @db.Timestamp(6)
  fabric_brand_collections fabric_brand_collections[]
  fabric_collections       fabric_collections[]

  @@schema("public")
}

model delivery_addresses {
  id             String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  shipment_id    String             @db.Uuid
  contact_name   String?            @db.VarChar(255)
  company_name   String?            @db.VarChar(255)
  street_address String
  city           String             @db.VarChar(100)
  state          String             @db.VarChar(50)
  postal_code    String             @db.VarChar(20)
  country        String?            @default("US") @db.VarChar(50)
  phone          String?            @db.VarChar(20)
  email          String?            @db.VarChar(255)
  address_type   address_type_enum? @default(delivery)
  created_at     DateTime?          @default(now()) @db.Timestamptz(6)
  shipments      shipments          @relation(fields: [shipment_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([shipment_id], map: "idx_delivery_addresses_shipment_id")
  @@schema("public")
}

model pandadoc_documents {
  id            String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  document_id   String     @unique @db.VarChar(255)
  template_id   String?    @db.Uuid
  order_id      String?    @db.Uuid
  customer_id   String?    @db.Uuid
  document_type String?    @db.VarChar(100)
  status        String?    @db.VarChar(50)
  recipients    Json?      @default("[]")
  metadata      Json?      @default("{}")
  sent_at       DateTime?  @db.Timestamptz(6)
  viewed_at     DateTime?  @db.Timestamptz(6)
  signed_at     DateTime?  @db.Timestamptz(6)
  expired_at    DateTime?  @db.Timestamptz(6)
  document_url  String?
  created_by    String?    @db.Uuid
  created_at    DateTime?  @default(now()) @db.Timestamptz(6)
  updated_at    DateTime?  @default(now()) @updatedAt @db.Timestamptz(6)
  users         users?     @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  customers     customers? @relation(fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  orders        orders?    @relation(fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([created_by], map: "idx_pandadoc_documents_created_by")
  @@index([customer_id], map: "idx_pandadoc_documents_customer_id")
  @@index([order_id], map: "idx_pandadoc_documents_order_id")
  @@index([status], map: "idx_pandadoc_documents_status")
  @@index([template_id], map: "idx_pandadoc_documents_template_id")
  @@schema("public")
}

model portal_configurations {
  id                                            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  customer_id                                   String    @unique @db.Uuid
  portal_name                                   String?   @db.VarChar(255)
  welcome_message                               String?
  custom_logo_url                               String?
  primary_color                                 String?   @default("#91bdbd") @db.VarChar(7)
  show_dashboard                                Boolean?  @default(true)
  show_orders                                   Boolean?  @default(true)
  show_shipping                                 Boolean?  @default(true)
  show_financials                               Boolean?  @default(false)
  show_documents                                Boolean?  @default(true)
  show_approvals                                Boolean?  @default(true)
  show_production_tracking                      Boolean?  @default(true)
  show_design_center                            Boolean?  @default(false)
  show_support_tickets                          Boolean?  @default(true)
  show_invoice_details                          Boolean?  @default(false)
  show_payment_history                          Boolean?  @default(false)
  show_outstanding_balance                      Boolean?  @default(false)
  allow_online_payments                         Boolean?  @default(false)
  allow_document_upload                         Boolean?  @default(true)
  allowed_file_types                            String[]  @default(["pdf", "doc", "docx", "jpg", "png"])
  max_file_size_mb                              Int?      @default(10)
  require_approval_for_uploads                  Boolean?  @default(true)
  enable_notifications                          Boolean?  @default(true)
  enable_email_notifications                    Boolean?  @default(true)
  notification_frequency                        String?   @default("immediate") @db.VarChar(20)
  session_timeout_minutes                       Int?      @default(480)
  require_mfa                                   Boolean?  @default(false)
  allowed_ip_ranges                             String[]
  created_at                                    DateTime? @default(now()) @db.Timestamptz(6)
  created_by                                    String?   @db.Uuid
  updated_at                                    DateTime? @default(now()) @updatedAt @db.Timestamptz(6)
  updated_by                                    String?   @db.Uuid
  users_portal_configurations_created_byTousers users?    @relation("portal_configurations_created_byTousers", fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  customers                                     customers @relation(fields: [customer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users_portal_configurations_updated_byTousers users?    @relation("portal_configurations_updated_byTousers", fields: [updated_by], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([customer_id], map: "idx_portal_configurations_customer")
  @@schema("public")
}

model tax_rates {
  id                  String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                String
  rate                Decimal   @db.Decimal(5, 2)
  tax_agency          String?
  quickbooks_tax_code String?
  is_compound         Boolean?  @default(false)
  is_default          Boolean?  @default(false)
  active              Boolean?  @default(true)
  created_at          DateTime? @default(now()) @db.Timestamp(6)

  @@schema("public")
}

model invoices {
  id                       String                     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  created_at               DateTime?                  @default(now()) @db.Timestamptz(6)
  updated_at               DateTime?                  @default(now()) @updatedAt @db.Timestamptz(6)
  invoice_items            invoice_items[]
  payment_allocations      payment_allocations[]
  quickbooks_payment_queue quickbooks_payment_queue[]

  @@index([created_at], map: "idx_invoices_created_at")
  @@schema("public")
}

model ar_aging {
  id                String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  snapshot_date     DateTime   @db.Date
  customer_id       String?    @db.Uuid
  current_amount    Decimal?   @default(0) @db.Decimal(12, 2)
  days_1_30         Decimal?   @default(0) @db.Decimal(12, 2)
  days_31_60        Decimal?   @default(0) @db.Decimal(12, 2)
  days_61_90        Decimal?   @default(0) @db.Decimal(12, 2)
  over_90_days      Decimal?   @default(0) @db.Decimal(12, 2)
  total_outstanding Decimal?   @default(dbgenerated("((((current_amount + days_1_30) + days_31_60) + days_61_90) + over_90_days)")) @db.Decimal(12, 2)
  created_at        DateTime?  @default(now()) @db.Timestamp(6)
  customers         customers? @relation(fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([snapshot_date, customer_id])
  @@index([customer_id], map: "idx_ar_aging_customer_id")
  @@schema("public")
}

model packing_boxes {
  id                   String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  packing_job_id       String       @db.Uuid
  box_number           Int
  box_type             String?      @db.VarChar(50)
  dimensions           String?      @db.VarChar(100)
  weight               Decimal?     @db.Decimal(8, 2)
  contents_description String?
  barcode              String?      @db.VarChar(100)
  tracking_number      String?      @db.VarChar(100)
  created_at           DateTime?    @default(now()) @db.Timestamptz(6)
  packing_jobs         packing_jobs @relation(fields: [packing_job_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([packing_job_id], map: "idx_packing_boxes_packing_job_id")
  @@schema("public")
}

model stone_types {
  id                     String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                   String                   @unique
  description            String?
  price_modifier         Decimal?                 @default(0) @db.Decimal(5, 2)
  active                 Boolean?                 @default(true)
  sort_order             Int?
  created_at             DateTime?                @default(now()) @db.Timestamp(6)
  updated_at             DateTime?                @default(now()) @updatedAt @db.Timestamp(6)
  stone_finishes         stone_finishes[]
  stone_type_collections stone_type_collections[]

  @@schema("public")
}

model order_items {
  id                   String                 @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  order_id             String?                @db.Uuid
  item_id              String?                @db.Uuid
  quantity             Int?                   @default(1)
  unit_price           Decimal?               @db.Decimal(10, 2)
  created_at           DateTime?              @default(now()) @db.Timestamptz(6)
  updated_at           DateTime?              @default(now()) @db.Timestamptz(6)
  project_sku          String?
  description          String?
  specifications       Json?
  due_date             DateTime?              @db.Timestamptz(6)
  status               String?
  notes                String?
  cost_tracking        cost_tracking[]
  documents            documents[]
  invoice_items        invoice_items[]
  order_item_materials order_item_materials[]
  items                items?                 @relation(fields: [item_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  orders               orders?                @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  order_materials      order_materials[]
  packing_jobs         packing_jobs[]
  production_items     production_items[]
  qc_inspections       qc_inspections[]

  @@index([item_id], map: "idx_order_items_item_id")
  @@index([order_id], map: "idx_order_items_order_id")
  @@index([created_at], map: "idx_order_items_created_at")
  @@schema("public")
}

model email_templates {
  id           String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  template_key String        @unique @db.VarChar(100)
  name         String        @db.VarChar(255)
  subject      String        @db.VarChar(255)
  html_content String
  text_content String?
  variables    String[]
  language     String?       @default("en") @db.VarChar(10)
  is_active    Boolean?      @default(true)
  created_at   DateTime?     @default(now()) @db.Timestamptz(6)
  updated_at   DateTime?     @default(now()) @updatedAt @db.Timestamptz(6)
  email_queue  email_queue[]

  @@index([language], map: "idx_email_templates_language")
  @@index([template_key], map: "idx_email_templates_template_key")
  @@schema("public")
}

model user_profiles {
  id                                                               String                       @id @default(uuid()) @db.Uuid
  email                                                            String?
  name                                                             String?
  avatar_url                                                       String?
  created_at                                                       DateTime?                    @default(now()) @db.Timestamp(6)
  updated_at                                                       DateTime?                    @default(now()) @updatedAt @db.Timestamp(6)
  title                                                            String?                      @db.VarChar(100)
  user_type                                                        user_type_enum?              @default(employee)
  is_active                                                        Boolean?                     @default(true)
  department                                                       String?                      @db.VarChar(100)
  hire_date                                                        DateTime?                    @db.Date
  permissions                                                      Json?                        @default("{}")
  is_sso_user                                                      Boolean?                     @default(false)
  sso_provider                                                     String?
  google_workspace_id                                              String?
  last_sso_login                                                   DateTime?                    @db.Timestamptz(6)
  user_id                                                          String?                      @unique @db.Uuid
  first_name                                                       String?
  last_name                                                        String?
  full_name                                                        String?                      @default(dbgenerated("((COALESCE(first_name, ''::text) ||\nCASE\n    WHEN ((first_name IS NOT NULL) AND (last_name IS NOT NULL)) THEN ' '::text\n    ELSE ''::text\nEND) || COALESCE(last_name, ''::text))"))
  job_title                                                        String?
  raw_metadata                                                     Json?
  document_access_log                                              document_access_log[]
  document_approval_workflow                                       document_approval_workflow[]
  document_comments_document_comments_commented_byTouser_profiles  document_comments[]          @relation("document_comments_commented_byTouser_profiles")
  document_comments_document_comments_resolved_byTouser_profiles   document_comments[]          @relation("document_comments_resolved_byTouser_profiles")
  document_revisions_document_revisions_changed_byTouser_profiles  document_revisions[]         @relation("document_revisions_changed_byTouser_profiles")
  document_revisions_document_revisions_reviewed_byTouser_profiles document_revisions[]         @relation("document_revisions_reviewed_byTouser_profiles")
  documents_documents_approved_byTouser_profiles                   documents[]                  @relation("documents_approved_byTouser_profiles")
  documents_documents_uploaded_by_userTouser_profiles              documents[]                  @relation("documents_uploaded_by_userTouser_profiles")
  users_user_profiles_idTousers                                    users                        @relation("user_profiles_idTousers", fields: [id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users_user_profiles_user_idTousers                               users?                       @relation("user_profiles_user_idTousers", fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([email], map: "idx_user_profiles_email")
  @@index([is_active], map: "idx_user_profiles_is_active")
  @@index([user_id], map: "idx_user_profiles_user_id")
  @@index([user_type], map: "idx_user_profiles_user_type")
  @@schema("public")
}

model portal_access_logs {
  id                 String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  customer_id        String?       @db.Uuid
  portal_user_id     String?       @db.Uuid
  action             String        @db.VarChar(100)
  resource_type      String?       @db.VarChar(50)
  resource_id        String?       @db.Uuid
  ip_address         String?       @db.Inet
  user_agent         String?
  request_method     String?       @db.VarChar(10)
  request_path       String?
  response_status    Int?
  occurred_at        DateTime?     @default(now()) @db.Timestamptz(6)
  processing_time_ms Int?
  metadata           Json?         @default("{}")
  customers          customers?    @relation(fields: [customer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  portal_users       portal_users? @relation(fields: [portal_user_id], references: [id], onUpdate: NoAction)

  @@index([action, occurred_at], map: "idx_portal_access_logs_action")
  @@index([customer_id, occurred_at], map: "idx_portal_access_logs_customer")
  @@index([resource_type, resource_id], map: "idx_portal_access_logs_resource")
  @@index([portal_user_id, occurred_at], map: "idx_portal_access_logs_user")
  @@schema("public")
}

model workflows {
  id                  String                @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name                String?
  description         String?
  trigger_type        String?
  trigger_config      Json?
  status              String?
  workflow_definition Json?
  last_run_at         String?
  last_run_status     String?
  last_run_error      String?
  run_count           Int?
  success_count       Int?
  failure_count       Int?
  department_id       String?
  created_by          String?
  updated_by          String?
  tags                String?
  category            String?
  priority            Int?
  is_template         Boolean?
  created_at          DateTime?             @default(now()) @db.Timestamptz(6)
  updated_at          DateTime?             @default(now()) @updatedAt @db.Timestamptz(6)
  deleted_at          String?
  workflow_executions workflow_executions[]
  workflow_steps      workflow_steps[]

  @@unique([name, deleted_at], map: "workflow_name_unique")
  @@index([category], map: "idx_workflows_category")
  @@index([department_id], map: "idx_workflows_department")
  @@index([status], map: "idx_workflows_status")
  @@index([trigger_type], map: "idx_workflows_trigger_type")
  @@index([created_at], map: "idx_workflows_created_at")
  @@index([department_id], map: "idx_workflows_department_id")
  @@schema("public")
}

model user_roles {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String?   @unique @db.Uuid
  role_name  String
  created_at DateTime? @default(now()) @db.Timestamp(6)
  users      users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("public")
}

model materials {
  id                             String                           @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name                           String                           @db.VarChar
  type                           String?                          @db.VarChar
  description                    String?
  created_at                     DateTime?                        @default(now()) @db.Timestamptz(6)
  updated_at                     DateTime?                        @default(now()) @updatedAt @db.Timestamptz(6)
  category_id                    String?                          @db.Uuid
  active                         Boolean?                         @default(true)
  cost_per_unit                  Decimal?                         @db.Decimal(10, 2)
  unit_of_measure                String?
  created_by                     String?
  parent_material_id             String?                          @db.Uuid
  hierarchy_level                Int?
  hierarchy_path                 String?
  code                           String?                          @unique @db.VarChar
  material_collections           material_collections[]
  material_furniture_collections material_furniture_collections[] @relation("MaterialFurnitureCollections")
  material_categories            material_categories?             @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  parent_material                materials?                       @relation("MaterialHierarchy", fields: [parent_material_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  child_materials                materials[]                      @relation("MaterialHierarchy")

  @@index([category_id], map: "idx_materials_category_id")
  @@index([type], map: "idx_materials_type")
  @@index([parent_material_id], map: "idx_materials_parent")
  @@index([hierarchy_level], map: "idx_materials_hierarchy_level")
  @@index([created_at], map: "idx_materials_created_at")
  @@schema("public")
}

model material_furniture_collections {
  id                      String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  material_id             String                @db.Uuid
  furniture_collection_id String                @db.Uuid
  created_at              DateTime?             @default(now()) @db.Timestamptz(6)
  furniture_collections   furniture_collections @relation(fields: [furniture_collection_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  materials               materials             @relation("MaterialFurnitureCollections", fields: [material_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([material_id, furniture_collection_id], map: "material_furniture_collection_material_id_furniture_collect_key")
  @@index([material_id], map: "idx_mfc_material_id")
  @@index([furniture_collection_id], map: "idx_mfc_furniture_collection_id")
  @@schema("public")
}

model client_files {
  id                String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  customer_id       String?    @db.Uuid
  order_id          String?    @db.Uuid
  file_name         String
  file_type         String
  file_size         Int?
  file_url          String
  storage_path      String?
  category          String?
  description       String?
  uploaded_by       String?    @db.Uuid
  uploaded_at       DateTime?  @default(now()) @db.Timestamptz(6)
  is_client_visible Boolean?   @default(true)
  is_archived       Boolean?   @default(false)
  metadata          Json?      @default("{}")
  created_at        DateTime?  @default(now()) @db.Timestamptz(6)
  updated_at        DateTime?  @default(now()) @updatedAt @db.Timestamptz(6)
  customers         customers? @relation(fields: [customer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  orders            orders?    @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users             users?     @relation(fields: [uploaded_by], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([category], map: "idx_client_files_category")
  @@index([customer_id], map: "idx_client_files_customer")
  @@index([order_id], map: "idx_client_files_order")
  @@index([uploaded_by], map: "idx_client_files_uploaded_by")
  @@schema("public")
}

model user_dashboards {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id          String?   @db.Uuid
  dashboard_name   String    @db.VarChar(255)
  dashboard_layout Json?     @default("[]")
  widget_ids       String[]  @default([]) @db.Uuid
  is_default       Boolean?  @default(false)
  is_shared        Boolean?  @default(false)
  shared_with      String[]  @default([]) @db.Uuid
  created_at       DateTime? @default(now()) @db.Timestamptz(6)
  updated_at       DateTime? @default(now()) @updatedAt @db.Timestamptz(6)
  users            users?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([user_id], map: "idx_user_dashboards_user_id")
  @@schema("public")
}

model payment_batches {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  batch_number String    @db.VarChar(100)
  total_amount Decimal?  @db.Decimal(15, 2)
  status       String?   @default("pending") @db.VarChar(50)
  created_at   DateTime? @default(now()) @db.Timestamptz(6)
  updated_at   DateTime? @default(now()) @updatedAt @db.Timestamptz(6)

  @@schema("public")
}

model design_files {
  id                 String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  design_approval_id String?           @db.Uuid
  file_name          String
  file_type          String
  file_size          Int?
  file_url           String
  thumbnail_url      String?
  storage_path       String?
  uploaded_by        String?           @db.Uuid
  uploaded_at        DateTime?         @default(now()) @db.Timestamptz(6)
  is_active          Boolean?          @default(true)
  metadata           Json?             @default("{}")

  // Google Drive Integration
  storage_type       String?           @default("supabase") @db.VarChar(50)
  google_drive_id    String?           @db.VarChar(255)
  google_drive_url   String?

  created_at         DateTime?         @default(now()) @db.Timestamp(6)
  updated_at         DateTime?         @default(now()) @updatedAt @db.Timestamp(6)
  design_approvals   design_approvals? @relation(fields: [design_approval_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users              users?            @relation(fields: [uploaded_by], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([design_approval_id], map: "idx_design_files_approval")
  @@index([uploaded_by], map: "idx_design_files_uploaded_by")
  @@index([storage_type], map: "idx_design_files_storage_type")
  @@schema("public")
}

model system_logs {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  level         String
  category      String
  message       String
  timestamp     DateTime  @default(now()) @db.Timestamptz(6)
  user_id       String?   @db.Uuid
  session_id    String?
  request_id    String?
  ip_address    String?   @db.Inet
  user_agent    String?
  method        String?
  url           String?
  status_code   Int?
  response_time Int?
  metadata      Json?
  error_stack   String?
  created_at    DateTime? @default(now()) @db.Timestamptz(6)
  users         users?    @relation(fields: [user_id], references: [id], onUpdate: NoAction)

  @@index([category], map: "idx_system_logs_category")
  @@index([level], map: "idx_system_logs_level")
  @@index([timestamp(sort: Desc)], map: "idx_system_logs_timestamp")
  @@schema("public")
}

model deals {
  id                             String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title                          String     @db.VarChar(255)
  client                         String     @db.VarChar(255)
  value                          Decimal    @db.Decimal(12, 2)
  stage                          String?    @default("discovery") @db.VarChar(50)
  probability                    Int?       @default(25)
  expected_close_date            DateTime?  @db.Date
  actual_close_date              DateTime?  @db.Date
  assigned_to                    String?    @db.Uuid
  created_at                     DateTime?  @default(now()) @db.Timestamptz(6)
  updated_at                     DateTime?  @default(now()) @updatedAt @db.Timestamptz(6)
  notes                          String?
  customer_id                    String?    @db.Uuid
  lead_id                        String?    @db.Uuid
  loss_reason                    String?
  competitors                    String[]
  products                       String[]
  created_by                     String?    @db.Uuid
  metadata                       Json?      @default("{}")
  users_deals_assigned_toTousers users?     @relation("deals_assigned_toTousers", fields: [assigned_to], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_deals_created_byTousers  users?     @relation("deals_created_byTousers", fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  customers                      customers? @relation(fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([assigned_to], map: "idx_deals_assigned_to")
  @@index([customer_id], map: "idx_deals_customer_id")
  @@index([expected_close_date], map: "idx_deals_expected_close")
  @@index([stage], map: "idx_deals_stage")
  @@index([value(sort: Desc)], map: "idx_deals_value")
  @@schema("public")
}

model qc_checkpoints {
  id               String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  qc_inspection_id String                    @db.Uuid
  checkpoint_name  String                    @db.VarChar(255)
  status           qc_checkpoint_status_enum @default(pending)
  notes            String?
  inspector_id     String?                   @db.Uuid
  completed_at     DateTime?                 @db.Timestamptz(6)
  created_at       DateTime?                 @default(now()) @db.Timestamptz(6)
  updated_at       DateTime?                 @default(now()) @updatedAt @db.Timestamptz(6)
  qc_inspections   qc_inspections            @relation(fields: [qc_inspection_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([qc_inspection_id], map: "idx_qc_checkpoints_inspection_id")
  @@schema("public")
}

model collection_activities {
  id                                            String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  customer_id                                   String?    @db.Uuid
  activity_type                                 String?    @db.VarChar(100)
  notes                                         String?
  created_at                                    DateTime?  @default(now()) @db.Timestamp(6)
  updated_at                                    DateTime?  @default(now()) @updatedAt @db.Timestamp(6)
  created_by                                    String?    @db.Uuid
  updated_by                                    String?    @db.Uuid
  users_collection_activities_created_byTousers users?     @relation("collection_activities_created_byTousers", fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  customers                                     customers? @relation(fields: [customer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users_collection_activities_updated_byTousers users?     @relation("collection_activities_updated_byTousers", fields: [updated_by], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([created_at(sort: Desc)], map: "idx_collection_activities_created_at")
  @@index([customer_id], map: "idx_collection_activities_customer_id")
  @@schema("public")
}

model portal_settings {
  id                       String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  customer_id              String?    @unique @db.Uuid
  show_production_tracking Boolean?   @default(true)
  show_financial_details   Boolean?   @default(true)
  show_shipping_info       Boolean?   @default(true)
  allow_document_upload    Boolean?   @default(false)
  allow_design_approval    Boolean?   @default(false)
  custom_branding          Json?      @default("{}")
  notification_preferences Json?      @default("{\"sms\": false, \"email\": true, \"in_app\": true}")
  created_at               DateTime?  @default(now()) @db.Timestamptz(6)
  updated_at               DateTime?  @default(now()) @updatedAt @db.Timestamptz(6)
  customers                customers? @relation(fields: [customer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([customer_id], map: "idx_portal_settings_customer")
  @@schema("public")
}

model sms_opt_outs {
  id               String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  phone_number     String     @unique @db.VarChar(20)
  customer_id      String?    @db.Uuid
  opt_out_date     DateTime?  @default(now()) @db.Timestamptz(6)
  opt_out_reason   String?
  opt_out_method   String?    @db.VarChar(50)
  can_resubscribe  Boolean?   @default(true)
  resubscribe_date DateTime?  @db.Timestamptz(6)
  created_at       DateTime?  @default(now()) @db.Timestamptz(6)
  customers        customers? @relation(fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([customer_id], map: "idx_sms_opt_outs_customer_id")
  @@index([phone_number], map: "idx_sms_opt_outs_phone")
  @@schema("public")
}

model customer_portal_sessions {
  id                    String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  portal_user_id        String                @db.Uuid
  session_token         String                @unique @db.VarChar(255)
  ip_address            String?               @db.Inet
  user_agent            String?
  started_at            DateTime?             @default(now()) @db.Timestamptz(6)
  last_active_at        DateTime?             @default(now()) @db.Timestamptz(6)
  ended_at              DateTime?             @db.Timestamptz(6)
  is_active             Boolean?              @default(true)
  customer_portal_users customer_portal_users @relation(fields: [portal_user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([is_active], map: "idx_portal_sessions_active")
  @@index([portal_user_id], map: "idx_portal_sessions_user_id")
  @@schema("public")
}

model metal_finishes {
  id                       String                     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  metal_type_id            String?                    @db.Uuid
  name                     String
  description              String?
  price_modifier           Decimal?                   @default(0) @db.Decimal(5, 2)
  active                   Boolean?                   @default(true)
  sort_order               Int?
  created_at               DateTime?                  @default(now()) @db.Timestamp(6)
  updated_at               DateTime?                  @default(now()) @updatedAt @db.Timestamp(6)
  metal_colors             metal_colors[]
  metal_finish_collections metal_finish_collections[]
  metal_types              metal_types?               @relation(fields: [metal_type_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([metal_type_id, name])
  @@index([metal_type_id], map: "idx_metal_finishes_metal_type_id")
  @@schema("public")
}

model webhook_endpoints {
  id                 String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  customer_id        String?              @db.Uuid
  url                String
  secret             String?
  events             String[]             @default([])
  is_active          Boolean?             @default(true)
  last_success       DateTime?            @db.Timestamp(6)
  last_failure       DateTime?            @db.Timestamp(6)
  failure_count      Int?                 @default(0)
  created_at         DateTime?            @default(now()) @db.Timestamp(6)
  updated_at         DateTime?            @default(now()) @updatedAt @db.Timestamp(6)
  webhook_deliveries webhook_deliveries[]
  customers          customers?           @relation(fields: [customer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([customer_id], map: "idx_webhook_endpoints_customer_id")
  @@schema("public")
}

model client_projects {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  client_name  String    @db.VarChar(255)
  project_code String    @unique @db.VarChar(50)
  project_type String?   @db.VarChar(255)
  created_at   DateTime? @default(now()) @db.Timestamp(6)
  updated_at   DateTime? @default(now()) @updatedAt @db.Timestamp(6)

  @@index([project_code], map: "idx_client_projects_code")
  @@schema("public")
}

model manufacturer_projects {
  id                          String                        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  manufacturer_id             String?                       @db.Uuid
  project_type                String?
  project_name                String?
  reference_number            String?
  item_id                     String?                       @db.Uuid
  collection_id               String?                       @db.Uuid
  status                      String?                       @default("quoted")
  quoted_price                Decimal?                      @db.Decimal(10, 2)
  final_price                 Decimal?                      @db.Decimal(10, 2)
  quoted_lead_time_days       Int?
  actual_lead_time_days       Int?
  start_date                  DateTime?                     @db.Date
  completion_date             DateTime?                     @db.Date
  quality_rating              Int?
  notes                       String?
  created_at                  DateTime?                     @default(now()) @db.Timestamp(6)
  updated_at                  DateTime?                     @default(now()) @updatedAt @db.Timestamp(6)
  unit_cost                   Decimal?                      @db.Decimal(10, 2)
  quantity                    Int?                          @default(1)
  priority                    String?                       @default("normal")
  project_code                String?
  total_value                 Decimal?                      @db.Decimal(10, 2)
  estimated_start_date        DateTime?                     @db.Date
  estimated_completion_date   DateTime?                     @db.Date
  actual_start_date           DateTime?                     @db.Date
  actual_completion_date      DateTime?                     @db.Date
  currency                    String?                       @default("USD")
  shipping_method             String?
  tracking_number             String?
  quality_requirements        String?
  special_instructions        String?
  created_by                  String?                       @db.Uuid
  design_to_prototype         design_to_prototype[]
  documents                   documents[]
  manufacturer_communications manufacturer_communications[]
  furniture_collections       furniture_collections?        @relation(fields: [collection_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  items                       items?                        @relation(fields: [item_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  manufacturers               manufacturers?                @relation(fields: [manufacturer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  manufacturer_qc_records     manufacturer_qc_records[]
  manufacturer_shipments      manufacturer_shipments[]
  production_milestones       production_milestones[]
  project_materials           project_materials[]
  quality_inspections         quality_inspections[]

  @@index([collection_id], map: "idx_manufacturer_projects_collection_id")
  @@index([item_id], map: "idx_manufacturer_projects_item_id")
  @@index([manufacturer_id], map: "idx_manufacturer_projects_manufacturer_id")
  @@schema("public")
}

model production_stage_history {
  id                                                 String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  production_tracking_id                             String?   @db.Uuid
  stage_id                                           String?   @db.Uuid
  entered_at                                         DateTime? @default(now()) @db.Timestamp(6)
  exited_at                                          DateTime? @db.Timestamp(6)
  duration_minutes                                   Int?
  completed_by                                       String?   @db.Uuid
  notes                                              String?
  photos                                             Json?     @default("[]")
  issues_reported                                    Json?     @default("[]")
  approval_status                                    String?
  approved_by                                        String?   @db.Uuid
  approval_notes                                     String?
  created_at                                         DateTime? @default(now()) @db.Timestamp(6)
  users_production_stage_history_approved_byTousers  users?    @relation("production_stage_history_approved_byTousers", fields: [approved_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_production_stage_history_completed_byTousers users?    @relation("production_stage_history_completed_byTousers", fields: [completed_by], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([approved_by], map: "idx_production_stage_history_approved_by")
  @@index([completed_by], map: "idx_production_stage_history_completed_by")
  @@schema("public")
}

model customer_communication_preferences {
  id                     String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  customer_id            String                 @db.Uuid
  portal_user_id         String?                @db.Uuid
  email_notifications    Boolean?               @default(true)
  sms_notifications      Boolean?               @default(false)
  push_notifications     Boolean?               @default(false)
  notification_frequency String?                @default("immediate") @db.VarChar(20)
  quiet_hours_start      DateTime?              @default(dbgenerated("'22:00:00'::time without time zone")) @db.Time(6)
  quiet_hours_end        DateTime?              @default(dbgenerated("'08:00:00'::time without time zone")) @db.Time(6)
  timezone               String?                @default("America/Los_Angeles") @db.VarChar(50)
  language_preference    String?                @default("en") @db.VarChar(10)
  created_at             DateTime?              @default(now()) @db.Timestamptz(6)
  updated_at             DateTime?              @default(now()) @updatedAt @db.Timestamptz(6)
  customers              customers              @relation(fields: [customer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  customer_portal_users  customer_portal_users? @relation(fields: [portal_user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([customer_id, portal_user_id], map: "customer_communication_preferenc_customer_id_portal_user_id_key")
  @@index([customer_id], map: "idx_communication_prefs_customer")
  @@index([portal_user_id], map: "idx_communication_prefs_user")
  @@schema("public")
}

model weaving_colors {
  id                        String                      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  pattern_id                String?                     @db.Uuid
  name                      String
  hex_code                  String?
  price_modifier            Decimal?                    @default(0) @db.Decimal(5, 2)
  active                    Boolean?                    @default(true)
  sort_order                Int?
  created_at                DateTime?                   @default(now()) @db.Timestamp(6)
  updated_at                DateTime?                   @default(now()) @updatedAt @db.Timestamp(6)
  weaving_color_collections weaving_color_collections[]
  weaving_patterns          weaving_patterns?           @relation(fields: [pattern_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([pattern_id, name])
  @@schema("public")
}

model design_to_prototype {
  id                      String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  design_project_id       String?                @db.Uuid
  manufacturer_project_id String?                @db.Uuid
  prototype_status        String?
  handoff_date            DateTime?              @db.Timestamp(6)
  estimated_completion    DateTime?              @db.Date
  actual_completion       DateTime?              @db.Date
  notes                   String?
  created_at              DateTime?              @default(now()) @db.Timestamp(6)
  design_projects         design_projects?       @relation(fields: [design_project_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  manufacturer_projects   manufacturer_projects? @relation(fields: [manufacturer_project_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([design_project_id], map: "idx_design_to_prototype_design_project_id")
  @@index([manufacturer_project_id], map: "idx_design_to_prototype_manufacturer_project_id")
  @@schema("public")
}

model webhook_deliveries {
  id                String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  endpoint_id       String?            @db.Uuid
  event_type        String
  payload           Json
  response_status   Int?
  response_body     String?
  attempted_at      DateTime?          @default(now()) @db.Timestamp(6)
  delivered_at      DateTime?          @db.Timestamp(6)
  retry_count       Int?               @default(0)
  next_retry_at     DateTime?          @db.Timestamp(6)
  created_at        DateTime?          @default(now()) @db.Timestamp(6)
  webhook_endpoints webhook_endpoints? @relation(fields: [endpoint_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([endpoint_id], map: "idx_webhook_deliveries_endpoint_id")
  @@schema("public")
}

model export_history {
  id                    String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  configuration_id      String?                @db.Uuid
  module                String                 @db.VarChar(100)
  export_type           String                 @db.VarChar(50)
  file_name             String                 @db.VarChar(255)
  file_size             BigInt?
  file_url              String?
  storage_path          String?
  record_count          Int?
  filters_applied       Json?
  status                String?                @default("pending") @db.VarChar(50)
  error_message         String?
  started_at            DateTime?              @default(now()) @db.Timestamptz(6)
  completed_at          DateTime?              @db.Timestamptz(6)
  expires_at            DateTime?              @db.Timestamptz(6)
  created_by            String?                @db.Uuid
  created_at            DateTime?              @default(now()) @db.Timestamptz(6)
  export_configurations export_configurations? @relation(fields: [configuration_id], references: [id], onUpdate: NoAction)
  users                 users?                 @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([configuration_id], map: "idx_export_history_configuration_id")
  @@index([created_at(sort: Desc)], map: "idx_export_history_created_at")
  @@index([created_by], map: "idx_export_history_created_by")
  @@index([status], map: "idx_export_history_status")
  @@schema("public")
}

model quickbooks_connections {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id          String    @db.Uuid
  company_id       String
  company_name     String?
  access_token     String
  refresh_token    String
  token_expires_at DateTime? @db.Timestamptz(6)
  realm_id         String
  scope            String?
  is_active        Boolean?  @default(true)
  created_at       DateTime? @default(now()) @db.Timestamptz(6)
  updated_at       DateTime? @default(now()) @updatedAt @db.Timestamptz(6)
  users            users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, company_id])
  @@index([company_id], map: "idx_quickbooks_connections_company_id")
  @@index([user_id], map: "idx_quickbooks_connections_user_id")
  @@schema("public")
}

model admin_settings {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  category   String
  key        String
  value      Json?
  updated_at DateTime? @default(now()) @updatedAt @db.Timestamp(6)

  @@unique([category, key])
  @@schema("public")
}

model shipping_carriers {
  id                    String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                  String      @unique
  code                  String?     @unique
  tracking_url_template String?
  logo_url              String?
  is_active             Boolean?    @default(true)
  created_at            DateTime?   @default(now()) @db.Timestamptz(6)
  shipments             shipments[]

  @@schema("public")
}

model workflow_steps {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  workflow_id      String    @db.Uuid
  step_order       Int
  step_name        String    @db.VarChar(255)
  step_type        String    @db.VarChar(50)
  step_config      Json?     @default("{}")
  is_required      Boolean?  @default(true)
  retry_on_failure Boolean?  @default(false)
  max_retries      Int?      @default(3)
  timeout_seconds  Int?      @default(300)
  created_at       DateTime? @default(now()) @db.Timestamptz(6)
  updated_at       DateTime? @default(now()) @updatedAt @db.Timestamptz(6)
  workflows        workflows @relation(fields: [workflow_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([workflow_id, step_order], map: "unique_workflow_step_order")
  @@schema("public")
}

model documents {
  id                                                      String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                                                    String                  @db.VarChar(255)
  original_name                                           String                  @db.VarChar(255)
  auto_generated_name                                     String?                 @db.VarChar(255)
  type                                                    String?                 @db.VarChar(50)
  category                                                String?                 @db.VarChar(100)
  subcategory                                             String?                 @db.VarChar(100)
  size                                                    BigInt?
  uploaded_by                                             String?                 @db.VarChar(255)
  project_id                                              String?                 @db.Uuid
  project_name                                            String?                 @db.VarChar(255)
  client_id                                               String?                 @db.Uuid
  client_name                                             String?                 @db.VarChar(255)
  order_id                                                String?                 @db.Uuid
  order_number                                            String?                 @db.VarChar(100)
  item_id                                                 String?                 @db.Uuid
  item_name                                               String?                 @db.VarChar(255)
  collection_id                                           String?                 @db.Uuid
  manufacturer_id                                         String?                 @db.Uuid
  manufacturer_project_id                                 String?                 @db.Uuid
  designer_id                                             String?                 @db.Uuid
  design_project_id                                       String?                 @db.Uuid
  customer_id                                             String?                 @db.Uuid
  order_item_id                                           String?                 @db.Uuid
  status                                                  String?                 @default("active") @db.VarChar(50)
  tags                                                    Json?                   @default("[]")
  url                                                     String?
  download_url                                            String?
  version                                                 Int?                    @default(1)
  revision_notes                                          String?
  parent_document_id                                      String?                 @db.Uuid
  is_latest_version                                       Boolean?                @default(true)
  access_permissions                                      Json?                   @default("[\"read\"]")
  file_hash                                               String?                 @db.VarChar(255)
  confidentiality                                         String?                 @default("internal") @db.VarChar(50)

  // Google Drive Integration
  storage_type                                            String?                 @default("supabase") @db.VarChar(50)
  storage_bucket                                          String?                 @db.VarChar(100)
  google_drive_id                                         String?                 @db.VarChar(255)
  google_drive_url                                        String?
  google_drive_folder_id                                  String?                 @db.VarChar(255)

  metadata                                                Json?                   @default("{}")
  created_at                                              DateTime?               @default(now()) @db.Timestamptz(6)
  updated_at                                              DateTime?               @default(now()) @updatedAt @db.Timestamptz(6)
  uploaded_by_user                                        String?                 @db.Uuid
  approved_by                                             String?                 @db.Uuid
  approved_at                                             DateTime?               @db.Timestamptz(6)
  approval_status                                         String?                 @default("pending") @db.VarChar(50)
  document_comments_new                                   document_comments_new[]
  document_revisions                                      document_revisions[]
  user_profiles_documents_approved_byTouser_profiles      user_profiles?          @relation("documents_approved_byTouser_profiles", fields: [approved_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  furniture_collections                                   furniture_collections?  @relation(fields: [collection_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  customers                                               customers?              @relation(fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  design_projects                                         design_projects?        @relation(fields: [design_project_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  designers                                               designers?              @relation(fields: [designer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  manufacturers                                           manufacturers?          @relation(fields: [manufacturer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  manufacturer_projects                                   manufacturer_projects?  @relation(fields: [manufacturer_project_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  order_items                                             order_items?            @relation(fields: [order_item_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_profiles_documents_uploaded_by_userTouser_profiles user_profiles?          @relation("documents_uploaded_by_userTouser_profiles", fields: [uploaded_by_user], references: [id], onDelete: NoAction, onUpdate: NoAction)
  production_orders                                       production_orders[]

  @@index([category], map: "idx_documents_category")
  @@index([client_id], map: "idx_documents_client_id")
  @@index([created_at(sort: Desc)], map: "idx_documents_created_at")
  @@index([customer_id], map: "idx_documents_customer_id")
  @@index([designer_id], map: "idx_documents_designer_id")
  @@index([item_id], map: "idx_documents_item_id")
  @@index([manufacturer_id], map: "idx_documents_manufacturer_id")
  @@index([order_id], map: "idx_documents_order_id")
  @@index([project_id], map: "idx_documents_project_id")
  @@index([status], map: "idx_documents_status")
  @@index([storage_type], map: "idx_documents_storage_type")
  @@schema("public")
}

model sms_tracking {
  id              String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  campaign_id     String?        @db.Uuid
  recipient_phone String
  event_type      String?
  event_timestamp DateTime?      @default(now()) @db.Timestamptz(6)
  error_message   String?
  event_data      Json?          @default("{}")
  created_at      DateTime?      @default(now()) @db.Timestamptz(6)
  sms_campaigns   sms_campaigns? @relation(fields: [campaign_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([campaign_id], map: "idx_sms_tracking_campaign_id")
  @@index([event_type], map: "idx_sms_tracking_event_type")
  @@schema("public")
}

model stone_finishes {
  id                       String                     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  stone_type_id            String?                    @db.Uuid
  name                     String
  description              String?
  price_modifier           Decimal?                   @default(0) @db.Decimal(5, 2)
  active                   Boolean?                   @default(true)
  sort_order               Int?
  created_at               DateTime?                  @default(now()) @db.Timestamp(6)
  updated_at               DateTime?                  @default(now()) @updatedAt @db.Timestamp(6)
  stone_finish_collections stone_finish_collections[]
  stone_types              stone_types?               @relation(fields: [stone_type_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([stone_type_id, name])
  @@schema("public")
}

model manufacturers {
  id                          String                        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                        String
  company_name                String?
  contact_person              String?
  email                       String?
  phone                       String?
  website                     String?
  address                     Json?
  established_year            Int?
  employee_count              String?
  certifications              Json?                         @default("[]")
  status                      String?                       @default("prospect")
  rating                      Decimal?                      @db.Decimal(3, 2)
  notes                       String?
  created_at                  DateTime?                     @default(now()) @db.Timestamp(6)
  updated_at                  DateTime?                     @default(now()) @updatedAt @db.Timestamp(6)
  contact_email               String?
  contact_phone               String?
  performance_rating          Decimal?                      @db.Decimal(3, 2)
  quality_rating              Decimal?                      @db.Decimal(3, 2)
  delivery_rating             Decimal?                      @db.Decimal(3, 2)
  communication_rating        Decimal?                      @db.Decimal(3, 2)
  city                        String?
  state                       String?
  country                     String?                       @default("USA")
  postal_code                 String?
  years_in_business           Int?
  annual_capacity             Int?
  lead_time_weeks             Int?
  minimum_order_quantity      Int?
  payment_terms               String?
  cost_tracking               cost_tracking[]
  documents                   documents[]
  manufacturer_capabilities   manufacturer_capabilities[]
  manufacturer_communications manufacturer_communications[]
  manufacturer_contracts      manufacturer_contracts[]
  manufacturer_performance    manufacturer_performance[]
  manufacturer_pricing        manufacturer_pricing[]
  manufacturer_projects       manufacturer_projects[]
  production_orders           production_orders[]

  @@index([rating(sort: Desc)], map: "idx_manufacturer_rating")
  @@index([status], map: "idx_manufacturer_status")
  @@schema("public")
}

model sso_login_audit {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id       String?   @db.Uuid
  google_email  String?
  login_time    DateTime? @default(now()) @db.Timestamptz(6)
  login_type    String?
  ip_address    String?   @db.Inet
  user_agent    String?
  success       Boolean?
  error_message String?
  session_id    String?
  metadata      Json?
  users         users?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([login_time(sort: Desc)], map: "idx_sso_login_audit_time")
  @@index([user_id], map: "idx_sso_login_audit_user_id")
  @@schema("public")
}

model design_projects {
  id                    String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  project_name          String
  project_code          String?                @unique
  designer_id           String?                @db.Uuid
  collection_id         String?                @db.Uuid
  project_type          String?
  current_stage         String?                @default("brief_creation")
  target_launch_date    DateTime?              @db.Date
  budget                Decimal?               @db.Decimal(10, 2)
  priority              String?                @default("normal")
  created_at            DateTime?              @default(now()) @db.Timestamp(6)
  updated_at            DateTime?              @default(now()) @updatedAt @db.Timestamp(6)
  designer_name         String?                @db.VarChar(255)
  manufacturer_name     String?                @db.VarChar(255)
  next_action           String?
  days_in_stage         Int?                   @default(0)
  design_briefs         design_briefs[]
  design_deliverables   design_deliverables[]
  furniture_collections furniture_collections? @relation(fields: [collection_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  designers             designers?             @relation(fields: [designer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  design_revisions      design_revisions[]
  design_to_prototype   design_to_prototype[]
  designer_performance  designer_performance[]
  documents             documents[]
  mood_boards           mood_boards[]

  @@index([collection_id], map: "idx_design_projects_collection_id")
  @@index([current_stage], map: "idx_design_projects_current_stage")
  @@index([designer_id], map: "idx_design_projects_designer")
  @@schema("public")
}

model carving_options {
  id                   String                 @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  style                String
  code                 String                 @unique
  price_modifier       Decimal?               @default(0) @db.Decimal(10, 2)
  complexity           String?                @default("standard")
  active               Boolean?               @default(true)
  created_at           DateTime?              @default(now()) @db.Timestamptz(6)
  updated_at           DateTime?              @default(now()) @updatedAt @db.Timestamptz(6)
  order_item_materials order_item_materials[]
  product_materials    product_materials[]

  @@index([active], map: "idx_carving_options_active")
  @@index([style], map: "idx_carving_options_style")
  @@schema("public")
}

model tenants {
  id         String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String     @unique
  slug       String?    @unique
  settings   Json?      @default("{}")
  is_active  Boolean?   @default(true)
  created_at DateTime?  @default(now()) @db.Timestamptz(6)
  updated_at DateTime?  @default(now()) @updatedAt @db.Timestamptz(6)
  profiles   profiles[]
  projects   projects[]

  @@schema("public")
}

model magic_link_tokens {
  id         String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email      String    @db.VarChar(255)
  token      String    @unique @db.VarChar(255)
  expires_at DateTime  @db.Timestamptz(6)
  used_at    DateTime? @db.Timestamptz(6)
  ip_address String?   @db.Inet
  user_agent String?
  created_at DateTime? @default(now()) @db.Timestamptz(6)

  @@index([email], map: "idx_magic_link_tokens_email")
  @@index([expires_at], map: "idx_magic_link_tokens_expires_at")
  @@index([token], map: "idx_magic_link_tokens_token")
  @@schema("public")
}

model user_feature_overrides {
  id                                                String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id                                           String    @db.Uuid
  feature_name                                      String    @db.VarChar(100)
  is_enabled                                        Boolean
  override_reason                                   String?
  overridden_by                                     String?   @db.Uuid
  created_at                                        DateTime? @default(now()) @db.Timestamptz(6)
  users_user_feature_overrides_overridden_byTousers users?    @relation("user_feature_overrides_overridden_byTousers", fields: [overridden_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_user_feature_overrides_user_idTousers       users     @relation("user_feature_overrides_user_idTousers", fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, feature_name])
  @@index([overridden_by], map: "idx_user_feature_overrides_overridden_by")
  @@index([user_id], map: "idx_user_feature_overrides_user_id")
  @@schema("public")
}

model seko_config {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  profile_id  String
  api_key     String?
  api_secret  String?
  environment String?   @default("qa")
  base_url    String?   @default("https://qawebapi.myseko.com")
  is_active   Boolean?  @default(true)
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  updated_at  DateTime? @default(now()) @updatedAt @db.Timestamp(6)

  @@schema("public")
}

model inventory {
  id                String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  item_id           String?   @db.Uuid
  location          String?
  quantity          Int?
  reserved_quantity Int?
  reorder_point     Int?
  reorder_quantity  Int?
  last_counted      String?
  created_at        DateTime? @default(now()) @db.Timestamptz(6)
  updated_at        DateTime? @default(now()) @updatedAt @db.Timestamptz(6)

  @@unique([item_id, location])
  @@index([item_id], map: "idx_inventory_item_id")
  @@index([created_at], map: "idx_inventory_created_at")
  @@schema("public")
}

model sms_logs {
  id                  String              @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  recipient_phone     String              @db.VarChar(20)
  message             String
  template_id         String?             @db.Uuid
  status              String?             @db.VarChar(20)
  provider            String?             @db.VarChar(50)
  provider_message_id String?             @db.VarChar(255)
  error_message       String?
  sent_at             DateTime?           @db.Timestamptz(6)
  delivered_at        DateTime?           @db.Timestamptz(6)
  created_at          DateTime?           @default(now()) @db.Timestamptz(6)
  sms_delivery_logs   sms_delivery_logs[]
  sms_templates       sms_templates?      @relation(fields: [template_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([recipient_phone], map: "idx_sms_logs_recipient_phone")
  @@index([template_id], map: "idx_sms_logs_template_id")
  @@schema("public")
}

model sso_group_role_mappings {
  id                 String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  google_group_email String    @unique
  user_type          String
  permissions        Json?
  priority           Int?      @default(0)
  is_active          Boolean?  @default(true)
  created_at         DateTime? @default(now()) @db.Timestamptz(6)

  @@schema("public")
}

model fabric_collections {
  id                            String                          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  brand_id                      String?                         @db.Uuid
  name                          String
  description                   String?
  price_modifier                Decimal?                        @default(0) @db.Decimal(5, 2)
  active                        Boolean?                        @default(true)
  sort_order                    Int?
  created_at                    DateTime?                       @default(now()) @db.Timestamp(6)
  updated_at                    DateTime?                       @default(now()) @updatedAt @db.Timestamp(6)
  fabric_collection_collections fabric_collection_collections[]
  fabric_brands                 fabric_brands?                  @relation(fields: [brand_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  fabric_colors                 fabric_colors[]

  @@unique([brand_id, name])
  @@index([brand_id], map: "idx_fabric_collections_brand_id")
  @@schema("public")
}

model manufacturer_capabilities {
  id                   String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  manufacturer_id      String?        @db.Uuid
  category             String?
  techniques           Json?          @default("[]")
  materials            Json?          @default("[]")
  max_dimensions       Json?
  min_order_quantity   Int?
  max_capacity_monthly Int?
  lead_time_days       Int?
  rush_available       Boolean?       @default(false)
  created_at           DateTime?      @default(now()) @db.Timestamp(6)
  manufacturers        manufacturers? @relation(fields: [manufacturer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([manufacturer_id], map: "idx_manufacturer_capabilities_manufacturer_id")
  @@schema("public")
}

model app_settings {
  id                    String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id               String?   @unique @db.Uuid
  theme                 String?   @default("system")
  notifications_enabled Boolean?  @default(true)
  offline_mode_enabled  Boolean?  @default(true)
  data_saver            Boolean?  @default(false)
  sync_frequency        String?   @default("auto")
  cache_size_mb         Int?      @default(50)
  language              String?   @default("en")
  created_at            DateTime? @default(now()) @db.Timestamptz(6)
  updated_at            DateTime? @default(now()) @updatedAt @db.Timestamptz(6)
  users                 users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("public")
}

model quickbooks_auth {
  id                   String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  company_id           String    @unique @db.VarChar(50)
  access_token         String
  refresh_token        String
  token_expiry         DateTime  @db.Timestamptz(6)
  refresh_token_expiry DateTime  @db.Timestamptz(6)
  company_name         String?   @db.VarChar(255)
  is_active            Boolean?  @default(true)
  connected_by         String?   @db.Uuid
  created_at           DateTime? @default(now()) @db.Timestamptz(6)
  updated_at           DateTime? @default(now()) @updatedAt @db.Timestamptz(6)
  users                users?    @relation(fields: [connected_by], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([is_active], map: "idx_qb_auth_active")
  @@index([company_id], map: "idx_qb_auth_company")
  @@index([connected_by], map: "idx_quickbooks_auth_connected_by")
  @@schema("public")
}

model admin_audit_log {
  id            String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  action        String?
  user_id       String?
  user_email    String?
  resource_type String?
  resource_id   String?
  metadata      Json?
  ip_address    String?
  created_at    DateTime? @default(now()) @db.Timestamptz(6)

  @@index([user_id], map: "idx_admin_audit_log_user_id")
  @@index([created_at], map: "idx_admin_audit_log_created_at")
  @@index([resource_id], map: "idx_admin_audit_log_resource_id")
  @@schema("public")
}

model customer_portal_access {
  id                                             String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  customer_id                                    String?    @db.Uuid
  user_id                                        String?    @db.Uuid
  portal_role                                    String?    @default("viewer") @db.VarChar(50)
  is_active                                      Boolean?   @default(true)
  last_login                                     DateTime?  @db.Timestamptz(6)
  login_count                                    Int?       @default(0)
  invited_by                                     String?    @db.Uuid
  invited_at                                     DateTime?  @db.Timestamptz(6)
  accepted_at                                    DateTime?  @db.Timestamptz(6)
  created_at                                     DateTime?  @default(now()) @db.Timestamptz(6)
  updated_at                                     DateTime?  @default(now()) @updatedAt @db.Timestamptz(6)
  customers                                      customers? @relation(fields: [customer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users_customer_portal_access_invited_byTousers users?     @relation("customer_portal_access_invited_byTousers", fields: [invited_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_customer_portal_access_user_idTousers    users?     @relation("customer_portal_access_user_idTousers", fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([customer_id, user_id])
  @@index([customer_id], map: "idx_customer_portal_access_customer_id")
  @@index([invited_by], map: "idx_customer_portal_access_invited_by")
  @@index([user_id], map: "idx_customer_portal_access_user_id")
  @@schema("public")
}

model user_permissions {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String    @db.Uuid
  module     String    @db.VarChar(50)
  can_view   Boolean?  @default(false)
  can_edit   Boolean?  @default(false)
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @default(now()) @updatedAt @db.Timestamptz(6)
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, module])
  @@index([user_id, module], map: "idx_user_permissions_user_module")
  @@schema("public")
}

model sms_campaigns {
  id                                     String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  campaign_name                          String         @db.VarChar(255)
  campaign_type                          String?        @db.VarChar(50)
  template_id                            String?        @db.Uuid
  target_audience                        Json?          @default("{}")
  scheduled_date                         DateTime?      @db.Timestamptz(6)
  status                                 String?        @default("draft") @db.VarChar(50)
  total_recipients                       Int?           @default(0)
  sent_count                             Int?           @default(0)
  delivered_count                        Int?           @default(0)
  failed_count                           Int?           @default(0)
  opt_out_count                          Int?           @default(0)
  created_by                             String?        @db.Uuid
  approved_by                            String?        @db.Uuid
  approved_at                            DateTime?      @db.Timestamptz(6)
  created_at                             DateTime?      @default(now()) @db.Timestamptz(6)
  completed_at                           DateTime?      @db.Timestamptz(6)
  updated_at                             DateTime?      @default(now()) @updatedAt @db.Timestamptz(6)
  users_sms_campaigns_approved_byTousers users?         @relation("sms_campaigns_approved_byTousers", fields: [approved_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_sms_campaigns_created_byTousers  users?         @relation("sms_campaigns_created_byTousers", fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  sms_templates                          sms_templates? @relation(fields: [template_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  sms_tracking                           sms_tracking[]

  @@index([approved_by], map: "idx_sms_campaigns_approved_by")
  @@index([created_by], map: "idx_sms_campaigns_created_by")
  @@index([template_id], map: "idx_sms_campaigns_template_id")
  @@schema("public")
}

model customer_portals {
  id                                       String                     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  customer_id                              String                     @unique @db.Uuid
  portal_name                              String                     @db.VarChar(255)
  welcome_message                          String?
  primary_color                            String?                    @default("#91bdbd") @db.VarChar(7)
  configuration                            Json                       @default("{}")
  is_active                                Boolean?                   @default(true)
  created_at                               DateTime?                  @default(now()) @db.Timestamptz(6)
  updated_at                               DateTime?                  @default(now()) @updatedAt @db.Timestamptz(6)
  created_by                               String?                    @db.Uuid
  updated_by                               String?                    @db.Uuid
  customer_portal_activity                 customer_portal_activity[]
  customer_portal_users                    customer_portal_users[]
  users_customer_portals_created_byTousers users?                     @relation("customer_portals_created_byTousers", fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  customers                                customers                  @relation(fields: [customer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users_customer_portals_updated_byTousers users?                     @relation("customer_portals_updated_byTousers", fields: [updated_by], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([is_active], map: "idx_customer_portals_active")
  @@index([created_at], map: "idx_customer_portals_created_at")
  @@index([customer_id], map: "idx_customer_portals_customer_id")
  @@schema("public")
}

model production_items {
  id                   String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  order_id             String                 @db.Uuid
  order_item_id        String?                @db.Uuid
  item_name            String                 @db.VarChar(255)
  current_stage_name   String?                @db.VarChar(100)
  current_stage_id     String?                @db.VarChar(10)
  progress             Int?                   @default(0)
  priority             priority_enum          @default(normal)
  assigned_to          String?                @db.VarChar(255)
  started_at           DateTime?              @db.Timestamptz(6)
  estimated_completion DateTime?              @db.Timestamptz(6)
  customer_name        String?                @db.VarChar(255)
  status               production_status_enum @default(planned)
  created_at           DateTime?              @default(now()) @db.Timestamptz(6)
  updated_at           DateTime?              @default(now()) @updatedAt @db.Timestamptz(6)
  orders               orders                 @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  order_items          order_items?           @relation(fields: [order_item_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  qc_inspections       qc_inspections[]

  @@index([order_id], map: "idx_production_items_order_id")
  @@index([order_item_id], map: "idx_production_items_order_item_id")
  @@schema("public")
}

model sms_templates {
  id                 String               @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name               String               @db.VarChar(255)
  template_key       String               @unique @db.VarChar(100)
  message            String
  variables          String[]
  is_active          Boolean?             @default(true)
  created_at         DateTime?            @default(now()) @db.Timestamptz(6)
  updated_at         DateTime?            @default(now()) @updatedAt @db.Timestamptz(6)
  sms_campaigns      sms_campaigns[]
  sms_logs           sms_logs[]
  sms_scheduled_jobs sms_scheduled_jobs[]

  @@schema("public")
}

model wood_finishes {
  id                      String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  wood_type_id            String?                   @db.Uuid
  name                    String
  description             String?
  price_modifier          Decimal?                  @default(0) @db.Decimal(5, 2)
  active                  Boolean?                  @default(true)
  sort_order              Int?
  created_at              DateTime?                 @default(now()) @db.Timestamp(6)
  updated_at              DateTime?                 @default(now()) @updatedAt @db.Timestamp(6)
  wood_finish_collections wood_finish_collections[]
  wood_types              wood_types?               @relation(fields: [wood_type_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([wood_type_id, name])
  @@index([wood_type_id], map: "idx_wood_finishes_wood_type_id")
  @@schema("public")
}

model customer_production_notifications {
  id            String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  customer_id   String?    @db.Uuid
  order_id      String?    @db.Uuid
  type          String?
  channel       String?    @default("portal")
  subject       String?
  message       String
  data          Json?      @default("{}")
  status        String?    @default("pending")
  sent_at       DateTime?  @db.Timestamp(6)
  read_at       DateTime?  @db.Timestamp(6)
  error_message String?
  created_at    DateTime?  @default(now()) @db.Timestamp(6)
  customers     customers? @relation(fields: [customer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  orders        orders?    @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([customer_id], map: "idx_customer_production_notifications_customer_id")
  @@index([order_id], map: "idx_customer_production_notifications_order_id")
  @@schema("public")
}

model activities {
  id           String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  type         String?
  title        String?
  description  String?
  lead_id      String?
  contact_id   String?
  customer_id  String?
  created_by   String?
  scheduled_at String?
  completed_at String?
  status       String?
  metadata     Json?
  created_at   DateTime? @default(now()) @db.Timestamptz(6)
  updated_at   DateTime? @default(now()) @updatedAt @db.Timestamptz(6)

  @@index([contact_id], map: "idx_activities_contact_id")
  @@index([created_by], map: "idx_activities_created_by")
  @@index([lead_id], map: "idx_activities_lead_id")
  @@index([type], map: "idx_activities_type")
  @@index([created_at], map: "idx_activities_created_at")
  @@index([customer_id], map: "idx_activities_customer_id")
  @@index([status], map: "idx_activities_status")
  @@schema("public")
}

model manufacturer_shipments {
  id                      String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  manufacturer_project_id String?                @db.Uuid
  shipment_number         String?                @unique
  shipping_carrier        String?
  tracking_number         String?
  shipping_method         String?
  ship_date               DateTime?              @db.Date
  estimated_delivery_date DateTime?              @db.Date
  actual_delivery_date    DateTime?              @db.Date
  ship_from_address       String?
  ship_to_address         String?
  package_count           Int?                   @default(1)
  total_weight            Decimal?               @db.Decimal(10, 2)
  total_dimensions        String?
  shipping_cost           Decimal?               @db.Decimal(10, 2)
  insurance_value         Decimal?               @db.Decimal(10, 2)
  special_handling        String?
  delivery_instructions   String?
  status                  String?
  recipient_signature     String?
  delivery_photos         Json?                  @default("[]")
  created_at              DateTime?              @default(now()) @db.Timestamp(6)
  updated_at              DateTime?              @default(now()) @updatedAt @db.Timestamp(6)
  manufacturer_projects   manufacturer_projects? @relation(fields: [manufacturer_project_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([manufacturer_project_id], map: "idx_manufacturer_shipments_manufacturer_project_id")
  @@schema("public")
}

model shipping_tracking {
  id                 String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  order_id           String    @db.Uuid
  carrier            String?
  tracking_number    String?
  status             String?   @default("pending")
  current_location   String?
  estimated_delivery DateTime? @db.Date
  actual_delivery    DateTime? @db.Timestamptz(6)
  tracking_events    Json?     @default("[]")
  last_api_update    DateTime? @db.Timestamptz(6)
  created_at         DateTime? @default(now()) @db.Timestamptz(6)
  updated_at         DateTime? @default(now()) @updatedAt @db.Timestamptz(6)

  @@index([order_id], map: "idx_shipping_tracking_order_id")
  @@schema("public")
}

model document_folders {
  id                     String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  folder_name            String             @db.VarChar(255)
  parent_folder_id       String?            @db.Uuid
  google_drive_folder_id String?            @db.VarChar(255)
  customer_id            String?            @db.Uuid
  order_id               String?            @db.Uuid
  project_type           String?            @db.VarChar(50)
  full_path              String?
  created_at             DateTime?          @default(now()) @db.Timestamptz(6)
  updated_at             DateTime?          @default(now()) @updatedAt @db.Timestamptz(6)
  customers              customers?         @relation(fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  orders                 orders?            @relation(fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  document_folders       document_folders?  @relation("document_foldersTodocument_folders", fields: [parent_folder_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  other_document_folders document_folders[] @relation("document_foldersTodocument_folders")

  @@index([customer_id], map: "idx_document_folders_customer_id")
  @@index([order_id], map: "idx_document_folders_order_id")
  @@index([parent_folder_id], map: "idx_document_folders_parent_folder_id")
  @@schema("public")
}

model email_queue {
  id                  String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  recipient_email     String           @db.VarChar(255)
  template_id         String?          @db.Uuid
  subject             String           @db.VarChar(255)
  html_content        String?
  text_content        String?
  status              String?          @default("pending") @db.VarChar(20)
  provider            String?          @db.VarChar(50)
  provider_message_id String?          @db.VarChar(255)
  error_message       String?
  sent_at             DateTime?        @db.Timestamptz(6)
  delivered_at        DateTime?        @db.Timestamptz(6)
  priority            Int?             @default(5)
  metadata            Json?            @default("{}")
  created_at          DateTime?        @default(now()) @db.Timestamptz(6)
  email_templates     email_templates? @relation(fields: [template_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([created_at], map: "idx_email_queue_created_at")
  @@index([recipient_email], map: "idx_email_queue_recipient")
  @@index([status], map: "idx_email_queue_status")
  @@schema("public")
}

model admin_security_events {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  event_type String
  user_id    String?   @db.Uuid
  ip_address String?   @db.Inet
  user_agent String?
  metadata   Json?     @default("{}")
  severity   String?
  created_at DateTime? @default(now()) @db.Timestamp(6)
  users      users?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([user_id], map: "idx_admin_security_events_user_id")
  @@schema("public")
}

model production_tracking {
  id                   String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  order_id             String?   @unique @db.Uuid
  current_stage_id     String?   @db.Uuid
  progress             Int?      @default(0)
  stage_history        Json?     @default("[]")
  started_at           DateTime? @db.Timestamptz(6)
  estimated_completion DateTime? @db.Timestamptz(6)
  completed_at         DateTime? @db.Timestamptz(6)
  internal_notes       String?
  customer_notes       String?
  created_at           DateTime? @default(now()) @db.Timestamptz(6)
  updated_at           DateTime? @default(now()) @updatedAt @db.Timestamptz(6)
  updated_by           String?   @db.Uuid
  users                users?    @relation(fields: [updated_by], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([updated_by], map: "idx_production_tracking_updated_by")
  @@schema("public")
}

model material_price_history {
  id             String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  material_type  String
  option_id      String    @db.Uuid
  price          Decimal   @db.Decimal(10, 2)
  effective_date DateTime  @db.Date
  created_by     String?   @db.Uuid
  notes          String?
  created_at     DateTime? @default(now()) @db.Timestamptz(6)
  users          users?    @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([created_by], map: "idx_material_price_history_created_by")
  @@index([material_type, option_id], map: "idx_material_price_history_type")
  @@schema("public")
}

model production_stages {
  id                    String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                  String
  stage_order           Int       @unique
  description           String?
  typical_duration_days Int?
  color                 String?   @default("#91bdbd")
  icon                  String?
  is_active             Boolean?  @default(true)
  created_at            DateTime? @default(now()) @db.Timestamptz(6)

  @@schema("public")
}

model shipments {
  id                       String                     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  shipment_number          String?                    @db.VarChar(50)
  order_id                 String?                    @db.Uuid
  carrier_id               String?                    @db.Uuid
  carrier                  String?                    @db.VarChar(100)
  service_level            String?                    @db.VarChar(100)
  tracking_number          String?
  status                   String?                    @default("pending")
  ship_from                Json?                      @default("{}")
  ship_to                  Json?                      @default("{}")
  origin_address           Json?                      @default("{}")
  destination_address      Json?                      @default("{}")
  packages                 Json?                      @default("[]")
  shipped_date             DateTime?                  @db.Timestamptz(6)
  estimated_delivery       DateTime?                  @db.Date
  actual_delivery          DateTime?                  @db.Timestamptz(6)
  package_count            Int?                       @default(1)
  weight                   Decimal?                   @db.Decimal(10, 2)
  dimensions               Json?                      @default("{}")
  shipping_cost            Decimal?                   @db.Decimal(10, 2)
  insurance_amount         Decimal?                   @db.Decimal(10, 2)
  label_url                String?
  special_instructions     String?
  tracking_events          Json?                      @default("[]")
  last_tracking_update     DateTime?                  @db.Timestamptz(6)
  created_at               DateTime?                  @default(now()) @db.Timestamptz(6)
  updated_at               DateTime?                  @default(now()) @updatedAt @db.Timestamptz(6)
  created_by               String?                    @db.Uuid
  project_id               String?                    @db.Uuid
  seko_shipment_id         String?                    @db.VarChar(100)
  last_seko_sync           DateTime?                  @db.Timestamptz(6)
  priority                 String?                    @db.VarChar(20)
  packing_job_id           String?                    @db.Uuid
  delivery_addresses       delivery_addresses[]
  shipping_carriers        shipping_carriers?         @relation(fields: [carrier_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  packing_jobs             packing_jobs?              @relation(fields: [packing_job_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users                    users?                     @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  projects                 projects?                  @relation(fields: [project_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  shipping_events          shipping_events[]
  ordered_items_production ordered_items_production[]

  @@index([carrier_id], map: "idx_shipments_carrier_id")
  @@index([order_id], map: "idx_shipments_order_id")
  @@index([packing_job_id], map: "idx_shipments_packing_job_id")
  @@index([created_by], map: "idx_shipments_created_by")
  @@index([project_id], map: "idx_shipments_project_id")
  @@schema("public")
}

model analytics_dashboard_widgets {
  id                       String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  widget_name              String    @db.VarChar(255)
  widget_type              String?   @db.VarChar(50)
  data_source              String?   @db.VarChar(100)
  query_config             Json
  display_config           Json?     @default("{}")
  refresh_interval_seconds Int?      @default(300)
  is_active                Boolean?  @default(true)
  created_by               String?   @db.Uuid
  created_at               DateTime? @default(now()) @db.Timestamptz(6)
  updated_at               DateTime? @default(now()) @updatedAt @db.Timestamptz(6)
  users                    users?    @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([created_by], map: "idx_analytics_dashboard_widgets_created_by")
  @@schema("public")
}

model customer_financials {
  id                     String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  customer_id            String?    @db.Uuid
  quickbooks_customer_id String?
  credit_limit           Decimal?   @db.Decimal(12, 2)
  payment_terms          String?
  currency               String?    @default("USD")
  tax_exempt             Boolean?   @default(false)
  tax_id                 String?
  credit_status          String?    @default("good")
  balance_outstanding    Decimal?   @default(0) @db.Decimal(12, 2)
  ytd_sales              Decimal?   @default(0) @db.Decimal(12, 2)
  lifetime_value         Decimal?   @default(0) @db.Decimal(12, 2)
  average_days_to_pay    Int?
  created_at             DateTime?  @default(now()) @db.Timestamp(6)
  updated_at             DateTime?  @default(now()) @updatedAt @db.Timestamp(6)
  customers              customers? @relation(fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([customer_id], map: "idx_customer_financials_customer_id")
  @@schema("public")
}

model payment_transactions {
  id                     String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type                   String    @default("incoming") @db.VarChar(20)
  amount                 Decimal   @db.Decimal(10, 2)
  currency               String?   @default("USD") @db.VarChar(3)
  status                 String?   @default("pending") @db.VarChar(20)
  method                 String?   @default("ach") @db.VarChar(50)
  reference_number       String?   @unique @db.VarChar(100)
  description            String?
  customer_id            String?   @db.Uuid
  customer_name          String?   @db.VarChar(255)
  invoice_id             String?   @db.Uuid
  invoice_number         String?   @db.VarChar(50)
  quickbooks_id          String?   @db.VarChar(100)
  quickbooks_sync_status String?   @default("pending") @db.VarChar(20)
  processed_date         DateTime? @db.Timestamp(6)
  created_date           DateTime? @default(now()) @db.Timestamp(6)
  batch_id               String?   @db.VarChar(100)
  fee_amount             Decimal?  @db.Decimal(10, 2)
  net_amount             Decimal?  @db.Decimal(10, 2)
  metadata               Json?
  created_at             DateTime? @default(now()) @db.Timestamp(6)
  updated_at             DateTime? @default(now()) @updatedAt @db.Timestamp(6)

  @@schema("public")
}

model sms_delivery_logs {
  id                      String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sms_log_id              String?        @db.Uuid
  provider_id             String?        @db.Uuid
  delivery_status         String?        @db.VarChar(50)
  provider_message_id     String?        @db.VarChar(255)
  provider_status_code    String?        @db.VarChar(50)
  provider_status_message String?
  delivery_timestamp      DateTime?      @db.Timestamptz(6)
  attempt_number          Int?           @default(1)
  cost                    Decimal?       @db.Decimal(10, 4)
  carrier_info            Json?
  created_at              DateTime?      @default(now()) @db.Timestamptz(6)
  sms_providers           sms_providers? @relation(fields: [provider_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  sms_logs                sms_logs?      @relation(fields: [sms_log_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([provider_id], map: "idx_sms_delivery_logs_provider")
  @@index([sms_log_id], map: "idx_sms_delivery_logs_sms_log_id")
  @@index([delivery_status], map: "idx_sms_delivery_logs_status")
  @@schema("public")
}

model notifications {
  id          String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  customer_id String?    @db.Uuid
  user_id     String?
  type        String?
  title       String?
  message     String?
  data        Json?
  read        Boolean?
  read_at     String?
  sent_via    Json?
  priority    String?
  expires_at  String?
  created_at  DateTime?  @default(now()) @db.Timestamptz(6)
  customers   customers? @relation(fields: [customer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([created_at(sort: Desc)], map: "idx_notifications_created")
  @@index([customer_id], map: "idx_notifications_customer")
  @@index([type], map: "idx_notifications_type")
  @@index([user_id], map: "idx_notifications_user")
  @@index([created_at], map: "idx_notifications_created_at")
  @@index([customer_id], map: "idx_notifications_customer_id")
  @@index([user_id], map: "idx_notifications_user_id")
  @@schema("public")
}

model team_members {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  team_id   String?   @db.Uuid
  user_id   String?   @db.Uuid
  role      String?
  joined_at DateTime? @default(now()) @db.Timestamp(6)
  teams     teams?    @relation(fields: [team_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users     users?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([team_id, user_id])
  @@index([user_id], map: "idx_team_members_user_id")
  @@schema("public")
}

model material_categories {
  id         String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name       String      @unique
  icon       String?
  sort_order Int?        @default(0)
  active     Boolean?    @default(true)
  created_at DateTime?   @default(now()) @db.Timestamptz(6)
  updated_at DateTime?   @default(now()) @updatedAt @db.Timestamptz(6)
  materials  materials[]

  @@schema("public")
}

model carving_styles {
  id                        String                      @id(map: "carving_styles_pkey1") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                      String                      @unique
  description               String?
  price_modifier            Decimal?                    @default(0) @db.Decimal(5, 2)
  active                    Boolean?                    @default(true)
  sort_order                Int?
  created_at                DateTime?                   @default(now()) @db.Timestamp(6)
  updated_at                DateTime?                   @default(now()) @updatedAt @db.Timestamp(6)
  complexity_level          Int?                        @default(1)
  carving_style_collections carving_style_collections[]

  @@index([complexity_level], map: "idx_carving_styles_complexity_level")
  @@schema("public")
}

model production_reset_config {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  table_name     String    @unique
  reset_strategy String?   @default("truncate")
  load_order     Int?      @default(100)
  notes          String?
  created_at     DateTime? @default(now()) @db.Timestamptz(6)

  @@schema("public")
}

model design_approvals {
  id                                         String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  order_id                                   String?        @db.Uuid
  customer_id                                String?        @db.Uuid
  design_name                                String
  version                                    String?        @default(dbgenerated("1"))
  status                                     String?        @default("pending")
  submitted_at                               DateTime?      @default(now()) @db.Timestamptz(6)
  submitted_by                               String?        @db.Uuid
  reviewed_at                                DateTime?      @db.Timestamptz(6)
  reviewed_by                                String?        @db.Uuid
  approved_at                                DateTime?      @db.Timestamptz(6)
  approved_by                                String?        @db.Uuid
  notes                                      String?
  feedback                                   String?
  revision_count                             Int?           @default(0)
  metadata                                   Json?          @default("{}")
  created_at                                 DateTime?      @default(now()) @db.Timestamp(6)
  updated_at                                 DateTime?      @default(now()) @updatedAt @db.Timestamp(6)
  created_by                                 String?        @db.Uuid
  updated_by                                 String?        @db.Uuid
  users_design_approvals_approved_byTousers  users?         @relation("design_approvals_approved_byTousers", fields: [approved_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_design_approvals_created_byTousers   users?         @relation("design_approvals_created_byTousers", fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  customers                                  customers?     @relation(fields: [customer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  orders                                     orders?        @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users_design_approvals_reviewed_byTousers  users?         @relation("design_approvals_reviewed_byTousers", fields: [reviewed_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_design_approvals_submitted_byTousers users?         @relation("design_approvals_submitted_byTousers", fields: [submitted_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_design_approvals_updated_byTousers   users?         @relation("design_approvals_updated_byTousers", fields: [updated_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  design_files                               design_files[]

  @@index([approved_by], map: "idx_design_approvals_approved_by")
  @@index([customer_id], map: "idx_design_approvals_customer")
  @@index([order_id], map: "idx_design_approvals_order")
  @@index([reviewed_by], map: "idx_design_approvals_reviewed_by")
  @@index([status], map: "idx_design_approvals_status")
  @@index([submitted_by], map: "idx_design_approvals_submitted_by")
  @@schema("public")
}

model weaving_materials {
  id                           String                         @id(map: "weaving_materials_pkey1") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                         String                         @unique
  description                  String?
  price_modifier               Decimal?                       @default(0) @db.Decimal(5, 2)
  active                       Boolean?                       @default(true)
  sort_order                   Int?
  created_at                   DateTime?                      @default(now()) @db.Timestamp(6)
  updated_at                   DateTime?                      @default(now()) @updatedAt @db.Timestamp(6)
  weaving_material_collections weaving_material_collections[]
  weaving_patterns             weaving_patterns[]

  @@schema("public")
}

model budgets {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name             String
  budget_type      String?
  period_start     DateTime  @db.Date
  period_end       DateTime  @db.Date
  total_budget     Decimal   @db.Decimal(12, 2)
  allocated_amount Decimal?  @default(0) @db.Decimal(12, 2)
  spent_amount     Decimal?  @default(0) @db.Decimal(12, 2)
  remaining_amount Decimal?  @default(dbgenerated("(total_budget - spent_amount)")) @db.Decimal(12, 2)
  status           String?   @default("draft")
  owner_id         String?   @db.Uuid
  notes            String?
  created_at       DateTime? @default(now()) @db.Timestamp(6)
  updated_at       DateTime? @default(now()) @updatedAt @db.Timestamp(6)
  category         String?   @db.VarChar(100)
  department       String?   @db.VarChar(100)
  period_name      String?   @db.VarChar(100)
  users            users?    @relation(fields: [owner_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([owner_id], map: "idx_budgets_owner_id")
  @@schema("public")
}

model items {
  id                          String                  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name                        String                  @db.VarChar
  sku_full                    String?                 @db.VarChar
  description                 String?
  price                       Decimal?                @db.Decimal(10, 2)
  category                    String?                 @db.VarChar
  created_at                  DateTime?               @default(now()) @db.Timestamptz(6)
  updated_at                  DateTime?               @default(now()) @updatedAt @db.Timestamptz(6)
  collection_id               String?                 @db.Uuid
  list_price                  Decimal?                @db.Decimal(10, 2)
  cost                        Decimal?                @db.Decimal(10, 2)
  weight                      Decimal?                @db.Decimal
  dimensions                  String?
  material_id                 String?                 @db.Uuid
  labor_hours                 Decimal?                @db.Decimal
  setup_fee                   Decimal?                @db.Decimal(10, 2)
  minimum_quantity            Int?
  lead_time_days              Int?
  active                      Boolean?                @default(true)
  tags                        String[]
  notes                       String?
  created_by                  String?
  supplier_id                 String?                 @db.Uuid
  supplier_sku                String?
  barcode                     String?
  location                    String?
  reorder_point               Int?
  reorder_quantity            Int?
  stock_quantity              Int?
  reserved_quantity           Int?
  sku                         String?                 @db.VarChar
  item_code                   String?                 @db.VarChar
  variation_type              String?                 @db.VarChar(50)
  furniture_type              String?                 @db.VarChar(50)
  type                        String?                 @db.VarChar(50)
  base_sku                    String?                 @unique @db.VarChar(50)
  product_sku                 String?                 @db.VarChar(100)
  furniture_dimensions        furniture_dimensions[]
  invoice_items               invoice_items[]
  item_images                 item_images[]
  furniture_collections       furniture_collections?  @relation(fields: [collection_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  manufacturer_projects       manufacturer_projects[]
  order_items                 order_items[]
  product_materials           product_materials[]
  production_orders_catalog   production_orders[]     @relation("ProductionOrderCatalog")
  production_orders_prototype production_orders[]     @relation("ProductionOrderPrototype")
  production_orders_concept   production_orders[]     @relation("ProductionOrderConcept")

  @@index([category], map: "idx_items_category")
  @@index([collection_id], map: "idx_items_collection_id")
  @@index([created_at], map: "idx_items_created_at")
  @@schema("public")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model audit_log_entries {
  instance_id String?   @db.Uuid
  id          String    @id @db.Uuid
  payload     Json?     @db.Json
  created_at  DateTime? @db.Timestamptz(6)
  ip_address  String    @default("") @db.VarChar(64)

  @@index([instance_id], map: "audit_logs_instance_id_idx")
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model flow_state {
  id                     String                @id @db.Uuid
  user_id                String?               @db.Uuid
  auth_code              String
  code_challenge_method  code_challenge_method
  code_challenge         String
  provider_type          String
  provider_access_token  String?
  provider_refresh_token String?
  created_at             DateTime?             @db.Timestamptz(6)
  updated_at             DateTime?             @db.Timestamptz(6)
  authentication_method  String
  auth_code_issued_at    DateTime?             @db.Timestamptz(6)
  saml_relay_states      saml_relay_states[]

  @@index([created_at(sort: Desc)])
  @@index([auth_code], map: "idx_auth_code")
  @@index([user_id, authentication_method], map: "idx_user_id_auth_method")
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model identities {
  provider_id     String
  user_id         String    @db.Uuid
  identity_data   Json
  provider        String
  last_sign_in_at DateTime? @db.Timestamptz(6)
  created_at      DateTime? @db.Timestamptz(6)
  updated_at      DateTime? @db.Timestamptz(6)
  email           String?   @default(dbgenerated("lower((identity_data ->> 'email'::text))"))
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  users           users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([provider_id, provider], map: "identities_provider_id_provider_unique")
  @@index([email])
  @@index([user_id])
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model instances {
  id              String    @id @db.Uuid
  uuid            String?   @db.Uuid
  raw_base_config String?
  created_at      DateTime? @db.Timestamptz(6)
  updated_at      DateTime? @db.Timestamptz(6)

  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model mfa_amr_claims {
  session_id            String   @db.Uuid
  created_at            DateTime @db.Timestamptz(6)
  updated_at            DateTime @db.Timestamptz(6)
  authentication_method String
  id                    String   @id(map: "amr_id_pk") @db.Uuid
  sessions              sessions @relation(fields: [session_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([session_id, authentication_method], map: "mfa_amr_claims_session_id_authentication_method_pkey")
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model mfa_challenges {
  id                     String      @id @db.Uuid
  factor_id              String      @db.Uuid
  created_at             DateTime    @db.Timestamptz(6)
  verified_at            DateTime?   @db.Timestamptz(6)
  ip_address             String      @db.Inet
  otp_code               String?
  web_authn_session_data Json?
  mfa_factors            mfa_factors @relation(fields: [factor_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "mfa_challenges_auth_factor_id_fkey")

  @@index([created_at(sort: Desc)], map: "mfa_challenge_created_at_idx")
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model mfa_factors {
  id                   String           @id @db.Uuid
  user_id              String           @db.Uuid
  friendly_name        String?
  factor_type          factor_type
  status               factor_status
  created_at           DateTime         @db.Timestamptz(6)
  updated_at           DateTime         @db.Timestamptz(6)
  secret               String?
  phone                String?
  last_challenged_at   DateTime?        @unique @db.Timestamptz(6)
  web_authn_credential Json?
  web_authn_aaguid     String?          @db.Uuid
  mfa_challenges       mfa_challenges[]
  users                users            @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, phone], map: "unique_phone_factor_per_user")
  @@index([user_id, created_at], map: "factor_id_created_at_idx")
  @@index([user_id])
  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model oauth_clients {
  id                 String                  @id @db.Uuid
  client_id          String                  @unique
  client_secret_hash String
  registration_type  oauth_registration_type
  redirect_uris      String
  grant_types        String
  client_name        String?
  client_uri         String?
  logo_uri           String?
  created_at         DateTime                @default(now()) @db.Timestamptz(6)
  updated_at         DateTime                @default(now()) @db.Timestamptz(6)
  deleted_at         DateTime?               @db.Timestamptz(6)

  @@index([client_id])
  @@index([deleted_at])
  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model one_time_tokens {
  id         String              @id @db.Uuid
  user_id    String              @db.Uuid
  token_type one_time_token_type
  token_hash String
  relates_to String
  created_at DateTime            @default(now()) @db.Timestamp(6)
  updated_at DateTime            @default(now()) @db.Timestamp(6)
  users      users               @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, token_type])
  @@index([relates_to], map: "one_time_tokens_relates_to_hash_idx", type: Hash)
  @@index([token_hash], map: "one_time_tokens_token_hash_hash_idx", type: Hash)
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model refresh_tokens {
  instance_id String?   @db.Uuid
  id          BigInt    @id @default(autoincrement())
  token       String?   @unique(map: "refresh_tokens_token_unique") @db.VarChar(255)
  user_id     String?   @db.VarChar(255)
  revoked     Boolean?
  created_at  DateTime? @db.Timestamptz(6)
  updated_at  DateTime? @db.Timestamptz(6)
  parent      String?   @db.VarChar(255)
  session_id  String?   @db.Uuid
  sessions    sessions? @relation(fields: [session_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([instance_id])
  @@index([instance_id, user_id])
  @@index([parent])
  @@index([session_id, revoked])
  @@index([updated_at(sort: Desc)])
  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model saml_providers {
  id                String        @id @db.Uuid
  sso_provider_id   String        @db.Uuid
  entity_id         String        @unique
  metadata_xml      String
  metadata_url      String?
  attribute_mapping Json?
  created_at        DateTime?     @db.Timestamptz(6)
  updated_at        DateTime?     @db.Timestamptz(6)
  name_id_format    String?
  sso_providers     sso_providers @relation(fields: [sso_provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([sso_provider_id])
  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model saml_relay_states {
  id              String        @id @db.Uuid
  sso_provider_id String        @db.Uuid
  request_id      String
  for_email       String?
  redirect_to     String?
  created_at      DateTime?     @db.Timestamptz(6)
  updated_at      DateTime?     @db.Timestamptz(6)
  flow_state_id   String?       @db.Uuid
  flow_state      flow_state?   @relation(fields: [flow_state_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  sso_providers   sso_providers @relation(fields: [sso_provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([created_at(sort: Desc)])
  @@index([for_email])
  @@index([sso_provider_id])
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model schema_migrations {
  version String @id @db.VarChar(255)

  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model sessions {
  id             String           @id @db.Uuid
  user_id        String           @db.Uuid
  created_at     DateTime?        @db.Timestamptz(6)
  updated_at     DateTime?        @db.Timestamptz(6)
  factor_id      String?          @db.Uuid
  aal            aal_level?
  not_after      DateTime?        @db.Timestamptz(6)
  refreshed_at   DateTime?        @db.Timestamp(6)
  user_agent     String?
  ip             String?          @db.Inet
  tag            String?
  mfa_amr_claims mfa_amr_claims[]
  refresh_tokens refresh_tokens[]
  users          users            @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([not_after(sort: Desc)])
  @@index([user_id])
  @@index([user_id, created_at], map: "user_id_created_at_idx")
  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model sso_domains {
  id              String        @id @db.Uuid
  sso_provider_id String        @db.Uuid
  domain          String
  created_at      DateTime?     @db.Timestamptz(6)
  updated_at      DateTime?     @db.Timestamptz(6)
  sso_providers   sso_providers @relation(fields: [sso_provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([sso_provider_id])
  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model sso_providers {
  id                String              @id @db.Uuid
  resource_id       String?
  created_at        DateTime?           @db.Timestamptz(6)
  updated_at        DateTime?           @db.Timestamptz(6)
  disabled          Boolean?
  saml_providers    saml_providers[]
  saml_relay_states saml_relay_states[]
  sso_domains       sso_domains[]

  @@index([resource_id], map: "sso_providers_resource_id_pattern_idx")
  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model users {
  instance_id                                                           String?                             @db.Uuid
  id                                                                    String                              @id @db.Uuid
  aud                                                                   String?                             @db.VarChar(255)
  role                                                                  String?                             @db.VarChar(255)
  email                                                                 String?                             @db.VarChar(255)
  encrypted_password                                                    String?                             @db.VarChar(255)
  email_confirmed_at                                                    DateTime?                           @db.Timestamptz(6)
  invited_at                                                            DateTime?                           @db.Timestamptz(6)
  confirmation_token                                                    String?                             @db.VarChar(255)
  confirmation_sent_at                                                  DateTime?                           @db.Timestamptz(6)
  recovery_token                                                        String?                             @db.VarChar(255)
  recovery_sent_at                                                      DateTime?                           @db.Timestamptz(6)
  email_change_token_new                                                String?                             @db.VarChar(255)
  email_change                                                          String?                             @db.VarChar(255)
  email_change_sent_at                                                  DateTime?                           @db.Timestamptz(6)
  last_sign_in_at                                                       DateTime?                           @db.Timestamptz(6)
  raw_app_meta_data                                                     Json?
  raw_user_meta_data                                                    Json?
  is_super_admin                                                        Boolean?
  created_at                                                            DateTime?                           @db.Timestamptz(6)
  updated_at                                                            DateTime?                           @db.Timestamptz(6)
  phone                                                                 String?                             @unique
  phone_confirmed_at                                                    DateTime?                           @db.Timestamptz(6)
  phone_change                                                          String?                             @default("")
  phone_change_token                                                    String?                             @default("") @db.VarChar(255)
  phone_change_sent_at                                                  DateTime?                           @db.Timestamptz(6)
  confirmed_at                                                          DateTime?                           @default(dbgenerated("LEAST(email_confirmed_at, phone_confirmed_at)")) @db.Timestamptz(6)
  email_change_token_current                                            String?                             @default("") @db.VarChar(255)
  email_change_confirm_status                                           Int?                                @default(0) @db.SmallInt
  banned_until                                                          DateTime?                           @db.Timestamptz(6)
  reauthentication_token                                                String?                             @default("") @db.VarChar(255)
  reauthentication_sent_at                                              DateTime?                           @db.Timestamptz(6)
  is_sso_user                                                           Boolean                             @default(false)
  deleted_at                                                            DateTime?                           @db.Timestamptz(6)
  is_anonymous                                                          Boolean                             @default(false)
  identities                                                            identities[]
  mfa_factors                                                           mfa_factors[]
  one_time_tokens                                                       one_time_tokens[]
  sessions                                                              sessions[]
  admin_security_events                                                 admin_security_events[]
  admin_sessions                                                        admin_sessions[]
  analytics_dashboard_widgets                                           analytics_dashboard_widgets[]
  app_settings                                                          app_settings?
  automation_rules                                                      automation_rules[]
  budgets                                                               budgets[]
  carving_style_collections                                             carving_style_collections[]
  client_files                                                          client_files[]
  collection_activities_collection_activities_created_byTousers         collection_activities[]             @relation("collection_activities_created_byTousers")
  collection_activities_collection_activities_updated_byTousers         collection_activities[]             @relation("collection_activities_updated_byTousers")
  customer_portal_access_customer_portal_access_invited_byTousers       customer_portal_access[]            @relation("customer_portal_access_invited_byTousers")
  customer_portal_access_customer_portal_access_user_idTousers          customer_portal_access[]            @relation("customer_portal_access_user_idTousers")
  customer_portal_users                                                 customer_portal_users[]
  customer_portals_customer_portals_created_byTousers                   customer_portals[]                  @relation("customer_portals_created_byTousers")
  customer_portals_customer_portals_updated_byTousers                   customer_portals[]                  @relation("customer_portals_updated_byTousers")
  customers_customers_created_byTousers                                 customers[]                         @relation("customers_created_byTousers")
  customers_customers_portal_access_granted_byTousers                   customers[]                         @relation("customers_portal_access_granted_byTousers")
  customers_customers_portal_created_byTousers                          customers[]                         @relation("customers_portal_created_byTousers")
  customers_customers_user_idTousers                                    customers[]                         @relation("customers_user_idTousers")
  deals_deals_assigned_toTousers                                        deals[]                             @relation("deals_assigned_toTousers")
  deals_deals_created_byTousers                                         deals[]                             @relation("deals_created_byTousers")
  design_approvals_design_approvals_approved_byTousers                  design_approvals[]                  @relation("design_approvals_approved_byTousers")
  design_approvals_design_approvals_created_byTousers                   design_approvals[]                  @relation("design_approvals_created_byTousers")
  design_approvals_design_approvals_reviewed_byTousers                  design_approvals[]                  @relation("design_approvals_reviewed_byTousers")
  design_approvals_design_approvals_submitted_byTousers                 design_approvals[]                  @relation("design_approvals_submitted_byTousers")
  design_approvals_design_approvals_updated_byTousers                   design_approvals[]                  @relation("design_approvals_updated_byTousers")
  design_briefs_design_briefs_approved_byTousers                        design_briefs[]                     @relation("design_briefs_approved_byTousers")
  design_briefs_design_briefs_created_byTousers                         design_briefs[]                     @relation("design_briefs_created_byTousers")
  design_deliverables                                                   design_deliverables[]
  design_files                                                          design_files[]
  design_revisions_design_revisions_approved_byTousers                  design_revisions[]                  @relation("design_revisions_approved_byTousers")
  design_revisions_design_revisions_requested_byTousers                 design_revisions[]                  @relation("design_revisions_requested_byTousers")
  email_campaigns                                                       email_campaigns[]
  export_configurations                                                 export_configurations[]
  export_history                                                        export_history[]
  fabric_brand_collections                                              fabric_brand_collections[]
  fabric_collection_collections                                         fabric_collection_collections[]
  fabric_color_collections                                              fabric_color_collections[]
  financial_periods                                                     financial_periods[]
  manufacturer_communications                                           manufacturer_communications[]
  material_collection_audit                                             material_collection_audit[]
  material_price_history                                                material_price_history[]
  metal_color_collections                                               metal_color_collections[]
  metal_finish_collections                                              metal_finish_collections[]
  metal_type_collections                                                metal_type_collections[]
  notification_queue                                                    notification_queue[]
  offline_sync_queue                                                    offline_sync_queue[]
  order_materials                                                       order_materials[]
  orders_old                                                            orders_old[]
  pandadoc_documents                                                    pandadoc_documents[]
  password_reset_tokens                                                 password_reset_tokens[]
  portal_activity_log                                                   portal_activity_log[]
  portal_configurations_portal_configurations_created_byTousers         portal_configurations[]             @relation("portal_configurations_created_byTousers")
  portal_configurations_portal_configurations_updated_byTousers         portal_configurations[]             @relation("portal_configurations_updated_byTousers")
  portal_documents                                                      portal_documents[]
  portal_invitations                                                    portal_invitations[]
  portal_users_portal_users_auth_user_idTousers                         portal_users?                       @relation("portal_users_auth_user_idTousers")
  portal_users_portal_users_created_byTousers                           portal_users[]                      @relation("portal_users_created_byTousers")
  portal_users_portal_users_updated_byTousers                           portal_users[]                      @relation("portal_users_updated_byTousers")
  production_events                                                     production_events[]
  production_milestones                                                 production_milestones[]
  production_progress                                                   production_progress[]
  production_stage_history_production_stage_history_approved_byTousers  production_stage_history[]          @relation("production_stage_history_approved_byTousers")
  production_stage_history_production_stage_history_completed_byTousers production_stage_history[]          @relation("production_stage_history_completed_byTousers")
  production_tracking                                                   production_tracking[]
  profiles                                                              profiles?
  push_subscriptions                                                    push_subscriptions[]
  pwa_devices                                                           pwa_devices[]
  pwa_subscriptions                                                     pwa_subscriptions[]
  quickbooks_auth                                                       quickbooks_auth[]
  quickbooks_connections                                                quickbooks_connections[]
  quickbooks_oauth_states                                               quickbooks_oauth_states[]
  quickbooks_payment_reconciliation                                     quickbooks_payment_reconciliation[]
  quickbooks_sync_log                                                   quickbooks_sync_log[]
  saved_searches                                                        saved_searches[]
  shop_drawings_created                                                 shop_drawings[]                     @relation("DrawingCreator")
  shop_drawings_limn_approved                                           shop_drawings[]                     @relation("LimnDrawingApprover")
  shop_drawings_designer_approved                                       shop_drawings[]                     @relation("DesignerDrawingApprover")
  shop_drawing_versions_uploaded                                        shop_drawing_versions[]             @relation("VersionUploader")
  shop_drawing_comments_authored                                        shop_drawing_comments[]             @relation("DrawingCommentAuthor")
  shop_drawing_comments_resolved                                        shop_drawing_comments[]             @relation("DrawingCommentResolver")
  shop_drawing_approvals_given                                          shop_drawing_approvals[]            @relation("DrawingApprover")
  sms_campaigns_sms_campaigns_approved_byTousers                        sms_campaigns[]                     @relation("sms_campaigns_approved_byTousers")
  sms_campaigns_sms_campaigns_created_byTousers                         sms_campaigns[]                     @relation("sms_campaigns_created_byTousers")
  sms_scheduled_jobs                                                    sms_scheduled_jobs[]
  sso_login_audit                                                       sso_login_audit[]
  sso_user_mappings                                                     sso_user_mappings[]
  stone_finish_collections                                              stone_finish_collections[]
  stone_type_collections                                                stone_type_collections[]
  system_logs                                                           system_logs[]
  task_activity                                                         task_activity[]
  task_comments                                                         task_comments[]
  team_members                                                          team_members[]
  teams                                                                 teams[]
  user_dashboards                                                       user_dashboards[]
  user_feature_overrides_user_feature_overrides_overridden_byTousers    user_feature_overrides[]            @relation("user_feature_overrides_overridden_byTousers")
  user_feature_overrides_user_feature_overrides_user_idTousers          user_feature_overrides[]            @relation("user_feature_overrides_user_idTousers")
  user_permissions                                                      user_permissions[]
  user_preferences                                                      user_preferences?
  user_profiles_user_profiles_idTousers                                 user_profiles?                      @relation("user_profiles_idTousers")
  user_profiles_user_profiles_user_idTousers                            user_profiles?                      @relation("user_profiles_user_idTousers")
  user_roles                                                            user_roles?
  verification_logs                                                     verification_logs[]
  weaving_color_collections                                             weaving_color_collections[]
  weaving_material_collections                                          weaving_material_collections[]
  weaving_pattern_collections                                           weaving_pattern_collections[]
  wood_finish_collections                                               wood_finish_collections[]
  wood_type_collections                                                 wood_type_collections[]
  production_orders                                                     production_orders[]
  production_payments                                                   production_payments[]
  ordered_items_production                                              ordered_items_production[]
  shipping_quotes                                                       shipping_quotes[]
  shipments                                                             shipments[]
  partners_portal_user                                                  partners?                           @relation("PartnerPortalUser")
  partner_documents                                                     partner_documents[]
  customer_notifications                                                customer_notifications[]
  oauth_tokens                                                          oauth_tokens[]
  mood_boards                                                           mood_boards[]

  @@index([instance_id])
  @@index([is_anonymous])
  @@schema("auth")
}

model pending_user_requests {
  id         String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email      String    @db.VarChar
  first_name String?   @db.VarChar
  last_name  String?   @db.VarChar
  company    String?   @db.VarChar
  message    String?
  status     String?   @default("pending") @db.VarChar
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @default(now()) @db.Timestamptz(6)

  @@index([created_at], map: "idx_pending_user_requests_created_at")
  @@schema("public")
}

model carving_style_collections {
  id               String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  carving_style_id String                @db.Uuid
  collection_id    String                @db.Uuid
  created_by       String?               @db.Uuid
  created_at       DateTime?             @default(now()) @db.Timestamp(6)
  carving_styles   carving_styles        @relation(fields: [carving_style_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  collections      furniture_collections @relation(fields: [collection_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users            users?                @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([carving_style_id, collection_id])
  @@index([collection_id], map: "idx_carving_style_collections_collection")
  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model clients {
  id                       String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name                     String    @db.VarChar
  email                    String?   @db.VarChar
  phone                    String?   @db.VarChar
  address                  String?
  city                     String?   @db.VarChar
  state                    String?   @db.VarChar
  zip                      String?   @db.VarChar
  country                  String?   @default("USA") @db.VarChar
  notes                    String?
  created_at               DateTime? @default(now()) @db.Timestamptz(6)
  updated_at               DateTime? @default(now()) @db.Timestamptz(6)
  status                   String?
  portal_created_at        DateTime? @default(now()) @db.Timestamptz(6)
  user_id                  String?
  company_name             String?
  type                     String?
  billing_address_line1    String?
  billing_address_line2    String?
  billing_city             String?
  billing_state            String?
  billing_zip              String?
  billing_country          String?
  shipping_same_as_billing Boolean?
  credit_limit             Int?
  tags                     String[]
  portal_access            Boolean?
  portal_password          String?
  last_portal_login        String?
  portal_access_granted_at String?
  portal_access_granted_by String?
  portal_created_by        String?
  last_password_reset      String?
  created_by               String?

  @@index([created_at], map: "idx_clients_created_at")
  @@index([email], map: "idx_clients_email")
  @@index([portal_created_at], map: "idx_clients_portal_created_at")
  @@index([status], map: "idx_clients_status")
  @@index([user_id], map: "idx_clients_user_id")
  @@schema("public")
}

model fabric_brand_collections {
  id              String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  fabric_brand_id String                @db.Uuid
  collection_id   String                @db.Uuid
  created_by      String?               @db.Uuid
  created_at      DateTime?             @default(now()) @db.Timestamp(6)
  collections     furniture_collections @relation(fields: [collection_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users           users?                @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  fabric_brands   fabric_brands         @relation(fields: [fabric_brand_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([fabric_brand_id, collection_id])
  @@index([collection_id], map: "idx_fabric_brand_collections_collection")
  @@schema("public")
}

model fabric_collection_collections {
  id                   String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  fabric_collection_id String                @db.Uuid
  collection_id        String                @db.Uuid
  created_by           String?               @db.Uuid
  created_at           DateTime?             @default(now()) @db.Timestamp(6)
  collections          furniture_collections @relation(fields: [collection_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users                users?                @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  fabric_collections   fabric_collections    @relation(fields: [fabric_collection_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([fabric_collection_id, collection_id])
  @@index([collection_id], map: "idx_fabric_collection_collections_collection")
  @@schema("public")
}

model fabric_color_collections {
  id              String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  fabric_color_id String                @db.Uuid
  collection_id   String                @db.Uuid
  created_by      String?               @db.Uuid
  created_at      DateTime?             @default(now()) @db.Timestamp(6)
  collections     furniture_collections @relation(fields: [collection_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users           users?                @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  fabric_colors   fabric_colors         @relation(fields: [fabric_color_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([fabric_color_id, collection_id])
  @@index([collection_id], map: "idx_fabric_color_collections_collection")
  @@schema("public")
}

model furniture_dimensions {
  id                                    String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  item_id                               String    @db.Uuid
  furniture_type                        String    @db.VarChar(50)
  height_inches                         Decimal?  @db.Decimal(10, 2)
  height_cm                             Decimal?  @db.Decimal(10, 2)
  width_inches                          Decimal?  @db.Decimal(10, 2)
  width_cm                              Decimal?  @db.Decimal(10, 2)
  depth_inches                          Decimal?  @db.Decimal(10, 2)
  depth_cm                              Decimal?  @db.Decimal(10, 2)
  weight_capacity                       Int?
  clearance_required_inches             Decimal?  @db.Decimal(10, 2)
  clearance_required_cm                 Decimal?  @db.Decimal(10, 2)
  doorway_clearance_inches              Decimal?  @db.Decimal(10, 2)
  doorway_clearance_cm                  Decimal?  @db.Decimal(10, 2)
  material_thickness_inches             Decimal?  @db.Decimal(10, 2)
  material_thickness_cm                 Decimal?  @db.Decimal(10, 2)
  length_inches                         Decimal?  @db.Decimal(10, 2)
  length_cm                             Decimal?  @db.Decimal(10, 2)
  apron_height_inches                   Decimal?  @db.Decimal(10, 2)
  apron_height_cm                       Decimal?  @db.Decimal(10, 2)
  leg_clearance_inches                  Decimal?  @db.Decimal(10, 2)
  leg_clearance_cm                      Decimal?  @db.Decimal(10, 2)
  overhang_inches                       Decimal?  @db.Decimal(10, 2)
  overhang_cm                           Decimal?  @db.Decimal(10, 2)
  leaf_width_inches                     Decimal?  @db.Decimal(10, 2)
  leaf_width_cm                         Decimal?  @db.Decimal(10, 2)
  leaf_length_inches                    Decimal?  @db.Decimal(10, 2)
  leaf_length_cm                        Decimal?  @db.Decimal(10, 2)
  seat_height_inches                    Decimal?  @db.Decimal(10, 2)
  seat_height_cm                        Decimal?  @db.Decimal(10, 2)
  seat_width_inches                     Decimal?  @db.Decimal(10, 2)
  seat_width_cm                         Decimal?  @db.Decimal(10, 2)
  seat_depth_inches                     Decimal?  @db.Decimal(10, 2)
  seat_depth_cm                         Decimal?  @db.Decimal(10, 2)
  arm_height_inches                     Decimal?  @db.Decimal(10, 2)
  arm_height_cm                         Decimal?  @db.Decimal(10, 2)
  backrest_height_inches                Decimal?  @db.Decimal(10, 2)
  backrest_height_cm                    Decimal?  @db.Decimal(10, 2)
  width_across_arms_inches              Decimal?  @db.Decimal(10, 2)
  width_across_arms_cm                  Decimal?  @db.Decimal(10, 2)
  created_at                            DateTime? @default(now()) @db.Timestamptz(6)
  updated_at                            DateTime? @default(now()) @db.Timestamptz(6)
  overall_assembled_width_inches        Decimal?  @db.Decimal(10, 2)
  overall_assembled_width_cm            Decimal?  @db.Decimal(10, 2)
  overall_assembled_depth_inches        Decimal?  @db.Decimal(10, 2)
  overall_assembled_depth_cm            Decimal?  @db.Decimal(10, 2)
  corner_width_inches                   Decimal?  @db.Decimal(10, 2)
  corner_width_cm                       Decimal?  @db.Decimal(10, 2)
  corner_depth_inches                   Decimal?  @db.Decimal(10, 2)
  corner_depth_cm                       Decimal?  @db.Decimal(10, 2)
  chaise_length_inches                  Decimal?  @db.Decimal(10, 2)
  chaise_length_cm                      Decimal?  @db.Decimal(10, 2)
  min_configuration_width_inches        Decimal?  @db.Decimal(10, 2)
  min_configuration_width_cm            Decimal?  @db.Decimal(10, 2)
  max_configuration_width_inches        Decimal?  @db.Decimal(10, 2)
  max_configuration_width_cm            Decimal?  @db.Decimal(10, 2)
  reclined_depth_inches                 Decimal?  @db.Decimal(10, 2)
  reclined_depth_cm                     Decimal?  @db.Decimal(10, 2)
  footrest_length_inches                Decimal?  @db.Decimal(10, 2)
  footrest_length_cm                    Decimal?  @db.Decimal(10, 2)
  zero_wall_clearance_inches            Decimal?  @db.Decimal(10, 2)
  zero_wall_clearance_cm                Decimal?  @db.Decimal(10, 2)
  swivel_range                          Int?
  rock_glide_depth_inches               Decimal?  @db.Decimal(10, 2)
  rock_glide_depth_cm                   Decimal?  @db.Decimal(10, 2)
  ottoman_height_inches                 Decimal?  @db.Decimal(10, 2)
  ottoman_height_cm                     Decimal?  @db.Decimal(10, 2)
  ottoman_length_inches                 Decimal?  @db.Decimal(10, 2)
  ottoman_length_cm                     Decimal?  @db.Decimal(10, 2)
  ottoman_width_inches                  Decimal?  @db.Decimal(10, 2)
  ottoman_width_cm                      Decimal?  @db.Decimal(10, 2)
  interior_width_inches                 Decimal?  @db.Decimal(10, 2)
  interior_width_cm                     Decimal?  @db.Decimal(10, 2)
  interior_depth_inches                 Decimal?  @db.Decimal(10, 2)
  interior_depth_cm                     Decimal?  @db.Decimal(10, 2)
  interior_height_inches                Decimal?  @db.Decimal(10, 2)
  interior_height_cm                    Decimal?  @db.Decimal(10, 2)
  backrest_angle                        Int?
  chaise_orientation                    String?   @db.VarChar(10)
  adjustable_positions                  Int?
  cushion_thickness_compressed_inches   Decimal?  @db.Decimal(10, 2)
  cushion_thickness_compressed_cm       Decimal?  @db.Decimal(10, 2)
  cushion_thickness_uncompressed_inches Decimal?  @db.Decimal(10, 2)
  cushion_thickness_uncompressed_cm     Decimal?  @db.Decimal(10, 2)
  stacking_height_inches                Decimal?  @db.Decimal(10, 2)
  stacking_height_cm                    Decimal?  @db.Decimal(10, 2)
  folded_width_inches                   Decimal?  @db.Decimal(10, 2)
  folded_width_cm                       Decimal?  @db.Decimal(10, 2)
  folded_depth_inches                   Decimal?  @db.Decimal(10, 2)
  folded_depth_cm                       Decimal?  @db.Decimal(10, 2)
  folded_height_inches                  Decimal?  @db.Decimal(10, 2)
  folded_height_cm                      Decimal?  @db.Decimal(10, 2)
  diagonal_depth_inches                 Decimal?  @db.Decimal(10, 2)
  diagonal_depth_cm                     Decimal?  @db.Decimal(10, 2)
  leg_height_inches                     Decimal?  @db.Decimal(10, 2)
  leg_height_cm                         Decimal?  @db.Decimal(10, 2)
  clearance_height_inches               Decimal?  @db.Decimal(10, 2)
  clearance_height_cm                   Decimal?  @db.Decimal(10, 2)
  table_top_thickness_inches            Decimal?  @db.Decimal(10, 2)
  table_top_thickness_cm                Decimal?  @db.Decimal(10, 2)
  leg_section_length_inches             Decimal?  @db.Decimal(10, 2)
  leg_section_length_cm                 Decimal?  @db.Decimal(10, 2)
  back_height_inches                    Decimal?  @db.Decimal(10, 2)
  back_height_cm                        Decimal?  @db.Decimal(10, 2)
  weight_lbs_new                        Decimal?  @db.Decimal(10, 2)
  weight_kg                             Decimal?  @db.Decimal(10, 2)
  clearance_required_new_inches         Decimal?  @db.Decimal(10, 2)
  clearance_required_new_cm             Decimal?  @db.Decimal(10, 2)
  doorway_clearance_new_inches          Decimal?  @db.Decimal(10, 2)
  doorway_clearance_new_cm              Decimal?  @db.Decimal(10, 2)
  diagonal_depth_new_inches             Decimal?  @db.Decimal(10, 2)
  diagonal_depth_new_cm                 Decimal?  @db.Decimal(10, 2)
  stacking_height_new_inches            Decimal?  @db.Decimal(10, 2)
  stacking_height_new_cm                Decimal?  @db.Decimal(10, 2)
  folded_width_new_inches               Decimal?  @db.Decimal(10, 2)
  folded_width_new_cm                   Decimal?  @db.Decimal(10, 2)
  folded_depth_new_inches               Decimal?  @db.Decimal(10, 2)
  folded_depth_new_cm                   Decimal?  @db.Decimal(10, 2)
  folded_height_new_inches              Decimal?  @db.Decimal(10, 2)
  folded_height_new_cm                  Decimal?  @db.Decimal(10, 2)
  material_thickness_new_inches         Decimal?  @db.Decimal(10, 2)
  material_thickness_new_cm             Decimal?  @db.Decimal(10, 2)
  items                                 items     @relation(fields: [item_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([item_id], map: "idx_furniture_dimensions_item_id")
  @@schema("public")
}

model item_images {
  id          String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  item_id     String    @db.Uuid
  image_type  String    @db.VarChar(50)
  file_url    String
  file_name   String?   @db.VarChar(255)
  file_size   Int?
  mime_type   String?   @db.VarChar(100)
  alt_text    String?
  description String?
  sort_order  Int?      @default(0)
  is_primary  Boolean?  @default(false)
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  updated_at  DateTime? @default(now()) @db.Timestamptz(6)
  items       items     @relation(fields: [item_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([item_id], map: "idx_item_images_item_id")
  @@index([image_type], map: "idx_item_images_type")
  @@schema("public")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model material_collection_audit {
  id            String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  material_type String
  material_id   String                @db.Uuid
  collection_id String                @db.Uuid
  action        String
  user_id       String?               @db.Uuid
  created_at    DateTime?             @default(now()) @db.Timestamp(6)
  notes         String?
  collections   furniture_collections @relation(fields: [collection_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users         users?                @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([collection_id], map: "idx_material_collection_audit_collection")
  @@index([created_at], map: "idx_material_collection_audit_created_at")
  @@index([material_type, material_id], map: "idx_material_collection_audit_material")
  @@index([user_id], map: "idx_material_collection_audit_user")
  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model material_collections {
  id            String                @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  material_id   String                @db.Uuid
  collection_id String                @db.Uuid
  created_at    DateTime?             @default(now()) @db.Timestamptz(6)
  created_by    String?
  collections   furniture_collections @relation(fields: [collection_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  materials     materials             @relation(fields: [material_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([material_id, collection_id])
  @@index([collection_id], map: "idx_material_collections_collection_id")
  @@index([created_at], map: "idx_material_collections_created_at")
  @@index([material_id], map: "idx_material_collections_material_id")
  @@schema("public")
}

model metal_color_collections {
  id             String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  metal_color_id String                @db.Uuid
  collection_id  String                @db.Uuid
  created_by     String?               @db.Uuid
  created_at     DateTime?             @default(now()) @db.Timestamp(6)
  collections    furniture_collections @relation(fields: [collection_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users          users?                @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  metal_colors   metal_colors          @relation(fields: [metal_color_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([metal_color_id, collection_id])
  @@index([collection_id], map: "idx_metal_color_collections_collection")
  @@schema("public")
}

model metal_finish_collections {
  id              String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  metal_finish_id String                @db.Uuid
  collection_id   String                @db.Uuid
  created_by      String?               @db.Uuid
  created_at      DateTime?             @default(now()) @db.Timestamp(6)
  collections     furniture_collections @relation(fields: [collection_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users           users?                @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  metal_finishes  metal_finishes        @relation(fields: [metal_finish_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([metal_finish_id, collection_id])
  @@index([collection_id], map: "idx_metal_finish_collections_collection")
  @@schema("public")
}

model metal_type_collections {
  id            String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  metal_type_id String                @db.Uuid
  collection_id String                @db.Uuid
  created_by    String?               @db.Uuid
  created_at    DateTime?             @default(now()) @db.Timestamp(6)
  collections   furniture_collections @relation(fields: [collection_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users         users?                @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  metal_types   metal_types           @relation(fields: [metal_type_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([metal_type_id, collection_id])
  @@index([collection_id], map: "idx_metal_type_collections_collection")
  @@schema("public")
}

model stone_finish_collections {
  id              String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  stone_finish_id String                @db.Uuid
  collection_id   String                @db.Uuid
  created_by      String?               @db.Uuid
  created_at      DateTime?             @default(now()) @db.Timestamp(6)
  collections     furniture_collections @relation(fields: [collection_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users           users?                @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  stone_finishes  stone_finishes        @relation(fields: [stone_finish_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([stone_finish_id, collection_id])
  @@index([collection_id], map: "idx_stone_finish_collections_collection")
  @@schema("public")
}

model stone_type_collections {
  id            String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  stone_type_id String                @db.Uuid
  collection_id String                @db.Uuid
  created_by    String?               @db.Uuid
  created_at    DateTime?             @default(now()) @db.Timestamp(6)
  collections   furniture_collections @relation(fields: [collection_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users         users?                @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  stone_types   stone_types           @relation(fields: [stone_type_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([stone_type_id, collection_id])
  @@index([collection_id], map: "idx_stone_type_collections_collection")
  @@schema("public")
}

model weaving_color_collections {
  id               String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  weaving_color_id String                @db.Uuid
  collection_id    String                @db.Uuid
  created_by       String?               @db.Uuid
  created_at       DateTime?             @default(now()) @db.Timestamp(6)
  collections      furniture_collections @relation(fields: [collection_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users            users?                @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  weaving_colors   weaving_colors        @relation(fields: [weaving_color_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([weaving_color_id, collection_id])
  @@index([collection_id], map: "idx_weaving_color_collections_collection")
  @@schema("public")
}

model weaving_material_collections {
  id                  String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  weaving_material_id String                @db.Uuid
  collection_id       String                @db.Uuid
  created_by          String?               @db.Uuid
  created_at          DateTime?             @default(now()) @db.Timestamp(6)
  collections         furniture_collections @relation(fields: [collection_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users               users?                @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  weaving_materials   weaving_materials     @relation(fields: [weaving_material_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([weaving_material_id, collection_id])
  @@index([collection_id], map: "idx_weaving_material_collections_collection")
  @@schema("public")
}

model weaving_pattern_collections {
  id                 String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  weaving_pattern_id String                @db.Uuid
  collection_id      String                @db.Uuid
  created_by         String?               @db.Uuid
  created_at         DateTime?             @default(now()) @db.Timestamp(6)
  collections        furniture_collections @relation(fields: [collection_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users              users?                @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  weaving_patterns   weaving_patterns      @relation(fields: [weaving_pattern_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([weaving_pattern_id, collection_id])
  @@index([collection_id], map: "idx_weaving_pattern_collections_collection")
  @@schema("public")
}

model wood_finish_collections {
  id             String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  wood_finish_id String                @db.Uuid
  collection_id  String                @db.Uuid
  created_by     String?               @db.Uuid
  created_at     DateTime?             @default(now()) @db.Timestamp(6)
  collections    furniture_collections @relation(fields: [collection_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users          users?                @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  wood_finishes  wood_finishes         @relation(fields: [wood_finish_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([wood_finish_id, collection_id])
  @@index([collection_id], map: "idx_wood_finish_collections_collection")
  @@schema("public")
}

model wood_type_collections {
  id            String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  wood_type_id  String                @db.Uuid
  collection_id String                @db.Uuid
  created_by    String?               @db.Uuid
  created_at    DateTime?             @default(now()) @db.Timestamp(6)
  collections   furniture_collections @relation(fields: [collection_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users         users?                @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  wood_types    wood_types            @relation(fields: [wood_type_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([wood_type_id, collection_id])
  @@index([collection_id], map: "idx_wood_type_collections_collection")
  @@schema("public")
}

enum aal_level {
  aal1
  aal2
  aal3

  @@schema("auth")
}

enum code_challenge_method {
  s256
  plain

  @@schema("auth")
}

enum factor_status {
  unverified
  verified

  @@schema("auth")
}

enum factor_type {
  totp
  webauthn
  phone

  @@schema("auth")
}

enum oauth_registration_type {
  dynamic
  manual

  @@schema("auth")
}

enum one_time_token_type {
  confirmation_token
  reauthentication_token
  recovery_token
  email_change_token_new
  email_change_token_current
  phone_change_token

  @@schema("auth")
}

enum address_type_enum {
  delivery
  billing
  pickup

  @@schema("public")
}

enum defect_severity_enum {
  critical
  major
  minor
  cosmetic

  @@schema("public")
}

enum document_access_level {
  private
  internal
  client_visible
  public

  @@schema("public")
}

enum document_category {
  design
  production
  prototyping
  shop_drawings
  invoices
  contracts
  correspondence
  photos
  qc_reports
  shipping
  other

  @@schema("public")
}

enum document_status {
  draft
  pending_review
  in_review
  approved
  rejected
  revision_requested
  archived
  deleted

  @@schema("public")
}

enum file_type_category {
  document
  image
  cad_3d
  vector
  video
  archive
  other

  @@schema("public")
}

enum manufacturer_status_enum {
  prospect
  approved
  preferred
  suspended
  inactive

  @@schema("public")
}

enum packing_material_type_enum {
  box
  padding
  wrap
  tape
  label
  cushioning

  @@schema("public")
}

enum packing_status_enum {
  pending
  in_progress
  packed
  shipped

  @@schema("public")
}

enum priority_enum {
  urgent
  high
  normal
  low

  @@schema("public")
}

enum production_status_enum {
  planned
  in_progress
  quality_check
  completed
  delayed
  on_hold

  @@schema("public")
}

enum qc_checkpoint_status_enum {
  pending
  passed
  failed
  na

  @@schema("public")
}

enum qc_stage_enum {
  incoming_inspection
  in_process_check
  final_inspection
  packaging_check

  @@schema("public")
}

enum qc_status_enum {
  pending
  in_progress
  passed
  failed
  on_hold

  @@schema("public")
}

enum quickbooks_sync_status {
  pending
  in_progress
  completed
  failed
  skipped

  @@schema("public")
}

enum shipping_status_enum {
  pending
  picked_up
  in_transit
  out_for_delivery
  delivered
  exception
  returned

  @@schema("public")
}

enum sync_direction {
  to_quickbooks
  from_quickbooks
  bidirectional

  @@schema("public")
}

enum user_role_enum {
  admin
  manager
  qc_inspector
  packer
  shipping_coordinator
  production_worker

  @@schema("public")
}

enum user_type_enum {
  employee
  contractor
  designer
  manufacturer
  finance
  super_admin
  customer

  @@schema("public")
}

// ============================================================================
// PHASE 1: PRODUCTION ORDERS MODULE - Database Schema
// Added: $(date +%Y-%m-%d)
// Purpose: Production orders with payment-gated workflow
// ============================================================================

// Production Orders - Main production order tracking with payment gates
model production_orders {
  id           String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  order_number String @unique // Auto-generated: PO-2025-0001

  // Links to existing tables
  order_id   String?   @db.Uuid // Links to CRM orders table - groups production orders for shipping
  orders     orders?   @relation(fields: [order_id], references: [id], onDelete: SetNull, onUpdate: NoAction)
  project_id String?   @db.Uuid
  projects   projects? @relation(fields: [project_id], references: [id], onDelete: SetNull, onUpdate: NoAction)

  // Product Type (90% catalog, 10% custom)
  product_type    String // "catalog" | "prototype" | "concept"
  catalog_item_id String? @db.Uuid
  items_catalog   items?  @relation("ProductionOrderCatalog", fields: [catalog_item_id], references: [id], onDelete: SetNull, onUpdate: NoAction)
  prototype_id    String? @db.Uuid
  items_prototype items?  @relation("ProductionOrderPrototype", fields: [prototype_id], references: [id], onDelete: SetNull, onUpdate: NoAction)
  concept_id      String? @db.Uuid
  items_concept   items?  @relation("ProductionOrderConcept", fields: [concept_id], references: [id], onDelete: SetNull, onUpdate: NoAction)

  // Order Details
  item_name        String
  item_description String?
  quantity         Int
  unit_price       Decimal @db.Decimal(10, 2)
  total_cost       Decimal @db.Decimal(10, 2) // quantity × unitPrice

  // Payment Status - CRITICAL FOR WORKFLOW GATES
  deposit_paid       Boolean @default(false)
  final_payment_paid Boolean @default(false)

  // Production Status
  status String @default("awaiting_deposit")
  // Status flow:
  // awaiting_deposit → deposit_paid → in_progress → completed → 
  // awaiting_final_payment → final_paid → shipped → delivered

  // Dates
  order_date          DateTime  @default(now()) @db.Timestamptz(6)
  estimated_ship_date DateTime? @db.Date
  actual_ship_date    DateTime? @db.Date

  // Factory Assignment
  factory_id    String?        @db.Uuid
  manufacturers manufacturers? @relation(fields: [factory_id], references: [id], onDelete: SetNull, onUpdate: NoAction)
  partners      partners?      @relation("FactoryOrders", fields: [factory_id], references: [id], onDelete: SetNull, onUpdate: NoAction, map: "production_orders_partner_factory_id_fkey")
  factory_notes String?

  // Metadata
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @updatedAt @db.Timestamptz(6)
  created_by String?  @db.Uuid
  users      users?   @relation(fields: [created_by], references: [id], onDelete: SetNull, onUpdate: NoAction)

  // Relations
  production_invoices      production_invoices[]
  production_payments      production_payments[]
  ordered_items_production ordered_items_production[]
  production_milestones    production_milestones[]
  documents                documents[]
  shipping_quotes          shipping_quotes[]
  shop_drawings            shop_drawings[]

  @@index([order_id], map: "idx_production_orders_order_id")
  @@index([project_id], map: "idx_production_orders_project_id")
  @@index([catalog_item_id], map: "idx_production_orders_catalog_item_id")
  @@index([status], map: "idx_production_orders_status")
  @@index([factory_id], map: "idx_production_orders_factory_id")
  @@index([order_date], map: "idx_production_orders_order_date")
  @@schema("public")
}

// Production Invoices - Auto-generated invoices with deposit/final workflow
model production_invoices {
  id             String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  invoice_number String @unique // Auto-generated: INV-2025-0001

  // Invoice Type - CRITICAL FOR AUTO-GENERATION
  invoice_type String // "deposit" | "final" | "full" | "custom"

  // Linked Records
  order_id            String?            @db.Uuid // Links to CRM order (ONE invoice per CRM order)
  orders              orders?            @relation(fields: [order_id], references: [id], onDelete: SetNull, onUpdate: NoAction)
  production_order_id String?            @db.Uuid // Deprecated: kept for backward compatibility
  production_orders   production_orders? @relation(fields: [production_order_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  project_id          String?            @db.Uuid
  projects            projects?          @relation(fields: [project_id], references: [id], onDelete: SetNull, onUpdate: NoAction)
  customer_id         String?            @db.Uuid
  customers           customers?         @relation(fields: [customer_id], references: [id], onDelete: SetNull, onUpdate: NoAction)

  // Amounts
  subtotal    Decimal @db.Decimal(10, 2)
  tax         Decimal @default(0) @db.Decimal(10, 2)
  shipping    Decimal @default(0) @db.Decimal(10, 2)
  total       Decimal @db.Decimal(10, 2)
  amount_paid Decimal @default(0) @db.Decimal(10, 2)
  amount_due  Decimal @db.Decimal(10, 2)

  // Payment Terms - CRITICAL
  payment_terms String // "50% deposit due on PO" | "50% balance + shipping at FOB"
  due_date      DateTime? @db.Date

  // Status
  status String @default("pending_payment")
  // pending_payment → partial_payment → paid → overdue → cancelled

  // Dates
  invoice_date DateTime  @default(now()) @db.Timestamptz(6)
  paid_date    DateTime? @db.Timestamptz(6)
  created_at   DateTime  @default(now()) @db.Timestamptz(6)
  updated_at   DateTime  @default(now()) @updatedAt @db.Timestamptz(6)

  // Relations
  production_invoice_line_items production_invoice_line_items[]
  production_payments           production_payments[]

  @@index([order_id], map: "idx_production_invoices_order_id")
  @@index([production_order_id], map: "idx_production_invoices_production_order_id")
  @@index([project_id], map: "idx_production_invoices_project_id")
  @@index([customer_id], map: "idx_production_invoices_customer_id")
  @@index([status], map: "idx_production_invoices_status")
  @@index([invoice_date], map: "idx_production_invoices_invoice_date")
  @@schema("public")
}

// Production Invoice Line Items - Invoice details
model production_invoice_line_items {
  id                    String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  production_invoice_id String              @db.Uuid
  production_invoices   production_invoices @relation(fields: [production_invoice_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  description String
  quantity    Int
  unit_price  Decimal @db.Decimal(10, 2)
  total       Decimal @db.Decimal(10, 2)

  created_at DateTime @default(now()) @db.Timestamptz(6)

  @@index([production_invoice_id], map: "idx_production_invoice_line_items_invoice_id")
  @@schema("public")
}

// Production Payments - Payment tracking with transaction details
model production_payments {
  id             String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  payment_number String @unique // Auto-generated: PAY-2025-0001

  // Links
  production_invoice_id String              @db.Uuid
  production_invoices   production_invoices @relation(fields: [production_invoice_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  production_order_id   String?             @db.Uuid
  production_orders     production_orders?  @relation(fields: [production_order_id], references: [id], onDelete: SetNull, onUpdate: NoAction)

  // Payment Details
  amount         Decimal @db.Decimal(10, 2)
  payment_method String // "credit_card" | "wire_transfer" | "check" | "ach"
  transaction_id String? // External transaction reference

  // Status
  status String @default("completed")
  // pending → processing → completed → failed → refunded

  // Metadata
  payment_date DateTime @default(now()) @db.Timestamptz(6)
  notes        String?
  created_at   DateTime @default(now()) @db.Timestamptz(6)
  updated_at   DateTime @default(now()) @updatedAt @db.Timestamptz(6)
  created_by   String?  @db.Uuid
  users        users?   @relation(fields: [created_by], references: [id], onDelete: SetNull, onUpdate: NoAction)

  @@index([production_invoice_id], map: "idx_production_payments_invoice_id")
  @@index([production_order_id], map: "idx_production_payments_order_id")
  @@index([status], map: "idx_production_payments_status")
  @@index([payment_date], map: "idx_production_payments_payment_date")
  @@schema("public")
}

// Ordered Items Production - Individual unit tracking for production orders
model ordered_items_production {
  id  String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sku String @unique // Auto-generated from production order

  // Links
  production_order_id String            @db.Uuid
  production_orders   production_orders @relation(fields: [production_order_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  // Item Details
  item_number   Int // 1, 2, 3... for tracking individual units
  serial_number String? // Optional manufacturer serial

  // Production Status
  status String @default("pending")
  // pending → in_production → quality_check → approved → packed → shipped → delivered

  // Quality Control
  qc_status String? // "pass" | "fail" | "pending"
  qc_notes  String?
  qc_date   DateTime? @db.Timestamptz(6)
  qc_by     String?   @db.Uuid
  users     users?    @relation(fields: [qc_by], references: [id], onDelete: SetNull, onUpdate: NoAction)

  // Shipment Tracking
  shipment_id String?    @db.Uuid
  shipments   shipments? @relation(fields: [shipment_id], references: [id], onDelete: SetNull, onUpdate: NoAction)

  // Dates
  production_start_date DateTime? @db.Timestamptz(6)
  production_end_date   DateTime? @db.Timestamptz(6)
  shipped_date          DateTime? @db.Timestamptz(6)
  delivered_date        DateTime? @db.Timestamptz(6)

  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @updatedAt @db.Timestamptz(6)

  @@index([production_order_id], map: "idx_ordered_items_production_order_id")
  @@index([shipment_id], map: "idx_ordered_items_production_shipment_id")
  @@index([status], map: "idx_ordered_items_production_status")
  @@index([qc_status], map: "idx_ordered_items_production_qc_status")
  @@schema("public")
}

// ============================================
// PHASE 2: PARTNERS MODULE
// ============================================

// Partners - Factories and Designers
model partners {
  id   String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type String // "factory" | "designer"

  // Company Information
  company_name        String
  business_name       String?
  registration_number String?

  // Contact Information
  primary_contact String
  primary_email   String
  primary_phone   String
  website         String?

  // Address
  address_line1 String
  address_line2 String?
  city          String
  state         String?
  postal_code   String
  country       String

  // Business Details
  specializations String[] // Array: ["Upholstery", "Wood Furniture"]
  capabilities    String[] // Array: ["Large Scale", "Custom Work"]
  certifications  String[] // Array: ["ISO 9001", "FSC Certified"]
  languages       String[] // Languages spoken

  // Capacity & Metrics
  production_capacity Int? // Units per month
  lead_time_days      Int? // Typical lead time
  minimum_order       Int? // Minimum order quantity

  // Financial
  payment_terms String? // "Net 30", "50% upfront"
  currency      String  @default("USD")

  // Status
  status String @default("active")
  // active | inactive | pending_approval | suspended

  // Quality Metrics
  quality_rating        Decimal? @db.Decimal(3, 2) // 0.00 to 5.00
  on_time_delivery_rate Decimal? @db.Decimal(5, 2) // Percentage
  defect_rate           Decimal? @db.Decimal(5, 2) // Percentage

  // Portal Access
  portal_enabled Boolean @default(false)
  portal_user_id String? @unique @db.Uuid
  portal_user    users?  @relation("PartnerPortalUser", fields: [portal_user_id], references: [id], onDelete: SetNull, onUpdate: NoAction)

  // Relationships
  contacts            partner_contacts[]
  documents           partner_documents[]
  production_orders   production_orders[]   @relation("FactoryOrders")
  partner_performance partner_performance[]
  shop_drawings       shop_drawings[]       @relation("FactoryShopDrawings")

  // Metadata
  notes           String?
  internal_rating String? // Internal notes on partner
  tags            String[]

  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @updatedAt @db.Timestamptz(6)

  @@index([type], map: "idx_partners_type")
  @@index([status], map: "idx_partners_status")
  @@index([company_name], map: "idx_partners_company_name")
  @@schema("public")
}

// Partner Contacts - Multiple contacts per partner
model partner_contacts {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  partner_id String   @db.Uuid
  partners   partners @relation(fields: [partner_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  // Contact Details
  name   String
  role   String // "Production Manager", "Quality Lead", "Design Director"
  email  String
  phone  String?
  mobile String?

  // Contact Type
  is_primary    Boolean @default(false)
  is_qc         Boolean @default(false)
  is_production Boolean @default(false)
  is_finance    Boolean @default(false)

  // Communication Preferences
  preferred_contact_method String? // "email" | "phone" | "whatsapp"
  timezone                 String?
  languages                String[]

  // Status
  active Boolean @default(true)

  // Metadata
  notes String?

  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @updatedAt @db.Timestamptz(6)

  @@index([partner_id], map: "idx_partner_contacts_partner_id")
  @@index([email], map: "idx_partner_contacts_email")
  @@schema("public")
}

// Partner Documents - Contracts, certifications, NDAs
model partner_documents {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  partner_id String   @db.Uuid
  partners   partners @relation(fields: [partner_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  // Document Details
  document_type String // "contract" | "nda" | "certification" | "insurance" | "quality_report"
  title         String
  description   String?

  // File Storage
  file_url  String // Supabase storage URL
  file_name String
  file_size BigInt
  mime_type String

  // Document Status
  status String @default("active")
  // active | expired | pending_renewal | archived

  // Dates
  issue_date  DateTime? @db.Timestamptz(6)
  expiry_date DateTime? @db.Timestamptz(6)

  // Uploaded By
  uploaded_by String @db.Uuid
  users       users  @relation(fields: [uploaded_by], references: [id], onDelete: Restrict, onUpdate: NoAction)

  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @updatedAt @db.Timestamptz(6)

  @@index([partner_id], map: "idx_partner_documents_partner_id")
  @@index([document_type], map: "idx_partner_documents_document_type")
  @@index([status], map: "idx_partner_documents_status")
  @@schema("public")
}

// Partner Performance Tracking
model partner_performance {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  partner_id String   @db.Uuid
  partners   partners @relation(fields: [partner_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  // Time Period
  period_start DateTime @db.Timestamptz(6)
  period_end   DateTime @db.Timestamptz(6)

  // Metrics
  orders_completed  Int  @default(0)
  orders_on_time    Int  @default(0)
  total_defects     Int  @default(0)
  average_lead_time Int? // Days

  // Calculated Rates
  on_time_rate Decimal @db.Decimal(5, 2)
  defect_rate  Decimal @db.Decimal(5, 2)

  // Financial
  total_revenue       Decimal @db.Decimal(12, 2)
  average_order_value Decimal @db.Decimal(10, 2)

  // Satisfaction
  satisfaction_score Decimal? @db.Decimal(3, 2) // 0.00 to 5.00

  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @updatedAt @db.Timestamptz(6)

  @@unique([partner_id, period_start, period_end], map: "unique_partner_performance_period")
  @@index([partner_id], map: "idx_partner_performance_partner_id")
  @@schema("public")
}

// ===================================
// PHASE 3: CUSTOMER PORTAL TABLES
// ===================================

// Customer Notifications (Phase 3)
model customer_notifications {
  id          String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id     String @db.Uuid
  customer_id String @db.Uuid

  // Notification Details
  type    String  @db.VarChar(50)
  // "order_update" | "payment_received" | "shipment_update" | "document_uploaded"
  title   String  @db.VarChar(255)
  message String
  link    String? @db.VarChar(500)
  // Link to relevant page in portal

  // Status
  read    Boolean   @default(false)
  read_at DateTime? @db.Timestamptz(6)

  // Related Entity (optional)
  related_entity_type String? @db.VarChar(50)
  // "production_order" | "invoice" | "shipment" | "document"
  related_entity_id   String? @db.Uuid

  created_at DateTime @default(now()) @db.Timestamptz(6)

  // Relations
  users     users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  customers customers @relation(fields: [customer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([user_id, read], map: "idx_customer_notifications_user_read")
  @@index([customer_id], map: "idx_customer_notifications_customer_id")
  @@index([created_at], map: "idx_customer_notifications_created_at")
  @@index([type], map: "idx_customer_notifications_type")
  @@schema("public")
}

// Customer Shipping Addresses (Phase 3)
model customer_shipping_addresses {
  id          String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  customer_id String @db.Uuid

  // Address Details
  label          String  @db.VarChar(100)
  // "Home", "Office", "Warehouse", etc.
  recipient_name String  @db.VarChar(255)
  address_line1  String  @db.VarChar(255)
  address_line2  String? @db.VarChar(255)
  city           String  @db.VarChar(100)
  state          String  @db.VarChar(50)
  postal_code    String  @db.VarChar(20)
  country        String  @default("USA") @db.VarChar(100)

  // Contact
  phone String? @db.VarChar(20)

  // Status
  is_default Boolean @default(false)
  active     Boolean @default(true)

  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @updatedAt @db.Timestamptz(6)

  // Relations
  customers customers @relation(fields: [customer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([customer_id], map: "idx_customer_shipping_addresses_customer_id")
  @@index([is_default], map: "idx_customer_shipping_addresses_is_default")
  @@index([active], map: "idx_customer_shipping_addresses_active")
  @@schema("public")
}

model oauth_tokens {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id       String    @db.Uuid
  provider      String    @db.VarChar(50)
  access_token  String
  refresh_token String?
  token_type    String?   @default("Bearer") @db.VarChar(50)
  expires_at    DateTime  @db.Timestamptz(6)
  scope         String?

  created_at    DateTime  @default(now()) @db.Timestamptz(6)
  updated_at    DateTime  @default(now()) @updatedAt @db.Timestamptz(6)
  last_used_at  DateTime? @db.Timestamptz(6)

  users         users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, provider])
  @@index([user_id], map: "idx_oauth_tokens_user_id")
  @@index([provider], map: "idx_oauth_tokens_provider")
  @@index([expires_at], map: "idx_oauth_tokens_expires_at")
  @@schema("public")
}

model mood_boards {
  id                String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  board_number      String            @unique
  name              String            @db.VarChar(255)
  description       String?

  design_project_id String?           @db.Uuid
  designer_id       String?           @db.Uuid

  board_type        String            @default("mood") @db.VarChar(50)
  layout            Json?             @default("{}")
  images            Json?             @default("[]")
  notes             String?

  is_shared         Boolean           @default(false)
  shared_with       Json?             @default("[]")
  share_token       String?           @unique
  share_expires_at  DateTime?         @db.Timestamptz(6)

  status            String            @default("draft") @db.VarChar(50)

  created_by        String?           @db.Uuid
  created_at        DateTime          @default(now()) @db.Timestamptz(6)
  updated_at        DateTime          @default(now()) @updatedAt @db.Timestamptz(6)

  design_projects   design_projects?  @relation(fields: [design_project_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  designers         designers?        @relation(fields: [designer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users             users?            @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([design_project_id], map: "idx_mood_boards_design_project_id")
  @@index([designer_id], map: "idx_mood_boards_designer_id")
  @@index([board_type], map: "idx_mood_boards_board_type")
  @@index([status], map: "idx_mood_boards_status")
  @@index([created_by], map: "idx_mood_boards_created_by")
  @@schema("public")
}

// ============================================================================
// SHOP DRAWINGS MODULE - Complex Multi-Party Review Workflow
// ============================================================================

model shop_drawings {
  id                   String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  // Production Order Link
  production_order_id  String    @db.Uuid
  production_orders    production_orders @relation(fields: [production_order_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  // Factory Link
  factory_id           String?   @db.Uuid
  partners             partners? @relation("FactoryShopDrawings", fields: [factory_id], references: [id], onDelete: SetNull, onUpdate: NoAction)

  // Drawing Identity
  drawing_number       String    @unique // Auto-generated: SD-2025-0001
  drawing_name         String
  drawing_type         String?   // "technical" | "assembly" | "detail" | "layout"

  // Version Management
  current_version      Int       @default(1)

  // Status
  status               String    @default("in_review")
  // "draft" | "in_review" | "revision_requested" | "designer_approved" | "approved" | "rejected"

  // Approval Tracking - Limn Team
  limn_approved_by     String?   @db.Uuid
  limn_approved_at     DateTime? @db.Timestamptz(6)
  limn_approver        users?    @relation("LimnDrawingApprover", fields: [limn_approved_by], references: [id], onDelete: NoAction, onUpdate: NoAction)

  // Approval Tracking - Designer
  designer_approved_by String?   @db.Uuid
  designer_approved_at DateTime? @db.Timestamptz(6)
  designer_approver    users?    @relation("DesignerDrawingApprover", fields: [designer_approved_by], references: [id], onDelete: NoAction, onUpdate: NoAction)

  // Final approval when BOTH limn and designer approve
  final_approved_at    DateTime? @db.Timestamptz(6)

  // Rejection tracking
  rejected_by          String?   @db.Uuid
  rejected_at          DateTime? @db.Timestamptz(6)
  rejection_reason     String?

  // Relationships
  versions             shop_drawing_versions[]

  // Metadata
  notes                String?
  tags                 String[]  @default([])

  // Audit
  created_by           String    @db.Uuid
  creator              users     @relation("DrawingCreator", fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  created_at           DateTime  @default(now()) @db.Timestamptz(6)
  updated_at           DateTime  @default(now()) @updatedAt @db.Timestamptz(6)

  @@index([production_order_id], map: "idx_shop_drawings_production_order_id")
  @@index([factory_id], map: "idx_shop_drawings_factory_id")
  @@index([status], map: "idx_shop_drawings_status")
  @@index([drawing_number], map: "idx_shop_drawings_drawing_number")
  @@index([created_by], map: "idx_shop_drawings_created_by")
  @@schema("public")
}

model shop_drawing_versions {
  id                 String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  // Parent Drawing
  shop_drawing_id    String   @db.Uuid
  shop_drawings      shop_drawings @relation(fields: [shop_drawing_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  // Version Identity
  version_number     Int      // 1, 2, 3, 4...

  // File Details
  file_name          String
  file_url           String   // Supabase Storage URL
  file_size          BigInt
  mime_type          String   @default("application/pdf")

  // Upload Context
  uploaded_by        String   @db.Uuid
  uploader           users    @relation("VersionUploader", fields: [uploaded_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  uploaded_by_role   String   // "factory" | "designer" | "limn_team"
  upload_notes       String?  // Why this version was uploaded

  // Version Status
  status             String   @default("current")
  // "current" | "superseded" | "archived"

  // Review tracking
  review_started_at  DateTime? @db.Timestamptz(6)
  review_completed_at DateTime? @db.Timestamptz(6)

  // Relationships
  comments           shop_drawing_comments[]
  approvals          shop_drawing_approvals[]

  // Audit
  uploaded_at        DateTime @default(now()) @db.Timestamptz(6)

  @@unique([shop_drawing_id, version_number])
  @@index([shop_drawing_id], map: "idx_shop_drawing_versions_drawing_id")
  @@index([uploaded_by], map: "idx_shop_drawing_versions_uploaded_by")
  @@index([status], map: "idx_shop_drawing_versions_status")
  @@schema("public")
}

model shop_drawing_comments {
  id                   String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  // Version Link
  drawing_version_id   String    @db.Uuid
  shop_drawing_versions shop_drawing_versions @relation(fields: [drawing_version_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  // Comment Content
  comment_text         String    @db.Text
  comment_type         String    // "review" | "question" | "change_request" | "approval" | "general"

  // PDF Annotation Data (for in-document comments)
  pdf_page_number      Int?
  pdf_x_coordinate     Decimal?  @db.Decimal(10, 2)
  pdf_y_coordinate     Decimal?  @db.Decimal(10, 2)
  annotation_data      Json?     // Full PDF.js annotation object

  // Comment Author
  author_id            String    @db.Uuid
  author               users     @relation("DrawingCommentAuthor", fields: [author_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  author_role          String    // "factory" | "designer" | "limn_team"

  // Comment Status
  status               String    @default("open")
  // "open" | "addressed" | "resolved" | "dismissed"

  resolved_by          String?   @db.Uuid
  resolver             users?    @relation("DrawingCommentResolver", fields: [resolved_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  resolved_at          DateTime? @db.Timestamptz(6)
  resolution_notes     String?

  // Threading (replies to comments)
  parent_comment_id    String?   @db.Uuid
  parent_comment       shop_drawing_comments?  @relation("CommentThread", fields: [parent_comment_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  replies              shop_drawing_comments[] @relation("CommentThread")

  // Audit
  created_at           DateTime  @default(now()) @db.Timestamptz(6)
  updated_at           DateTime  @default(now()) @updatedAt @db.Timestamptz(6)

  @@index([drawing_version_id], map: "idx_shop_drawing_comments_version_id")
  @@index([author_id], map: "idx_shop_drawing_comments_author_id")
  @@index([status], map: "idx_shop_drawing_comments_status")
  @@index([parent_comment_id], map: "idx_shop_drawing_comments_parent_id")
  @@schema("public")
}

model shop_drawing_approvals {
  id                   String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  // Version Link
  drawing_version_id   String   @db.Uuid
  shop_drawing_versions shop_drawing_versions @relation(fields: [drawing_version_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  // Approver Identity
  approver_id          String   @db.Uuid
  approver             users    @relation("DrawingApprover", fields: [approver_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  approver_role        String   // "limn_team" | "designer"

  // Approval Decision
  decision             String   // "approved" | "rejected" | "changes_requested"
  comments             String?  @db.Text

  // Conditional approval (approve with minor changes)
  is_conditional       Boolean  @default(false)
  conditions           String?  @db.Text

  // Approval timestamp
  approved_at          DateTime @default(now()) @db.Timestamptz(6)

  @@index([drawing_version_id], map: "idx_shop_drawing_approvals_version_id")
  @@index([approver_id], map: "idx_shop_drawing_approvals_approver_id")
  @@index([decision], map: "idx_shop_drawing_approvals_decision")
  @@schema("public")
}
